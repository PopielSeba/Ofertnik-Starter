{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Ofertnik - PPP :: Program Equipment Rental System\n\n## Overview\n\nOfertnik is a comprehensive equipment rental pricing system for PPP :: Program, focusing on automated quote generation with tiered discount pricing. It includes equipment catalog management, client management, and admin controls. The application aims to streamline the rental process, provide accurate pricing, and offer robust management capabilities for any type of rental equipment.\n\n## Recent Changes (August 2025)\n\n- **User Role System**: Added \"Kierownik\" role with equipment management access but restricted from ADMIN ROOM. Three-tier system: Admin (full access), Kierownik (equipment only), Employee (basic access).\n- **Equipment Management**: Enhanced dialog windows with proper height constraints (90vh) and scrolling functionality\n- **Authorization Updates**: Kierownik role can access equipment management, categories, pricing, and related functions but cannot access user management or ADMIN ROOM\n- **UI/UX Improvements**: Redesigned navigation bar with compact spacing, updated logo layout (PPP above Program, removed \"::\"), and optimized button sizing\n- **User Management Streamlined**: Simplified pending approval page with clean \"Oczekiwanie na akceptację rejestracji przez administratora\" message\n- **Authentication Flow**: Enhanced authorization handling for unapproved users with proper error handling and user experience flow\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: Polish (preferred for communication)\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Form Handling**: React Hook Form with Zod validation\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for REST API\n- **Database**: PostgreSQL with Neon serverless driver\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Authentication**: Replit OIDC authentication with Passport.js\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n\n### Database Design\n- **Users**: Three-tier role-based access (admin/kierownik/employee)\n- **Equipment Categories**: Hierarchical organization\n- **Equipment**: Items with specifications, quantities, and availability\n- **Equipment Pricing**: Tiered pricing with period-based discounts\n- **Clients**: Company and contact information\n- **Quotes**: Quote generation with line items and automatic calculations\n- **Sessions**: Secure session storage\n\n### Key Features\n- **Authentication System**: Replit OIDC integration with three-tier role-based access control (Admin/Kierownik/Employee). User approval workflow for new registrations.\n- **Equipment Management**: CRUD operations for equipment, categories, and inventory tracking. Includes support for diverse equipment types (e.g., vehicles with km-based calculations, engine equipment with motohour intervals).\n- **Quote Generation System**: Dynamic pricing based on rental period with tiered discounts (e.g., 1-2 days: base price; 3-7 days: 14.29% discount; 8-18 days: 28.57% discount; 19-29 days: 42.86% discount; 30+ days: 57.14% discount). Supports additional equipment/accessories, installation, disassembly, and travel/service costs.\n- **Needs Assessment System**: Comprehensive \"BADANIA POTRZEB\" feature with admin-managed questions, printable reports, conditional equipment accessories selection, and dynamic category creation. Admin panel allows creating equipment categories that automatically generate corresponding equipment accessory categories.\n- **Admin Panel**: Comprehensive management for equipment, pricing, users (including approval/rejection), service costs, and needs assessment questions/categories.\n\n## External Dependencies\n\n- **@neondatabase/serverless**: PostgreSQL database connection\n- **drizzle-orm**: Type-safe database operations\n- **@tanstack/react-query**: Server state management\n- **@radix-ui/***: Accessible UI primitives\n- **react-hook-form**: Form state management\n- **passport**: Authentication middleware\n- **openid-client**: OIDC authentication\n- **TypeScript**: Type safety across the stack\n- **Vite**: Fast development builds\n- **Tailwind CSS**: Utility-first styling\n- **ESBuild**: Production bundling\n- **Drizzle Kit**: Database migrations\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay\n- **@replit/vite-plugin-cartographer**: Development tooling","size_bytes":4740},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'default-dev-secret-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // Check if user already exists\n  const existingUser = await storage.getUser(claims[\"sub\"]);\n  \n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n    // New users need approval, existing users keep their approval status\n    isApproved: existingUser?.isApproved ?? false,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n\n// Middleware for checking user approval status\nexport const isApproved: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n  \n  try {\n    const dbUser = await storage.getUser(user.claims.sub);\n    \n    if (!dbUser?.isApproved) {\n      return res.status(403).json({ \n        message: \"Account pending approval\", \n        needsApproval: true \n      });\n    }\n    \n    return next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n","size_bytes":5019},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isApproved } from \"./replitAuth\";\n\n// Admin middleware\nconst requireAdmin = async (req: any, res: any, next: any) => {\n  try {\n    const userId = req.user.claims.sub;\n    const user = await storage.getUser(userId);\n    \n    if (!user || user.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    \n    next();\n  } catch (error) {\n    console.error(\"Error checking admin status:\", error);\n    res.status(500).json({ message: \"Failed to verify admin status\" });\n  }\n};\n\n// API Key middleware for public endpoints\nconst requireApiKey = (permissions: string[] = []) => {\n  return async (req: any, res: any, next: any) => {\n    try {\n      const apiKey = req.headers['x-api-key'] || req.headers['authorization']?.replace('Bearer ', '');\n      \n      if (!apiKey) {\n        return res.status(401).json({ \n          error: \"API key required\", \n          message: \"Provide API key in X-API-Key header or Authorization Bearer token\" \n        });\n      }\n\n      // Find and validate API key\n      const keyRecord = await db.select()\n        .from(apiKeys)\n        .where(eq(apiKeys.keyValue, apiKey))\n        .limit(1);\n\n      if (keyRecord.length === 0) {\n        return res.status(401).json({ \n          error: \"Invalid API key\", \n          message: \"The provided API key is not valid\" \n        });\n      }\n\n      const key = keyRecord[0];\n      \n      if (!key.isActive) {\n        return res.status(401).json({ \n          error: \"API key inactive\", \n          message: \"The provided API key has been deactivated\" \n        });\n      }\n\n      // Check permissions if specified\n      if (permissions.length > 0) {\n        const keyPermissions = key.permissions as string[] || [];\n        const hasPermission = permissions.some(permission => \n          keyPermissions.includes(permission) || keyPermissions.includes('*')\n        );\n        \n        if (!hasPermission) {\n          return res.status(403).json({ \n            error: \"Insufficient permissions\", \n            message: `API key does not have required permissions: ${permissions.join(', ')}` \n          });\n        }\n      }\n\n      // Update last used timestamp\n      await db.update(apiKeys)\n        .set({ lastUsedAt: new Date() })\n        .where(eq(apiKeys.id, key.id));\n\n      req.apiKey = key;\n      next();\n    } catch (error) {\n      console.error(\"Error validating API key:\", error);\n      res.status(500).json({ \n        error: \"Authentication error\", \n        message: \"Failed to validate API key\" \n      });\n    }\n  };\n};\nimport { z } from \"zod\";\nimport {\n  insertEquipmentCategorySchema,\n  insertEquipmentSchema,\n  insertEquipmentPricingSchema,\n  insertEquipmentAdditionalSchema,\n  insertEquipmentServiceCostsSchema,\n  insertEquipmentServiceItemsSchema,\n  insertClientSchema,\n  insertQuoteSchema,\n  insertQuoteItemSchema,\n  insertPricingSchemaSchema,\n  insertNeedsAssessmentQuestionSchema,\n  insertNeedsAssessmentResponseSchema,\n  insertApiKeySchema,\n  publicQuoteSchema,\n  publicAssessmentSchema,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, asc, count, and, inArray, gte, lte } from \"drizzle-orm\";\nimport { \n  equipmentCategories, \n  equipment, \n  equipmentPricing, \n  equipmentAdditional, \n  equipmentServiceCosts, \n  equipmentServiceItems, \n  clients, \n  quotes, \n  quoteItems, \n  users, \n  pricingSchemas,\n  needsAssessmentQuestions,\n  needsAssessmentResponses,\n  apiKeys\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Remove development mode bypass - require authentication for all protected routes\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      // If user exists but is not approved, return user data without error\n      if (user && !user.isApproved) {\n        return res.json({ \n          ...user,\n          needsApproval: true\n        });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User management routes (admin only)\n  app.get('/api/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/users/:id/role', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      const { role } = req.body;\n      \n      if (!['admin', 'kierownik', 'employee'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const updatedUser = await storage.updateUserRole(id, role);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.put('/api/users/:id/toggle-active', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      const updatedUser = await storage.toggleUserActive(id);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error toggling user active status:\", error);\n      res.status(500).json({ message: \"Failed to toggle user active status\" });\n    }\n  });\n\n  app.get('/api/users/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const pendingUsers = await storage.getPendingUsers();\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error(\"Error fetching pending users:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending users\" });\n    }\n  });\n\n  app.post('/api/users/:id/approve', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      const approvedUser = await storage.approveUser(id, currentUser.id);\n      res.json(approvedUser);\n    } catch (error) {\n      console.error(\"Error approving user:\", error);\n      res.status(500).json({ message: \"Failed to approve user\" });\n    }\n  });\n\n  app.delete('/api/users/:id/reject', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      await storage.rejectUser(id);\n      res.json({ message: \"User rejected and removed successfully\" });\n    } catch (error) {\n      console.error(\"Error rejecting user:\", error);\n      res.status(500).json({ message: \"Failed to reject user\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const { id } = req.params;\n      \n      // Prevent admin from deleting themselves\n      if (id === req.user.claims.sub) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n      \n      await storage.deleteUser(id);\n      res.json({ message: \"User deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  // Equipment Categories\n  app.get('/api/equipment-categories', isAuthenticated, async (req, res) => {\n    try {\n      const categories = await storage.getEquipmentCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.post('/api/equipment-categories', isAuthenticated, async (req: any, res) => {\n    try {\n      // Check if user is admin or kierownik\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const categoryData = insertEquipmentCategorySchema.parse(req.body);\n      const category = await storage.createEquipmentCategory(categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.delete('/api/equipment-categories/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteEquipmentCategory(id);\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Equipment\n  app.get('/api/equipment/inactive', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const equipment = await storage.getInactiveEquipment();\n      res.json(equipment);\n    } catch (error) {\n      console.error(\"Error fetching inactive equipment:\", error);\n      res.status(500).json({ message: \"Failed to fetch inactive equipment\" });\n    }\n  });\n\n  app.get('/api/equipment', isAuthenticated, async (req, res) => {\n    try {\n      const equipment = await storage.getEquipment();\n      res.json(equipment);\n    } catch (error) {\n      console.error(\"Error fetching equipment:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment\" });\n    }\n  });\n\n  app.get('/api/equipment/:id', isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const equipment = await storage.getEquipmentById(id);\n      if (!equipment) {\n        return res.status(404).json({ message: \"Equipment not found\" });\n      }\n      res.json(equipment);\n    } catch (error) {\n      console.error(\"Error fetching equipment:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment\" });\n    }\n  });\n\n  app.post('/api/equipment', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const equipmentData = insertEquipmentSchema.parse(req.body);\n      const equipment = await storage.createEquipment(equipmentData);\n      res.json({\n        ...equipment,\n        message: \"Sprzęt został utworzony z domyślnymi cenami 100 zł/dzień (0% rabaty). Zaktualizuj ceny w sekcji 'Cenniki sprzętu'.\"\n      });\n    } catch (error) {\n      console.error(\"Error creating equipment:\", error);\n      res.status(500).json({ message: \"Failed to create equipment\" });\n    }\n  });\n\n  app.put('/api/equipment/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      console.log(\"Update equipment request body:\", req.body);\n      \n      // Handle both direct body and nested equipment field\n      const equipmentData = req.body.equipment || req.body;\n      console.log(\"Equipment data for update:\", equipmentData);\n      \n      const parsedData = insertEquipmentSchema.partial().parse(equipmentData);\n      const equipment = await storage.updateEquipment(id, parsedData);\n      res.json(equipment);\n    } catch (error) {\n      console.error(\"Error updating equipment:\", error);\n      res.status(500).json({ message: \"Failed to update equipment\" });\n    }\n  });\n\n  app.patch('/api/equipment/:id/quantity', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const { quantity, availableQuantity } = req.body;\n      \n      if (typeof quantity !== 'number' || typeof availableQuantity !== 'number') {\n        return res.status(400).json({ message: \"Quantity and availableQuantity must be numbers\" });\n      }\n\n      if (availableQuantity > quantity) {\n        return res.status(400).json({ message: \"Available quantity cannot exceed total quantity\" });\n      }\n\n      const equipment = await storage.updateEquipment(id, { quantity, availableQuantity });\n      res.json(equipment);\n    } catch (error) {\n      console.error(\"Error updating equipment quantity:\", error);\n      res.status(500).json({ message: \"Failed to update equipment quantity\" });\n    }\n  });\n\n  app.delete('/api/equipment/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteEquipment(id);\n      res.json({ message: \"Equipment deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting equipment:\", error);\n      res.status(500).json({ message: \"Failed to delete equipment\" });\n    }\n  });\n\n  app.delete('/api/equipment/:id/permanent', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.permanentlyDeleteEquipment(id);\n      res.json({ message: \"Equipment permanently deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error permanently deleting equipment:\", error);\n      res.status(500).json({ message: \"Failed to permanently delete equipment\" });\n    }\n  });\n\n  // Equipment Pricing\n  app.post('/api/equipment-pricing', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const pricingData = insertEquipmentPricingSchema.parse(req.body);\n      const pricing = await storage.createEquipmentPricing(pricingData);\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Error creating pricing:\", error);\n      res.status(500).json({ message: \"Failed to create pricing\" });\n    }\n  });\n\n  app.patch('/api/equipment-pricing/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const pricingData = insertEquipmentPricingSchema.partial().parse(req.body);\n      const pricing = await storage.updateEquipmentPricing(id, pricingData);\n      res.json(pricing);\n    } catch (error) {\n      console.error(\"Error updating pricing:\", error);\n      res.status(500).json({ message: \"Failed to update pricing\" });\n    }\n  });\n\n  app.delete('/api/equipment-pricing/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteEquipmentPricing(id);\n      res.json({ message: \"Equipment pricing deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting pricing:\", error);\n      res.status(500).json({ message: \"Failed to delete pricing\" });\n    }\n  });\n\n  // Equipment Additional and Accessories\n  app.get('/api/equipment/:id/additional', isAuthenticated, async (req, res) => {\n    try {\n      const equipmentId = parseInt(req.params.id);\n      let additional = await storage.getEquipmentAdditional(equipmentId);\n      \n      // If no additional equipment exists, create a default one\n      if (additional.length === 0) {\n        await storage.createEquipmentAdditional({\n          equipmentId: equipmentId,\n          type: \"additional\",\n          name: \"Dodatkowe wyposażenie 1\",\n          price: \"0.00\",\n          position: 1\n        });\n        additional = await storage.getEquipmentAdditional(equipmentId);\n      }\n      \n      res.json(additional);\n    } catch (error) {\n      console.error(\"Error fetching equipment additional:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment additional\" });\n    }\n  });\n\n  app.post('/api/equipment-additional', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const additionalData = insertEquipmentAdditionalSchema.parse(req.body);\n      const additional = await storage.createEquipmentAdditional(additionalData);\n      res.json(additional);\n    } catch (error) {\n      console.error(\"Error creating equipment additional:\", error);\n      res.status(500).json({ message: \"Failed to create equipment additional\" });\n    }\n  });\n\n  app.patch('/api/equipment-additional/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const additionalData = insertEquipmentAdditionalSchema.partial().parse(req.body);\n      const additional = await storage.updateEquipmentAdditional(id, additionalData);\n      res.json(additional);\n    } catch (error) {\n      console.error(\"Error updating equipment additional:\", error);\n      res.status(500).json({ message: \"Failed to update equipment additional\" });\n    }\n  });\n\n  app.delete('/api/equipment-additional/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'kierownik') {\n        return res.status(403).json({ message: \"Access denied. Admin or kierownik role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteEquipmentAdditional(id);\n      res.json({ message: \"Equipment additional deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting equipment additional:\", error);\n      res.status(500).json({ message: \"Failed to delete equipment additional\" });\n    }\n  });\n\n  // Clients\n  app.get('/api/clients', isAuthenticated, async (req, res) => {\n    try {\n      const clients = await storage.getClients();\n      res.json(clients);\n    } catch (error) {\n      console.error(\"Error fetching clients:\", error);\n      res.status(500).json({ message: \"Failed to fetch clients\" });\n    }\n  });\n\n  app.post('/api/clients', isAuthenticated, async (req, res) => {\n    try {\n      const clientData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(clientData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error creating client:\", error);\n      res.status(500).json({ message: \"Failed to create client\" });\n    }\n  });\n\n  app.put('/api/clients/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const clientData = insertClientSchema.parse(req.body);\n      const client = await storage.updateClient(id, clientData);\n      res.json(client);\n    } catch (error) {\n      console.error(\"Error updating client:\", error);\n      res.status(500).json({ message: \"Failed to update client\" });\n    }\n  });\n\n  // Quotes - accessible to admin and employee roles\n  app.get('/api/quotes', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const quotes = await storage.getQuotes();\n      res.json(quotes);\n    } catch (error) {\n      console.error(\"Error fetching quotes:\", error);\n      res.status(500).json({ message: \"Failed to fetch quotes\" });\n    }\n  });\n\n  app.get('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const quote = await storage.getQuoteById(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n      res.status(500).json({ message: \"Failed to fetch quote\" });\n    }\n  });\n\n  app.post('/api/quotes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const quoteData = insertQuoteSchema.parse({\n        ...req.body,\n        createdById: userId,\n        // Generate quote number with sequential number and date format: 01/08.2025\n        quoteNumber: await (async () => {\n          const today = new Date();\n          const dateStr = `${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;\n          \n          // Get the count of quotes created today\n          const startOfDay = new Date(today);\n          startOfDay.setHours(0, 0, 0, 0);\n          const endOfDay = new Date(today);\n          endOfDay.setHours(23, 59, 59, 999);\n          \n          const todayQuotes = await db.select({ count: sql<number>`count(*)` })\n            .from(quotes)\n            .where(and(\n              sql`${quotes.createdAt} >= ${startOfDay.toISOString()}`,\n              sql`${quotes.createdAt} <= ${endOfDay.toISOString()}`\n            ));\n          \n          const sequentialNumber = (todayQuotes[0]?.count || 0) + 1;\n          return `${String(sequentialNumber).padStart(2, '0')}/${dateStr}`;\n        })(),\n        isGuestQuote: false,\n      });\n      const quote = await storage.createQuote(quoteData);\n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error creating quote:\", error);\n      console.error(\"Request body:\", req.body);\n      console.error(\"Validation error details:\", error);\n      res.status(500).json({ message: \"Failed to create quote\" });\n    }\n  });\n\n  // Guest quote creation (no authentication required)\n  app.post('/api/quotes/guest', async (req: any, res) => {\n    try {\n      const { guestEmail, clientData, items, ...quoteBody } = req.body;\n      \n      // Create or find client\n      const client = await storage.createClient(clientData);\n      \n      // Create quote\n      const quoteData = insertQuoteSchema.parse({\n        ...quoteBody,\n        clientId: client.id,\n        isGuestQuote: true,\n        guestEmail,\n        createdById: null,\n        quoteNumber: `GUE-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`,\n      });\n      const quote = await storage.createQuote(quoteData);\n      \n      // Create quote items\n      for (const item of items) {\n        await storage.createQuoteItem({\n          ...item,\n          quoteId: quote.id,\n        });\n      }\n      \n      res.json(quote);\n    } catch (error) {\n      console.error(\"Error creating guest quote:\", error);\n      res.status(500).json({ message: \"Failed to create guest quote\" });\n    }\n  });\n\n  app.put('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const quote = await storage.getQuoteById(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n\n      const quoteData = insertQuoteSchema.partial().parse(req.body);\n      const updatedQuote = await storage.updateQuote(id, quoteData);\n      res.json(updatedQuote);\n    } catch (error) {\n      console.error(\"Error updating quote:\", error);\n      res.status(500).json({ message: \"Failed to update quote\" });\n    }\n  });\n\n  app.delete('/api/quotes/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const quote = await storage.getQuoteById(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n\n      await storage.deleteQuote(id);\n      res.json({ message: \"Quote deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting quote:\", error);\n      res.status(500).json({ message: \"Failed to delete quote\" });\n    }\n  });\n\n  app.get('/api/quotes/:id/print', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quote = await storage.getQuoteById(id);\n      \n      if (!quote) {\n        return res.status(404).json({ message: \"Quote not found\" });\n      }\n\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      // Fetch service items and additional equipment for each equipment in the quote\n      const quoteWithServiceItems = {\n        ...quote,\n        items: await Promise.all(quote.items.map(async (item) => {\n          const serviceItems = await storage.getEquipmentServiceItems(item.equipmentId);\n          \n          // Parse selected additional equipment and accessories from notes\n          let selectedAdditional: number[] = [];\n          let selectedAccessories: number[] = [];\n          let additionalEquipmentData: any[] = [];\n          let accessoriesData: any[] = [];\n          \n          try {\n            console.log(`Processing item ${item.equipmentId}, notes:`, item.notes);\n            \n            // Check if accessoriesCost > 0, then try to fetch all accessories for this equipment\n            if (parseFloat(item.accessoriesCost || \"0\") > 0) {\n              console.log(`Item has accessories cost: ${item.accessoriesCost}, fetching all accessories for equipment ${item.equipmentId}`);\n              \n              // If notes contain selection data, use it\n              if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n                const notesData = JSON.parse(item.notes);\n                selectedAdditional = notesData.selectedAdditional || [];\n                selectedAccessories = notesData.selectedAccessories || [];\n                console.log('Found selected accessories in notes:', selectedAccessories);\n              } else {\n                // Fallback: get all accessories for this equipment since cost > 0\n                console.log('No selection data in notes, fetching all accessories');\n                const allAccessories = await db.select().from(equipmentAdditional)\n                  .where(and(\n                    eq(equipmentAdditional.equipmentId, item.equipmentId),\n                    eq(equipmentAdditional.type, 'accessories')\n                  ));\n                accessoriesData = allAccessories;\n                console.log('Found accessories (fallback):', accessoriesData.length);\n              }\n              \n              // Fetch additional equipment details\n              if (selectedAdditional.length > 0) {\n                additionalEquipmentData = await db.select().from(equipmentAdditional)\n                  .where(and(\n                    eq(equipmentAdditional.equipmentId, item.equipmentId),\n                    eq(equipmentAdditional.type, 'additional'),\n                    inArray(equipmentAdditional.id, selectedAdditional)\n                  ));\n              }\n              \n              // Fetch specific accessories details if we have selection (only if not already fetched by fallback)\n              if (selectedAccessories.length > 0 && accessoriesData.length === 0) {\n                accessoriesData = await db.select().from(equipmentAdditional)\n                  .where(and(\n                    eq(equipmentAdditional.equipmentId, item.equipmentId),\n                    eq(equipmentAdditional.type, 'accessories'),\n                    inArray(equipmentAdditional.id, selectedAccessories)\n                  ));\n                console.log('Found specific accessories from selection:', accessoriesData.length);\n              }\n            }\n          } catch (e) {\n            console.error('Error parsing notes for additional equipment:', e);\n          }\n          \n          return {\n            ...item,\n            serviceItems: serviceItems || [],\n            additionalEquipmentData,\n            accessoriesData\n          };\n        }))\n      };\n\n      // Generate HTML content for the quote\n      console.log(\"Quote data for print:\", {\n        id: quote.id,\n        itemsCount: quote.items?.length || 0,\n        items: quoteWithServiceItems.items.map((item: any) => ({\n          notes: item.notes,\n          additionalEquipmentData: item.additionalEquipmentData?.length || 0,\n          accessoriesData: item.accessoriesData?.length || 0,\n          hasAdditionalCosts: parseFloat(item.additionalCost || 0) > 0,\n          hasAccessoriesCosts: parseFloat(item.accessoriesCost || \"0\") > 0\n        }))\n      });\n      \n      const htmlContent = generateQuoteHTML(quoteWithServiceItems);\n      \n      res.setHeader('Content-Type', 'text/html');\n      res.send(htmlContent);\n    } catch (error) {\n      console.error(\"Error generating print view:\", error);\n      res.status(500).json({ message: \"Failed to generate print view\" });\n    }\n  });\n\n  // Quote Items - accessible to admin and employee roles, or guest in development\n  app.post('/api/quote-items', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const itemData = insertQuoteItemSchema.parse(req.body);\n      const item = await storage.createQuoteItem(itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error creating quote item:\", error);\n      console.error(\"Request body:\", req.body);\n      console.error(\"Validation error details:\", error);\n      res.status(500).json({ message: \"Failed to create quote item\" });\n    }\n  });\n\n  app.put('/api/quote-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const itemData = insertQuoteItemSchema.partial().parse(req.body);\n      const item = await storage.updateQuoteItem(id, itemData);\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating quote item:\", error);\n      res.status(500).json({ message: \"Failed to update quote item\" });\n    }\n  });\n\n  app.delete('/api/quote-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin' && user?.role !== 'employee') {\n        return res.status(403).json({ message: \"Access denied. Admin or employee role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteQuoteItem(id);\n      res.json({ message: \"Quote item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting quote item:\", error);\n      res.status(500).json({ message: \"Failed to delete quote item\" });\n    }\n  });\n\n\n\n  // Pricing schemas routes\n  app.get('/api/pricing-schemas', isAuthenticated, async (req, res) => {\n    try {\n      const schemas = await storage.getPricingSchemas();\n      res.json(schemas);\n    } catch (error) {\n      console.error(\"Error fetching pricing schemas:\", error);\n      res.status(500).json({ message: \"Failed to fetch pricing schemas\" });\n    }\n  });\n\n  app.get('/api/pricing-schemas/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const schema = await storage.getPricingSchemaById(parseInt(id));\n      if (!schema) {\n        return res.status(404).json({ message: \"Pricing schema not found\" });\n      }\n      res.json(schema);\n    } catch (error) {\n      console.error(\"Error fetching pricing schema:\", error);\n      res.status(500).json({ message: \"Failed to fetch pricing schema\" });\n    }\n  });\n\n  app.post('/api/pricing-schemas', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertPricingSchemaSchema.parse(req.body);\n      const schema = await storage.createPricingSchema(validatedData);\n      res.status(201).json(schema);\n    } catch (error) {\n      console.error(\"Error creating pricing schema:\", error);\n      res.status(500).json({ message: \"Failed to create pricing schema\" });\n    }\n  });\n\n  app.patch('/api/pricing-schemas/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { id } = req.params;\n      const validatedData = insertPricingSchemaSchema.partial().parse(req.body);\n      const schema = await storage.updatePricingSchema(parseInt(id), validatedData);\n      res.json(schema);\n    } catch (error) {\n      console.error(\"Error updating pricing schema:\", error);\n      res.status(500).json({ message: \"Failed to update pricing schema\" });\n    }\n  });\n\n  app.delete('/api/pricing-schemas/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.claims.sub);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { id } = req.params;\n      await storage.deletePricingSchema(parseInt(id));\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting pricing schema:\", error);\n      res.status(500).json({ message: \"Failed to delete pricing schema\" });\n    }\n  });\n\n  // Equipment service costs endpoints\n  app.get('/api/equipment/:id/service-costs', isAuthenticated, async (req, res) => {\n    try {\n      const equipmentId = parseInt(req.params.id);\n      const serviceCosts = await storage.getEquipmentServiceCosts(equipmentId);\n      res.json(serviceCosts || null);\n    } catch (error) {\n      console.error(\"Error fetching equipment service costs:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment service costs\" });\n    }\n  });\n\n  app.post('/api/equipment/:id/service-costs', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const equipmentId = parseInt(req.params.id);\n      const serviceCostsData = insertEquipmentServiceCostsSchema.parse({\n        ...req.body,\n        equipmentId\n      });\n      const serviceCosts = await storage.upsertEquipmentServiceCosts(serviceCostsData);\n      res.json(serviceCosts);\n    } catch (error) {\n      console.error(\"Error upserting equipment service costs:\", error);\n      res.status(500).json({ message: \"Failed to upsert equipment service costs\" });\n    }\n  });\n\n  // Equipment service items endpoints\n  app.get('/api/equipment/:id/service-items', isAuthenticated, async (req, res) => {\n    try {\n      const equipmentId = parseInt(req.params.id);\n      \n      // Auto-sync service work hours with admin configuration before returning data\n      await storage.syncServiceWorkHours(equipmentId);\n      \n      const serviceItems = await storage.getEquipmentServiceItems(equipmentId);\n      res.json(serviceItems);\n    } catch (error) {\n      console.error(\"Error fetching equipment service items:\", error);\n      res.status(500).json({ message: \"Failed to fetch equipment service items\" });\n    }\n  });\n\n  app.post('/api/equipment/:id/service-items', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const equipmentId = parseInt(req.params.id);\n      const serviceItemData = insertEquipmentServiceItemsSchema.parse({\n        ...req.body,\n        equipmentId\n      });\n      const serviceItem = await storage.createEquipmentServiceItem(serviceItemData);\n      res.json(serviceItem);\n    } catch (error) {\n      console.error(\"Error creating equipment service item:\", error);\n      res.status(500).json({ message: \"Failed to create equipment service item\" });\n    }\n  });\n\n  app.patch('/api/equipment-service-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const serviceItemData = insertEquipmentServiceItemsSchema.partial().parse(req.body);\n      const serviceItem = await storage.updateEquipmentServiceItem(id, serviceItemData);\n      res.json(serviceItem);\n    } catch (error) {\n      console.error(\"Error updating equipment service item:\", error);\n      res.status(500).json({ message: \"Failed to update equipment service item\" });\n    }\n  });\n\n  app.delete('/api/equipment-service-items/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteEquipmentServiceItem(id);\n      res.json({ message: \"Equipment service item deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting equipment service item:\", error);\n      res.status(500).json({ message: \"Failed to delete equipment service item\" });\n    }\n  });\n\n  // API endpoint to sync all equipment with admin settings\n  app.post('/api/admin/sync-all-equipment', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      await storage.syncAllEquipmentWithAdminSettings();\n      res.json({ message: \"Wszystkie urządzenia zostały zsynchronizowane z ustawieniami panelu admina\" });\n    } catch (error) {\n      console.error(\"Error syncing equipment:\", error);\n      res.status(500).json({ message: \"Failed to sync equipment\" });\n    }\n  });\n\n  // === NEEDS ASSESSMENT API ENDPOINTS ===\n  \n  // Get all needs assessment questions (for the form)\n  app.get('/api/needs-assessment/questions', isAuthenticated, async (req: any, res) => {\n    try {\n      const questions = await db.select()\n        .from(needsAssessmentQuestions)\n        .where(eq(needsAssessmentQuestions.isActive, true))\n        .orderBy(asc(needsAssessmentQuestions.category), asc(needsAssessmentQuestions.position));\n      \n      res.json(questions);\n    } catch (error) {\n      console.error(\"Error fetching needs assessment questions:\", error);\n      res.status(500).json({ message: \"Failed to fetch questions\" });\n    }\n  });\n\n  // Save needs assessment response\n  app.post('/api/needs-assessment/responses', isAuthenticated, async (req: any, res) => {\n    try {\n      const validatedData = insertNeedsAssessmentResponseSchema.parse(req.body);\n      \n      // Generate response number with sequential number and date format: 01/08.2025\n      const today = new Date();\n      const dateStr = `${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;\n      \n      // Get the count of responses created today (using DATE() function for proper daily counting)\n      const todayResponses = await db.select({ count: sql<number>`count(*)` })\n        .from(needsAssessmentResponses)\n        .where(sql`DATE(${needsAssessmentResponses.createdAt}) = DATE(NOW())`);\n      \n      const sequentialNumber = (todayResponses[0]?.count || 0) + 1;\n      const responseNumber = `${String(sequentialNumber).padStart(2, '0')}/${dateStr}`;\n      \n      const [response] = await db.insert(needsAssessmentResponses).values({\n        ...validatedData,\n        responseNumber,\n        userId: req.user.claims.sub,\n      }).returning();\n      \n      res.json(response);\n    } catch (error) {\n      console.error(\"Error saving needs assessment response:\", error);\n      res.status(500).json({ message: \"Failed to save response\" });\n    }\n  });\n\n  // Get all needs assessment responses (for all authenticated users)\n  app.get('/api/needs-assessment/responses', isAuthenticated, async (req: any, res) => {\n    try {\n      const responses = await db.select()\n        .from(needsAssessmentResponses)\n        .orderBy(desc(needsAssessmentResponses.createdAt));\n      \n      res.json(responses);\n    } catch (error) {\n      console.error(\"Error fetching needs assessment responses:\", error);\n      res.status(500).json({ message: \"Failed to fetch responses\" });\n    }\n  });\n\n  app.get('/api/needs-assessment/responses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      const response = await db.select()\n        .from(needsAssessmentResponses)\n        .where(eq(needsAssessmentResponses.id, id))\n        .limit(1);\n        \n      if (response.length === 0) {\n        return res.status(404).json({ message: \"Response not found\" });\n      }\n      \n      res.json(response[0]);\n    } catch (error) {\n      console.error(\"Error fetching needs assessment response:\", error);\n      res.status(500).json({ message: \"Failed to fetch response\" });\n    }\n  });\n\n  // Create new needs assessment question (admin only)\n  app.post('/api/needs-assessment/questions', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertNeedsAssessmentQuestionSchema.parse(req.body);\n      const [question] = await db.insert(needsAssessmentQuestions).values(validatedData).returning();\n      res.json(question);\n    } catch (error) {\n      console.error(\"Error creating needs assessment question:\", error);\n      res.status(500).json({ message: \"Failed to create question\" });\n    }\n  });\n\n  // Update needs assessment question (admin only)\n  app.patch('/api/needs-assessment/questions/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const questionId = parseInt(req.params.id);\n      const updateData = req.body;\n      \n      const [question] = await db.update(needsAssessmentQuestions)\n        .set(updateData)\n        .where(eq(needsAssessmentQuestions.id, questionId))\n        .returning();\n      \n      if (!question) {\n        return res.status(404).json({ message: \"Question not found\" });\n      }\n      \n      res.json(question);\n    } catch (error) {\n      console.error(\"Error updating needs assessment question:\", error);\n      res.status(500).json({ message: \"Failed to update question\" });\n    }\n  });\n\n  // Delete needs assessment question (admin only)\n  app.delete('/api/needs-assessment/questions/:id', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const questionId = parseInt(req.params.id);\n      \n      await db.delete(needsAssessmentQuestions)\n        .where(eq(needsAssessmentQuestions.id, questionId));\n      \n      res.json({ message: \"Question deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting needs assessment question:\", error);\n      res.status(500).json({ message: \"Failed to delete question\" });\n    }\n  });\n\n  // Delete entire category (all questions in that category)\n  app.delete('/api/needs-assessment/categories/:categoryName', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const categoryName = decodeURIComponent(req.params.categoryName);\n      \n      await db.delete(needsAssessmentQuestions)\n        .where(eq(needsAssessmentQuestions.category, categoryName));\n      \n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting needs assessment category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Print needs assessment response\n  app.get('/api/needs-assessment/responses/:id/print', isAuthenticated, async (req: any, res) => {\n    try {\n      const responseId = parseInt(req.params.id);\n      \n      // Get the response\n      const response = await db.select()\n        .from(needsAssessmentResponses)\n        .where(eq(needsAssessmentResponses.id, responseId))\n        .limit(1);\n      \n      if (!response || response.length === 0) {\n        return res.status(404).json({ message: \"Needs assessment response not found\" });\n      }\n      \n      const assessmentResponse = response[0];\n      \n      // Get all questions to display proper labels\n      const questions = await db.select()\n        .from(needsAssessmentQuestions)\n        .orderBy(needsAssessmentQuestions.position);\n      \n      // Group questions by category\n      const questionsByCategory = questions.reduce((acc, question) => {\n        if (!acc[question.category]) {\n          acc[question.category] = [];\n        }\n        acc[question.category].push(question);\n        return acc;\n      }, {} as Record<string, any[]>);\n      \n      // Generate HTML for print\n      const printHtml = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <title>Badanie Potrzeb #${assessmentResponse.responseNumber}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }\n            .company-name { font-size: 18px; font-weight: bold; color: #0066cc; }\n            .title { font-size: 24px; font-weight: bold; margin: 10px 0; }\n            .client-info { background: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 30px; }\n            .category { margin-bottom: 30px; }\n            .category-title { font-size: 18px; font-weight: bold; color: #333; border-bottom: 1px solid #ccc; padding-bottom: 5px; margin-bottom: 15px; }\n            .question-item { margin-bottom: 15px; padding: 10px; border-left: 3px solid #0066cc; background: #f9f9f9; }\n            .question { font-weight: bold; margin-bottom: 5px; }\n            .answer { color: #555; }\n            .footer { margin-top: 40px; text-align: center; font-size: 12px; color: #666; }\n            @media print {\n              body { -webkit-print-color-adjust: exact; }\n              .no-print { display: none; }\n            }\n            .print-button { position: fixed; top: 20px; right: 20px; z-index: 1000; background: #0066cc; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }\n            .print-button:hover { background: #0052a3; }\n          </style>\n        </head>\n        <body>\n          <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ Drukuj</button>\n          \n          <div class=\"header\">\n            <div class=\"company-name\">Sebastian Popiel :: PPP :: Program</div>\n            <div class=\"title\">Badanie Potrzeb</div>\n            <div>Nr: ${assessmentResponse.responseNumber}</div>\n            <div>Data utworzenia: ${assessmentResponse.createdAt ? new Date(assessmentResponse.createdAt).toLocaleDateString('pl-PL') : 'Nieznana'}</div>\n          </div>\n          \n          ${assessmentResponse.clientCompanyName ? `\n          <div class=\"client-info\">\n            <h3>Informacje o kliencie</h3>\n            ${assessmentResponse.clientCompanyName ? `<p><strong>Firma:</strong> ${assessmentResponse.clientCompanyName}</p>` : ''}\n            ${assessmentResponse.clientContactPerson ? `<p><strong>Osoba kontaktowa:</strong> ${assessmentResponse.clientContactPerson}</p>` : ''}\n            ${assessmentResponse.clientPhone ? `<p><strong>Telefon:</strong> ${assessmentResponse.clientPhone}</p>` : ''}\n            ${assessmentResponse.clientEmail ? `<p><strong>Email:</strong> ${assessmentResponse.clientEmail}</p>` : ''}\n            ${assessmentResponse.clientAddress ? `<p><strong>Adres:</strong> ${assessmentResponse.clientAddress}</p>` : ''}\n          </div>\n          ` : ''}\n          \n          ${Object.entries(questionsByCategory).map(([category, categoryQuestions]) => {\n            const responses = assessmentResponse.responses as Record<string, string> || {};\n            const hasAnswers = categoryQuestions.some(q => responses[q.id.toString()]);\n            if (!hasAnswers) return '';\n            \n            return `\n              <div class=\"category\">\n                <div class=\"category-title\">${category}</div>\n                ${categoryQuestions.map(question => {\n                  const answer = responses[question.id.toString()];\n                  if (!answer || !answer.trim()) return '';\n                  \n                  return `\n                    <div class=\"question-item\">\n                      <div class=\"question\">${question.question}</div>\n                      <div class=\"answer\">${answer}</div>\n                    </div>\n                  `;\n                }).join('')}\n              </div>\n            `;\n          }).join('')}\n          \n          <div class=\"footer\">\n            <p>PPP :: Program - Wynajem sprzętu</p>\n            <p>Wygenerowano: ${new Date().toLocaleString('pl-PL')}</p>\n          </div>\n        </body>\n        </html>\n      `;\n      \n      res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.send(printHtml);\n    } catch (error) {\n      console.error(\"Error generating needs assessment print view:\", error);\n      res.status(500).json({ message: \"Failed to generate print view\" });\n    }\n  });\n\n  // Delete needs assessment response (admin only)\n  app.delete('/api/needs-assessment/responses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Admin role required.\" });\n      }\n\n      const id = parseInt(req.params.id);\n      \n      const result = await db.delete(needsAssessmentResponses)\n        .where(eq(needsAssessmentResponses.id, id))\n        .returning();\n        \n      if (result.length === 0) {\n        return res.status(404).json({ message: \"Response not found\" });\n      }\n      \n      res.json({ message: \"Badanie potrzeb zostało usunięte\" });\n    } catch (error) {\n      console.error(\"Error deleting needs assessment response:\", error);\n      res.status(500).json({ message: \"Failed to delete response\" });\n    }\n  });\n\n  // API Key management endpoints (admin only)\n  app.get('/api/admin/api-keys', isAuthenticated, requireAdmin, async (req, res) => {\n    try {\n      const keys = await db.select()\n        .from(apiKeys)\n        .orderBy(desc(apiKeys.createdAt));\n      \n      // Return full key values - masking will be handled on frontend\n      res.json(keys);\n    } catch (error) {\n      console.error(\"Error fetching API keys:\", error);\n      res.status(500).json({ message: \"Failed to fetch API keys\" });\n    }\n  });\n\n  app.post('/api/admin/api-keys', isAuthenticated, requireAdmin, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      const keyData = insertApiKeySchema.parse({\n        ...req.body,\n        createdById: user?.id,\n        keyValue: `ppp_${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`\n      });\n      \n      const newKey = await db.insert(apiKeys)\n        .values(keyData)\n        .returning();\n      \n      res.status(201).json(newKey[0]);\n    } catch (error) {\n      console.error(\"Error creating API key:\", error);\n      res.status(500).json({ message: \"Failed to create API key\" });\n    }\n  });\n\n  app.delete('/api/admin/api-keys/:id', isAuthenticated, requireAdmin, async (req, res) => {\n    try {\n      const keyId = parseInt(req.params.id);\n      \n      const deletedKey = await db.delete(apiKeys)\n        .where(eq(apiKeys.id, keyId))\n        .returning();\n      \n      if (deletedKey.length === 0) {\n        return res.status(404).json({ message: \"API key not found\" });\n      }\n      \n      res.json({ message: \"API key deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting API key:\", error);\n      res.status(500).json({ message: \"Failed to delete API key\" });\n    }\n  });\n\n  app.patch('/api/admin/api-keys/:id', isAuthenticated, requireAdmin, async (req, res) => {\n    try {\n      const keyId = parseInt(req.params.id);\n      const { isActive } = req.body;\n      \n      const updatedKey = await db.update(apiKeys)\n        .set({ isActive })\n        .where(eq(apiKeys.id, keyId))\n        .returning();\n      \n      if (updatedKey.length === 0) {\n        return res.status(404).json({ message: \"API key not found\" });\n      }\n      \n      res.json(updatedKey[0]);\n    } catch (error) {\n      console.error(\"Error updating API key:\", error);\n      res.status(500).json({ message: \"Failed to update API key\" });\n    }\n  });\n\n  // Public API endpoints for external integration\n  \n  // Get available equipment for external quote creation\n  app.get('/api/public/equipment', requireApiKey(['quotes:create']), async (req, res) => {\n    try {\n      const equipmentList = await db.select({\n        id: equipment.id,\n        name: equipment.name,\n        categoryId: equipment.categoryId,\n        category: equipmentCategories.name,\n        description: equipment.description,\n        model: equipment.model,\n        power: equipment.power,\n        availableQuantity: equipment.availableQuantity,\n        isActive: equipment.isActive\n      })\n      .from(equipment)\n      .innerJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .where(and(\n        eq(equipment.isActive, true),\n        sql`${equipment.availableQuantity} > 0`\n      ))\n      .orderBy(equipmentCategories.name, equipment.name);\n\n      // Get pricing for each equipment\n      const equipmentWithPricing = await Promise.all(\n        equipmentList.map(async (item) => {\n          const pricing = await db.select()\n            .from(equipmentPricing)\n            .where(eq(equipmentPricing.equipmentId, item.id))\n            .orderBy(equipmentPricing.periodStart);\n\n          return {\n            ...item,\n            pricing\n          };\n        })\n      );\n\n      res.json(equipmentWithPricing);\n    } catch (error) {\n      console.error(\"Error fetching public equipment list:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch equipment\", \n        message: \"Unable to retrieve equipment list\" \n      });\n    }\n  });\n\n  // Create quote via public API\n  app.post('/api/public/quotes', requireApiKey(['quotes:create']), async (req: any, res) => {\n    try {\n      const quoteData = publicQuoteSchema.parse(req.body);\n      \n      // Create or find client\n      let client = await db.select()\n        .from(clients)\n        .where(eq(clients.companyName, quoteData.clientCompanyName))\n        .limit(1);\n\n      if (client.length === 0) {\n        const newClient = await db.insert(clients)\n          .values({\n            companyName: quoteData.clientCompanyName,\n            contactPerson: quoteData.clientContactPerson,\n            phone: quoteData.clientPhone,\n            email: quoteData.clientEmail,\n            address: quoteData.clientAddress,\n          })\n          .returning();\n        client = newClient;\n      }\n\n      // Generate quote number\n      const today = new Date();\n      const dateStr = `${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;\n      \n      const startOfDay = new Date(today);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(today);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      const todayQuotes = await db.select({ count: sql<number>`count(*)` })\n        .from(quotes)\n        .where(and(\n          sql`${quotes.createdAt} >= ${startOfDay.toISOString()}`,\n          sql`${quotes.createdAt} <= ${endOfDay.toISOString()}`\n        ));\n      \n      const sequentialNumber = (todayQuotes[0]?.count || 0) + 1;\n      const quoteNumber = `${String(sequentialNumber).padStart(2, '0')}/${dateStr}`;\n\n      // Calculate pricing\n      let totalNet = 0;\n\n      // Create quote first\n      const newQuote = await db.insert(quotes)\n        .values({\n          quoteNumber,\n          clientId: client[0].id,\n          totalNet: \"0\",\n          totalGross: \"0\",\n          pricingSchemaId: 3, // Default pricing schema\n          createdById: null, // API created quote\n        })\n        .returning();\n\n      // Process equipment items\n      for (const item of quoteData.equipment) {\n        // Get pricing for rental period\n        const pricing = await db.select()\n          .from(equipmentPricing)\n          .where(and(\n            eq(equipmentPricing.equipmentId, item.equipmentId),\n            sql`${equipmentPricing.periodStart} <= ${item.rentalPeriod}`,\n            sql`(${equipmentPricing.periodEnd} IS NULL OR ${equipmentPricing.periodEnd} >= ${item.rentalPeriod})`\n          ))\n          .orderBy(desc(equipmentPricing.periodStart))\n          .limit(1);\n\n        if (pricing.length === 0) {\n          return res.status(400).json({ \n            error: \"No pricing available\", \n            message: `No pricing available for equipment ${item.equipmentId} for ${item.rentalPeriod} days` \n          });\n        }\n\n        const basePrice = parseFloat(pricing[0].pricePerDay.toString());\n        const discount = parseFloat(pricing[0].discountPercent.toString());\n        const discountedPrice = basePrice * (1 - discount / 100);\n        const itemTotal = discountedPrice * item.quantity * item.rentalPeriod;\n        \n        totalNet += itemTotal;\n        \n        // Create quote item\n        await db.insert(quoteItems)\n          .values({\n            quoteId: newQuote[0].id,\n            equipmentId: item.equipmentId,\n            quantity: item.quantity,\n            rentalPeriodDays: item.rentalPeriod,\n            pricePerDay: basePrice.toString(),\n            discountPercent: discount.toString(),\n            totalPrice: itemTotal.toString()\n          });\n      }\n\n      const totalGross = totalNet * 1.23; // VAT 23%\n\n      // Update quote totals\n      await db.update(quotes)\n        .set({\n          totalNet: totalNet.toString(),\n          totalGross: totalGross.toString()\n        })\n        .where(eq(quotes.id, newQuote[0].id));\n\n      res.status(201).json({\n        quote: { ...newQuote[0], totalNet: totalNet.toString(), totalGross: totalGross.toString() },\n        message: \"Quote created successfully\"\n      });\n      \n    } catch (error) {\n      console.error(\"Error creating public quote:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: \"Validation error\", \n          message: \"Invalid request data\",\n          details: error.errors \n        });\n      }\n      res.status(500).json({ \n        error: \"Failed to create quote\", \n        message: \"Unable to process quote request\" \n      });\n    }\n  });\n\n  // Get needs assessment questions for external form\n  app.get('/api/public/needs-assessment/questions', requireApiKey(['assessments:create']), async (req, res) => {\n    try {\n      const questions = await db.select()\n        .from(needsAssessmentQuestions)\n        .where(eq(needsAssessmentQuestions.isActive, true))\n        .orderBy(needsAssessmentQuestions.category, needsAssessmentQuestions.position);\n\n      // Group by category\n      const questionsByCategory = questions.reduce((acc, question) => {\n        if (!acc[question.category]) {\n          acc[question.category] = [];\n        }\n        acc[question.category].push(question);\n        return acc;\n      }, {} as Record<string, any[]>);\n\n      res.json({\n        questions: questionsByCategory,\n        categories: Object.keys(questionsByCategory)\n      });\n    } catch (error) {\n      console.error(\"Error fetching public assessment questions:\", error);\n      res.status(500).json({ \n        error: \"Failed to fetch questions\", \n        message: \"Unable to retrieve assessment questions\" \n      });\n    }\n  });\n\n  // Create needs assessment via public API\n  app.post('/api/public/needs-assessment', requireApiKey(['assessments:create']), async (req: any, res) => {\n    try {\n      const assessmentData = publicAssessmentSchema.parse(req.body);\n      \n      // Generate response number\n      const today = new Date();\n      const dateStr = `${String(today.getMonth() + 1).padStart(2, '0')}.${today.getFullYear()}`;\n      \n      // Get the count of responses created today (using DATE() function for proper daily counting)\n      const todayResponses = await db.select({ count: sql<number>`count(*)` })\n        .from(needsAssessmentResponses)\n        .where(sql`DATE(${needsAssessmentResponses.createdAt}) = DATE(NOW())`);\n      \n      const sequentialNumber = (todayResponses[0]?.count || 0) + 1;\n      const responseNumber = `${String(sequentialNumber).padStart(2, '0')}/${dateStr}`;\n\n      const newResponse = await db.insert(needsAssessmentResponses)\n        .values({\n          responseNumber,\n          clientCompanyName: assessmentData.clientCompanyName,\n          clientContactPerson: assessmentData.clientContactPerson,\n          clientPhone: assessmentData.clientPhone,\n          clientEmail: assessmentData.clientEmail,\n          clientAddress: assessmentData.clientAddress,\n          responses: assessmentData.responses,\n          userId: null, // API created assessment\n        })\n        .returning();\n\n      res.status(201).json({\n        assessment: newResponse[0],\n        message: \"Needs assessment created successfully\"\n      });\n      \n    } catch (error) {\n      console.error(\"Error creating public assessment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          error: \"Validation error\", \n          message: \"Invalid request data\",\n          details: error.errors \n        });\n      }\n      res.status(500).json({ \n        error: \"Failed to create assessment\", \n        message: \"Unable to process assessment request\" \n      });\n    }\n  });\n\n  // API documentation endpoint\n  app.get('/api/public/docs', (req, res) => {\n    res.json({\n      title: \"PPP :: Program Equipment Rental API\",\n      version: \"1.0.0\",\n      description: \"Public API for creating equipment rental quotes and needs assessments\",\n      authentication: {\n        type: \"API Key\",\n        headerName: \"X-API-Key\",\n        alternativeHeader: \"Authorization: Bearer {api_key}\"\n      },\n      endpoints: {\n        \"GET /api/public/equipment\": {\n          description: \"Get available equipment with pricing\",\n          permission: \"quotes:create\"\n        },\n        \"POST /api/public/quotes\": {\n          description: \"Create a new equipment rental quote\",\n          permission: \"quotes:create\"\n        },\n        \"GET /api/public/needs-assessment/questions\": {\n          description: \"Get needs assessment questions grouped by category\",\n          permission: \"assessments:create\"\n        },\n        \"POST /api/public/needs-assessment\": {\n          description: \"Submit a needs assessment response\",\n          permission: \"assessments:create\"\n        }\n      }\n    });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction generateQuoteHTML(quote: any) {\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    if (isNaN(numAmount)) return \"0,00 zł\";\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(numAmount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const getRentalPeriodText = (days: number) => {\n    if (days === 1) return \"1 dzień\";\n    if (days < 5) return `${days} dni`;\n    return `${days} dni`;\n  };\n\n  const itemsHTML = quote.items.map((item: any) => {\n    const detailsRows = [];\n    \n    // Podstawowa linia sprzętu\n    detailsRows.push(`\n      <tr>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; font-weight: bold;\">${item.equipment.name}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: center;\">${item.quantity}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: center;\">${getRentalPeriodText(item.rentalPeriodDays)}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: right;\">${formatCurrency(item.pricePerDay)}</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: center;\">${item.discountPercent}%</td>\n        <td style=\"padding: 10px; border-bottom: 1px solid #ddd; text-align: right; font-weight: bold;\">${formatCurrency(item.totalPrice)}</td>\n      </tr>\n    `);\n\n    // Opcja: Koszt paliwa\n    if (item.includeFuelCost && parseFloat(item.totalFuelCost || 0) > 0) {\n      let fuelDetails = '';\n      if (item.calculationType === 'kilometers') {\n        // Pojazdy - kalkulacja kilometrowa\n        const totalKm = item.kilometersPerDay * item.rentalPeriodDays;\n        const totalFuelConsumption = (totalKm / 100) * parseFloat(item.fuelConsumptionPer100km);\n        fuelDetails = `\n          • Zużycie: ${item.fuelConsumptionPer100km} l/100km<br>\n          • Kilometry dziennie: ${item.kilometersPerDay} km<br>\n          • Całkowite kilometry: ${totalKm} km<br>\n          • Całkowite zużycie: ${totalFuelConsumption.toFixed(1)} l<br>\n          • Cena paliwa: ${formatCurrency(item.fuelPricePerLiter)}/l\n        `;\n      } else {\n        // Tradycyjne urządzenia - kalkulacja motogodzinowa\n        const totalFuelConsumption = parseFloat(item.fuelConsumptionLH) * item.hoursPerDay * item.rentalPeriodDays;\n        fuelDetails = `\n          • Zużycie: ${item.fuelConsumptionLH} l/h<br>\n          • Godziny pracy dziennie: ${item.hoursPerDay} h<br>\n          • Całkowite zużycie: ${totalFuelConsumption.toFixed(1)} l<br>\n          • Cena paliwa: ${formatCurrency(item.fuelPricePerLiter)}/l\n        `;\n      }\n      \n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #f8f9ff; font-size: 0.9em;\">\n            <strong>🛢️ Uwzględniono koszt paliwa:</strong> ${formatCurrency(item.totalFuelCost)}<br>\n            ${fuelDetails}\n          </td>\n        </tr>\n      `);\n    }\n\n    // Opcja: Koszt montażu - pokazuj gdy flaga jest zaznaczona\n    if (item.includeInstallationCost) {\n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #f0fff8; font-size: 0.9em;\">\n            <strong>🔧 Uwzględniono koszt montażu:</strong> ${formatCurrency(item.totalInstallationCost || 0)}<br>\n            • Dystans (tam i z powrotem): ${item.installationDistanceKm || 0} km<br>\n            • Liczba techników: ${item.numberOfTechnicians || 1}<br>\n            • Stawka za technika: ${formatCurrency(item.serviceRatePerTechnician || 150)}<br>\n            • Stawka za km: ${formatCurrency(item.travelRatePerKm || 1.15)}/km\n          </td>\n        </tr>\n      `);\n    }\n\n    // Opcja: Koszt demontażu - pokazuj gdy flaga jest zaznaczona\n    if (item.includeDisassemblyCost) {\n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #fff8f0; font-size: 0.9em;\">\n            <strong>🔨 Uwzględniono koszt demontażu:</strong> ${formatCurrency(item.totalDisassemblyCost || 0)}<br>\n            • Dystans (tam i z powrotem): ${item.disassemblyDistanceKm || 0} km<br>\n            • Liczba techników: ${item.disassemblyNumberOfTechnicians || 1}<br>\n            • Stawka za technika: ${formatCurrency(item.disassemblyServiceRatePerTechnician || 150)}<br>\n            • Stawka za km: ${formatCurrency(item.disassemblyTravelRatePerKm || 1.15)}/km\n          </td>\n        </tr>\n      `);\n    }\n\n    // Opcja: Koszt dojazdu / serwis - pokazuj gdy flaga jest zaznaczona\n    if (item.includeTravelServiceCost) {\n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #f8fff0; font-size: 0.9em;\">\n            <strong>🚚 Uwzględniono koszt dojazdu / serwis:</strong> ${formatCurrency(item.totalTravelServiceCost || 0)}<br>\n            • Dystans (tam i z powrotem): ${item.travelServiceDistanceKm || 0} km<br>\n            • Liczba techników: ${item.travelServiceNumberOfTechnicians || 1}<br>\n            • Stawka za technika: ${formatCurrency(item.travelServiceServiceRatePerTechnician || 150)}<br>\n            • Stawka za km: ${formatCurrency(item.travelServiceTravelRatePerKm || 1.15)}/km<br>\n            • Ilość wyjazdów: ${item.travelServiceNumberOfTrips || 1}\n          </td>\n        </tr>\n      `);\n    }\n\n    // Opcja: Koszty serwisowe (pozycje serwisowe) - pokazuj gdy flaga jest zaznaczona\n    if (item.includeServiceItems) {\n      let serviceItemsHTML = '';\n      \n      // Pobierz rzeczywiste nazwy usług z bazy danych\n      if (item.serviceItems && item.serviceItems.length > 0) {\n        if (parseFloat(item.serviceItem1Cost || 0) > 0 && item.serviceItems[0]) {\n          serviceItemsHTML += `• ${item.serviceItems[0].itemName}: ${formatCurrency(item.serviceItem1Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem2Cost || 0) > 0 && item.serviceItems[1]) {\n          serviceItemsHTML += `• ${item.serviceItems[1].itemName}: ${formatCurrency(item.serviceItem2Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem3Cost || 0) > 0 && item.serviceItems[2]) {\n          serviceItemsHTML += `• ${item.serviceItems[2].itemName}: ${formatCurrency(item.serviceItem3Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem4Cost || 0) > 0 && item.serviceItems[3]) {\n          serviceItemsHTML += `• ${item.serviceItems[3].itemName}: ${formatCurrency(item.serviceItem4Cost)}<br>`;\n        }\n      } else {\n        // Fallback nazwy\n        if (parseFloat(item.serviceItem1Cost || 0) > 0) {\n          serviceItemsHTML += `• Pozycja serwisowa 1: ${formatCurrency(item.serviceItem1Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem2Cost || 0) > 0) {\n          serviceItemsHTML += `• Pozycja serwisowa 2: ${formatCurrency(item.serviceItem2Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem3Cost || 0) > 0) {\n          serviceItemsHTML += `• Pozycja serwisowa 3: ${formatCurrency(item.serviceItem3Cost)}<br>`;\n        }\n        if (parseFloat(item.serviceItem4Cost || 0) > 0) {\n          serviceItemsHTML += `• Pozycja serwisowa 4: ${formatCurrency(item.serviceItem4Cost)}<br>`;\n        }\n      }\n      \n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #fff0f8; font-size: 0.9em;\">\n            <strong>🛠️ Uwzględniono koszty serwisowe:</strong> ${formatCurrency(item.totalServiceItemsCost)}<br>\n            ${serviceItemsHTML}\n          </td>\n        </tr>\n      `);\n    }\n\n    // Opcja: Wyposażenie dodatkowe i akcesoria\n    const hasAdditionalCosts = parseFloat(item.additionalCost || 0) > 0;\n    const hasAccessoriesCosts = parseFloat(item.accessoriesCost || \"0\") > 0;\n    \n    if (hasAdditionalCosts || hasAccessoriesCosts) {\n      let additionalHTML = '';\n      \n      // Parse selected items from notes\n      let selectedAdditional = [];\n      let selectedAccessories = [];\n      \n      try {\n        if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n          const notesData = JSON.parse(item.notes);\n          selectedAdditional = notesData.selectedAdditional || [];\n          selectedAccessories = notesData.selectedAccessories || [];\n        }\n      } catch (e) {\n        console.error('Error parsing notes for additional equipment:', e);\n      }\n      \n      // Show detailed equipment and accessories using pre-fetched data\n      if (hasAdditionalCosts && item.additionalEquipmentData && item.additionalEquipmentData.length > 0) {\n        additionalHTML += `<strong>Wyposażenie dodatkowe:</strong><br>`;\n        \n        for (const additionalItem of item.additionalEquipmentData) {\n          const itemCost = parseFloat(additionalItem.price) * item.quantity;\n          additionalHTML += `&nbsp;&nbsp;• ${additionalItem.name}: ${formatCurrency(parseFloat(additionalItem.price))} × ${item.quantity} = ${formatCurrency(itemCost)}<br>`;\n        }\n        additionalHTML += `&nbsp;&nbsp;<strong>Suma wyposażenia dodatkowego: ${formatCurrency(parseFloat(item.additionalCost))}</strong><br><br>`;\n      } else if (hasAdditionalCosts) {\n        additionalHTML += `• Wyposażenie dodatkowe: ${formatCurrency(parseFloat(item.additionalCost))}<br>`;\n      }\n      \n      if (hasAccessoriesCosts && item.accessoriesData && item.accessoriesData.length > 0) {\n        additionalHTML += `<strong>Akcesoria:</strong><br>`;\n        \n        for (const accessoryItem of item.accessoriesData) {\n          const itemCost = parseFloat(accessoryItem.price) * item.quantity;\n          additionalHTML += `&nbsp;&nbsp;• ${accessoryItem.name}: ${formatCurrency(parseFloat(accessoryItem.price))} × ${item.quantity} = ${formatCurrency(itemCost)}<br>`;\n        }\n        additionalHTML += `&nbsp;&nbsp;<strong>Suma akcesoriów: ${formatCurrency(parseFloat(item.accessoriesCost))}</strong><br>`;\n      } else if (hasAccessoriesCosts) {\n        additionalHTML += `• Akcesoria: ${formatCurrency(parseFloat(item.accessoriesCost))}<br>`;\n      }\n      \n      const totalAdditionalCost = (parseFloat(item.additionalCost || \"0\") + parseFloat(item.accessoriesCost || \"0\"));\n      \n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #f0f8ff; font-size: 0.9em;\">\n            <strong>📦 Uwzględniono wyposażenie dodatkowe i akcesoria:</strong> ${formatCurrency(totalAdditionalCost)}<br>\n            ${additionalHTML}\n          </td>\n        </tr>\n      `);\n    }\n\n    // Uwagi użytkownika\n    let userNotes = \"\";\n    try {\n      if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n        const notesData = JSON.parse(item.notes);\n        userNotes = notesData.userNotes || \"\";\n      } else {\n        userNotes = item.notes || \"\";\n      }\n    } catch (e) {\n      userNotes = item.notes || \"\";\n    }\n    \n    if (userNotes.trim()) {\n      detailsRows.push(`\n        <tr>\n          <td colspan=\"6\" style=\"padding: 8px 15px; border-bottom: 1px solid #eee; background-color: #f5f5f5; font-size: 0.9em;\">\n            <strong>📝 Uwagi:</strong> ${userNotes}\n          </td>\n        </tr>\n      `);\n    }\n\n    return detailsRows.join('');\n  }).join('');\n\n  return `\n    <!DOCTYPE html>\n    <html lang=\"pl\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Wycena ${quote.quoteNumber}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }\n        .header { text-align: center; margin-bottom: 30px; }\n        .company-logo { font-size: 24px; font-weight: bold; color: #0066cc; }\n        .quote-title { font-size: 18px; margin-top: 10px; }\n        .quote-info { display: flex; justify-content: space-between; margin-bottom: 30px; }\n        .quote-info div { flex: 1; }\n        .quote-info h3 { margin: 0 0 10px 0; color: #0066cc; }\n        .quote-info p { margin: 5px 0; }\n        table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        th { background-color: #0066cc; color: white; padding: 12px; text-align: left; }\n        td { padding: 10px; border-bottom: 1px solid #ddd; }\n        .total-row { font-weight: bold; background-color: #f0f0f0; }\n        .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }\n        @media print {\n          body { -webkit-print-color-adjust: exact; }\n          .no-print { display: none; }\n        }\n        .print-button { position: fixed; top: 20px; right: 20px; z-index: 1000; background: #0066cc; color: white; border: none; padding: 10px 20px; border-radius: 5px; cursor: pointer; }\n        .print-button:hover { background: #0052a3; }\n      </style>\n    </head>\n    <body>\n      <button class=\"print-button no-print\" onclick=\"window.print()\">🖨️ Drukuj</button>\n      <div class=\"header\">\n        <div class=\"company-logo\">Sebastian Popiel :: PPP :: Program</div>\n        <div class=\"quote-title\">Wycena sprzętu</div>\n      </div>\n\n      <div class=\"quote-info\">\n        <div>\n          <h3>Dane klienta:</h3>\n          <p><strong>${quote.client.companyName}</strong></p>\n          ${quote.client.contactPerson ? `<p>Osoba kontaktowa: ${quote.client.contactPerson}</p>` : ''}\n          ${quote.client.email ? `<p>Email: ${quote.client.email}</p>` : ''}\n          ${quote.client.phone ? `<p>Telefon: ${quote.client.phone}</p>` : ''}\n          ${quote.client.address ? `<p>Adres: ${quote.client.address}</p>` : ''}\n          ${quote.client.nip ? `<p>NIP: ${quote.client.nip}</p>` : ''}\n        </div>\n        <div>\n          <h3>Dane wyceny:</h3>\n          <p><strong>Numer:</strong> ${quote.quoteNumber}</p>\n          <p><strong>Data utworzenia:</strong> ${formatDate(quote.createdAt)}</p>\n          <p><strong>Utworzył:</strong> ${quote.createdBy \n            ? (quote.createdBy.firstName && quote.createdBy.lastName \n                ? `${quote.createdBy.firstName} ${quote.createdBy.lastName}`\n                : quote.createdBy.email || 'Nieznany użytkownik')\n            : 'Wycena gościnna'}</p>\n        </div>\n      </div>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Nazwa sprzętu</th>\n            <th>Ilość</th>\n            <th>Okres wynajmu</th>\n            <th>Cena za dzień</th>\n            <th>Rabat</th>\n            <th>Wartość</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${itemsHTML}\n          <tr class=\"total-row\">\n            <td colspan=\"5\" style=\"text-align: right; padding: 15px;\">Wartość netto:</td>\n            <td style=\"text-align: right; padding: 15px;\">${formatCurrency(quote.totalNet)}</td>\n          </tr>\n          <tr class=\"total-row\">\n            <td colspan=\"5\" style=\"text-align: right; padding: 15px;\">Wartość brutto (VAT 23%):</td>\n            <td style=\"text-align: right; padding: 15px;\">${formatCurrency(quote.totalGross)}</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div class=\"footer\">\n        <p>Wycena wygenerowana: ${formatDate(new Date().toISOString())}</p>\n        <p>PPP :: Program - Wynajem sprzętu</p>\n      </div>\n    </body>\n    </html>\n  `;\n}\n\n\n","size_bytes":82927},"server/storage.ts":{"content":"import {\n  users,\n  equipment,\n  equipmentCategories,\n  equipmentPricing,\n  equipmentAdditional,\n  equipmentServiceCosts,\n  equipmentServiceItems,\n  clients,\n  quotes,\n  quoteItems,\n\n  pricingSchemas,\n\n  type User,\n  type UpsertUser,\n  type Equipment,\n  type EquipmentCategory,\n  type EquipmentPricing,\n  type EquipmentAdditional,\n  type InsertEquipmentAdditional,\n  type EquipmentWithCategory,\n  type EquipmentServiceCosts,\n  type EquipmentServiceItems,\n  type InsertEquipmentServiceCosts,\n  type InsertEquipmentServiceItems,\n  type Client,\n  type Quote,\n  type QuoteItem,\n  type QuoteWithDetails,\n  type InsertEquipmentCategory,\n  type InsertEquipment,\n  type InsertEquipmentPricing,\n  type InsertClient,\n  type InsertQuote,\n  type InsertQuoteItem,\n\n  type PricingSchema,\n  type InsertPricingSchema,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, like, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  getPendingUsers(): Promise<User[]>;\n  updateUserRole(id: string, role: string): Promise<User>;\n  approveUser(id: string, approvedById: string): Promise<User>;\n  rejectUser(id: string): Promise<void>;\n  toggleUserActive(id: string): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Equipment categories\n  getEquipmentCategories(): Promise<EquipmentCategory[]>;\n  createEquipmentCategory(category: InsertEquipmentCategory): Promise<EquipmentCategory>;\n  updateEquipmentCategory(id: number, category: Partial<InsertEquipmentCategory>): Promise<EquipmentCategory>;\n  deleteEquipmentCategory(id: number): Promise<void>;\n\n  // Equipment\n  getEquipment(): Promise<EquipmentWithCategory[]>;\n  getInactiveEquipment(): Promise<EquipmentWithCategory[]>;\n  getEquipmentById(id: number): Promise<EquipmentWithCategory | undefined>;\n  getEquipmentByCategory(categoryId: number): Promise<EquipmentWithCategory[]>;\n  createEquipment(equipment: InsertEquipment): Promise<Equipment>;\n  updateEquipment(id: number, equipment: Partial<InsertEquipment>): Promise<Equipment>;\n  deleteEquipment(id: number): Promise<void>;\n  permanentlyDeleteEquipment(id: number): Promise<void>;\n\n  // Equipment pricing\n  createEquipmentPricing(pricing: InsertEquipmentPricing): Promise<EquipmentPricing>;\n  updateEquipmentPricing(id: number, pricing: Partial<InsertEquipmentPricing>): Promise<EquipmentPricing>;\n  deleteEquipmentPricing(id: number): Promise<void>;\n\n  // Equipment additional and accessories\n  getEquipmentAdditional(equipmentId: number): Promise<EquipmentAdditional[]>;\n  createEquipmentAdditional(additional: InsertEquipmentAdditional): Promise<EquipmentAdditional>;\n  updateEquipmentAdditional(id: number, additional: Partial<InsertEquipmentAdditional>): Promise<EquipmentAdditional>;\n  deleteEquipmentAdditional(id: number): Promise<void>;\n\n  // Equipment service costs\n  getEquipmentServiceCosts(equipmentId: number): Promise<EquipmentServiceCosts | undefined>;\n  upsertEquipmentServiceCosts(serviceCosts: InsertEquipmentServiceCosts): Promise<EquipmentServiceCosts>;\n  \n  // Equipment service items\n  getEquipmentServiceItems(equipmentId: number): Promise<EquipmentServiceItems[]>;\n  createEquipmentServiceItem(serviceItem: InsertEquipmentServiceItems): Promise<EquipmentServiceItems>;\n  updateEquipmentServiceItem(id: number, serviceItem: Partial<InsertEquipmentServiceItems>): Promise<EquipmentServiceItems>;\n  deleteEquipmentServiceItem(id: number): Promise<void>;\n  syncServiceWorkHours(equipmentId: number): Promise<void>;\n\n  // Clients\n  getClients(): Promise<Client[]>;\n  getClientById(id: number): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: number, client: Partial<InsertClient>): Promise<Client>;\n  deleteClient(id: number): Promise<void>;\n\n  // Quotes\n  getQuotes(): Promise<QuoteWithDetails[]>;\n  getQuoteById(id: number): Promise<QuoteWithDetails | undefined>;\n  getQuotesByUser(userId: string): Promise<QuoteWithDetails[]>;\n  createQuote(quote: InsertQuote): Promise<Quote>;\n  updateQuote(id: number, quote: Partial<InsertQuote>): Promise<Quote>;\n  deleteQuote(id: number): Promise<void>;\n\n  // Quote items\n  createQuoteItem(item: InsertQuoteItem): Promise<QuoteItem>;\n  updateQuoteItem(id: number, item: Partial<InsertQuoteItem>): Promise<QuoteItem>;\n  deleteQuoteItem(id: number): Promise<void>;\n  getQuoteItems(quoteId: number): Promise<QuoteItem[]>;\n\n\n\n  // Pricing schemas\n  getPricingSchemas(): Promise<PricingSchema[]>;\n  getPricingSchemaById(id: number): Promise<PricingSchema | undefined>;\n  createPricingSchema(schema: InsertPricingSchema): Promise<PricingSchema>;\n  updatePricingSchema(id: number, schema: Partial<InsertPricingSchema>): Promise<PricingSchema>;\n  deletePricingSchema(id: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .where(eq(users.isApproved, false))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async approveUser(id: string, approvedById: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        isApproved: true, \n        approvedAt: new Date(),\n        approvedById,\n        updatedAt: new Date() \n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async rejectUser(id: string): Promise<void> {\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async toggleUserActive(id: string): Promise<User> {\n    const user = await this.getUser(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const [updatedUser] = await db\n      .update(users)\n      .set({ isActive: !user.isActive, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    // First, update all quotes created by this user to have null createdById\n    await db\n      .update(quotes)\n      .set({ createdById: null })\n      .where(eq(quotes.createdById, id));\n    \n    // Now we can safely delete the user\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  // Equipment categories\n  async getEquipmentCategories(): Promise<EquipmentCategory[]> {\n    return await db.select().from(equipmentCategories);\n  }\n\n  async createEquipmentCategory(category: InsertEquipmentCategory): Promise<EquipmentCategory> {\n    const [result] = await db.insert(equipmentCategories).values(category).returning();\n    return result;\n  }\n\n  async updateEquipmentCategory(id: number, category: Partial<InsertEquipmentCategory>): Promise<EquipmentCategory> {\n    const [result] = await db\n      .update(equipmentCategories)\n      .set(category)\n      .where(eq(equipmentCategories.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteEquipmentCategory(id: number): Promise<void> {\n    // Check if category has any ACTIVE equipment assigned\n    const activeEquipmentInCategory = await db\n      .select()\n      .from(equipment)\n      .where(and(eq(equipment.categoryId, id), eq(equipment.isActive, true)));\n    \n    if (activeEquipmentInCategory.length > 0) {\n      throw new Error(`Nie można usunąć kategorii. Kategoria ma przypisany aktywny sprzęt (${activeEquipmentInCategory.length} pozycji). Najpierw dezaktywuj lub usuń sprzęt z tej kategorii.`);\n    }\n    \n    // Get all inactive equipment in this category\n    const inactiveEquipment = await db\n      .select()\n      .from(equipment)\n      .where(and(eq(equipment.categoryId, id), eq(equipment.isActive, false)));\n    \n    // Delete related data for each inactive equipment\n    for (const item of inactiveEquipment) {\n      // Delete quote items that reference this equipment\n      await db.delete(quoteItems).where(eq(quoteItems.equipmentId, item.id));\n      // Delete pricing\n      await db.delete(equipmentPricing).where(eq(equipmentPricing.equipmentId, item.id));\n      // Delete additional equipment\n      await db.delete(equipmentAdditional).where(eq(equipmentAdditional.equipmentId, item.id));\n    }\n    \n    // Delete all inactive equipment in this category\n    await db.delete(equipment).where(and(eq(equipment.categoryId, id), eq(equipment.isActive, false)));\n    \n    await db.delete(equipmentCategories).where(eq(equipmentCategories.id, id));\n  }\n\n  // Equipment\n  async getInactiveEquipment(): Promise<EquipmentWithCategory[]> {\n    const result = await db\n      .select()\n      .from(equipment)\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .leftJoin(equipmentPricing, eq(equipment.id, equipmentPricing.equipmentId))\n      .leftJoin(equipmentAdditional, eq(equipment.id, equipmentAdditional.equipmentId))\n      .leftJoin(equipmentServiceCosts, eq(equipment.id, equipmentServiceCosts.equipmentId))\n      .leftJoin(equipmentServiceItems, eq(equipment.id, equipmentServiceItems.equipmentId))\n      .where(eq(equipment.isActive, false));\n\n    const equipmentMap = new Map<number, EquipmentWithCategory>();\n\n    for (const row of result) {\n      if (!equipmentMap.has(row.equipment.id)) {\n        equipmentMap.set(row.equipment.id, {\n          ...row.equipment,\n          category: row.equipment_categories!,\n          pricing: [],\n          additionalEquipment: [],\n          serviceCosts: row.equipment_service_costs || undefined,\n          serviceItems: [],\n        });\n      }\n\n      const equipmentItem = equipmentMap.get(row.equipment.id)!;\n\n      if (row.equipment_pricing) {\n        const existingPricing = equipmentItem.pricing.find(p => p.id === row.equipment_pricing!.id);\n        if (!existingPricing) {\n          equipmentItem.pricing.push(row.equipment_pricing);\n        }\n      }\n\n      if (row.equipment_additional) {\n        const existingAdditional = equipmentItem.additionalEquipment.find(a => a.id === row.equipment_additional!.id);\n        if (!existingAdditional) {\n          equipmentItem.additionalEquipment.push(row.equipment_additional);\n        }\n      }\n\n      if (row.equipment_service_items) {\n        const existingServiceItem = equipmentItem.serviceItems.find(s => s.id === row.equipment_service_items!.id);\n        if (!existingServiceItem) {\n          equipmentItem.serviceItems.push(row.equipment_service_items);\n        }\n      }\n    }\n\n    return Array.from(equipmentMap.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getEquipment(): Promise<EquipmentWithCategory[]> {\n    const result = await db\n      .select()\n      .from(equipment)\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .leftJoin(equipmentPricing, eq(equipment.id, equipmentPricing.equipmentId))\n      .leftJoin(equipmentAdditional, eq(equipment.id, equipmentAdditional.equipmentId))\n      .leftJoin(equipmentServiceCosts, eq(equipment.id, equipmentServiceCosts.equipmentId))\n      .leftJoin(equipmentServiceItems, eq(equipment.id, equipmentServiceItems.equipmentId))\n      .where(eq(equipment.isActive, true));\n\n    const equipmentMap = new Map<number, EquipmentWithCategory>();\n\n    for (const row of result) {\n      if (!equipmentMap.has(row.equipment.id)) {\n        equipmentMap.set(row.equipment.id, {\n          ...row.equipment,\n          category: row.equipment_categories!,\n          pricing: [],\n          additionalEquipment: [],\n          serviceCosts: row.equipment_service_costs || undefined,\n          serviceItems: [],\n        });\n      }\n\n      const equipmentItem = equipmentMap.get(row.equipment.id)!;\n\n      if (row.equipment_pricing) {\n        const existingPricing = equipmentItem.pricing.find(p => p.id === row.equipment_pricing!.id);\n        if (!existingPricing) {\n          equipmentItem.pricing.push(row.equipment_pricing);\n        }\n      }\n\n      if (row.equipment_additional) {\n        const existingAdditional = equipmentItem.additionalEquipment.find(a => a.id === row.equipment_additional!.id);\n        if (!existingAdditional) {\n          equipmentItem.additionalEquipment.push(row.equipment_additional);\n        }\n      }\n\n      if (row.equipment_service_items) {\n        const existingServiceItem = equipmentItem.serviceItems.find(s => s.id === row.equipment_service_items!.id);\n        if (!existingServiceItem) {\n          equipmentItem.serviceItems.push(row.equipment_service_items);\n        }\n      }\n    }\n\n    return Array.from(equipmentMap.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getEquipmentById(id: number): Promise<EquipmentWithCategory | undefined> {\n    const result = await db\n      .select()\n      .from(equipment)\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .leftJoin(equipmentPricing, eq(equipment.id, equipmentPricing.equipmentId))\n      .leftJoin(equipmentAdditional, eq(equipment.id, equipmentAdditional.equipmentId))\n      .leftJoin(equipmentServiceCosts, eq(equipment.id, equipmentServiceCosts.equipmentId))\n      .leftJoin(equipmentServiceItems, eq(equipment.id, equipmentServiceItems.equipmentId))\n      .where(eq(equipment.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const equipmentData = result[0].equipment;\n    const category = result[0].equipment_categories!;\n    const pricing = result.map(row => row.equipment_pricing).filter(Boolean) as EquipmentPricing[];\n    const additionalEquipment = result.map(row => row.equipment_additional).filter(Boolean) as EquipmentAdditional[];\n    const serviceCosts = result[0].equipment_service_costs || undefined;\n    const serviceItems = result.map(row => row.equipment_service_items).filter(Boolean) as EquipmentServiceItems[];\n\n    return {\n      ...equipmentData,\n      category,\n      pricing,\n      additionalEquipment,\n      serviceCosts,\n      serviceItems,\n    };\n  }\n\n  async getEquipmentByCategory(categoryId: number): Promise<EquipmentWithCategory[]> {\n    const result = await db\n      .select()\n      .from(equipment)\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .leftJoin(equipmentPricing, eq(equipment.id, equipmentPricing.equipmentId))\n      .where(and(eq(equipment.categoryId, categoryId), eq(equipment.isActive, true)));\n\n    const equipmentMap = new Map<number, EquipmentWithCategory>();\n\n    for (const row of result) {\n      if (!equipmentMap.has(row.equipment.id)) {\n        equipmentMap.set(row.equipment.id, {\n          ...row.equipment,\n          category: row.equipment_categories!,\n          pricing: [],\n          additionalEquipment: [],\n          serviceItems: [],\n        });\n      }\n\n      if (row.equipment_pricing) {\n        equipmentMap.get(row.equipment.id)!.pricing.push(row.equipment_pricing);\n      }\n    }\n\n    return Array.from(equipmentMap.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createEquipment(equipmentData: InsertEquipment): Promise<Equipment> {\n    const [result] = await db.insert(equipment).values(equipmentData).returning();\n    \n    // Create basic pricing structure with proper discount structure\n    const basicPricing = [\n      { periodStart: 1, periodEnd: 2, discountPercent: 0 },\n      { periodStart: 3, periodEnd: 7, discountPercent: 10 },\n      { periodStart: 8, periodEnd: 18, discountPercent: 20 },\n      { periodStart: 19, periodEnd: 29, discountPercent: 30 },\n      { periodStart: 30, periodEnd: null, discountPercent: 40 }\n    ];\n\n    // Create placeholder pricing entries that admin MUST update\n    // Using 100 zł base price with standard discount structure\n    const basePricePerDay = 100;\n    \n    for (const tier of basicPricing) {\n      await db.insert(equipmentPricing).values({\n        equipmentId: result.id,\n        periodStart: tier.periodStart,\n        periodEnd: tier.periodEnd,\n        pricePerDay: basePricePerDay.toString(),\n        discountPercent: tier.discountPercent.toString()\n      });\n    }\n\n    // Get equipment category to determine service configuration\n    const equipmentCategory = await db\n      .select()\n      .from(equipmentCategories)\n      .where(eq(equipmentCategories.id, equipmentData.categoryId))\n      .limit(1);\n\n    if (equipmentCategory.length > 0) {\n      const categoryName = equipmentCategory[0].name;\n      \n      // Create default service cost configuration based on category\n      let serviceConfig: any = {\n        equipmentId: result.id,\n        workerHours: 2.0,\n        workerCostPerHour: 100.00,\n        serviceIntervalMonths: 12\n      };\n\n      // Adjust service configuration based on category\n      if (categoryName === 'Agregaty prądotwórcze') {\n        serviceConfig.serviceIntervalMotohours = 500;\n        serviceConfig.serviceIntervalMonths = null;\n      } else if (categoryName === 'Maszty oświetleniowe') {\n        serviceConfig.serviceIntervalMotohours = 1000;\n        serviceConfig.serviceIntervalMonths = null;\n      } else if (categoryName === 'Pojazdy') {\n        serviceConfig.serviceIntervalKm = 15000;\n        serviceConfig.serviceIntervalMonths = null;\n        serviceConfig.workerHours = 3.0;\n        serviceConfig.workerCostPerHour = 500.00;\n      }\n\n      // Insert service costs configuration\n      await db.insert(equipmentServiceCosts).values(serviceConfig);\n\n      // Create default service items based on category\n      const defaultServiceItems = [\n        { itemName: 'Filtr paliwa', itemCost: 50.00, sortOrder: 1 },\n        { itemName: 'Filtr oleju', itemCost: 75.00, sortOrder: 2 },\n        { itemName: 'Wymiana oleju', itemCost: 120.00, sortOrder: 3 },\n        { itemName: 'Roboczogodziny serwisowe', itemCost: serviceConfig.workerHours * serviceConfig.workerCostPerHour, sortOrder: 4 }\n      ];\n\n      // Adjust service items based on category\n      if (categoryName === 'Pojazdy') {\n        defaultServiceItems[0] = { itemName: 'Filtr paliwa', itemCost: 50.00, sortOrder: 1 };\n        defaultServiceItems[1] = { itemName: 'Filtr oleju', itemCost: 75.00, sortOrder: 2 };\n        defaultServiceItems[2] = { itemName: 'Wymiana oleju', itemCost: 120.00, sortOrder: 3 };\n        defaultServiceItems[3] = { itemName: 'Roboczogodziny serwisowe', itemCost: 1500.00, sortOrder: 4 };\n      }\n\n      // Insert service items\n      for (const serviceItem of defaultServiceItems) {\n        await db.insert(equipmentServiceItems).values({\n          equipmentId: result.id,\n          ...serviceItem\n        });\n      }\n    }\n\n    // Create default additional equipment entry for immediate access\n    await db.insert(equipmentAdditional).values({\n      equipmentId: result.id,\n      type: \"additional\",\n      name: \"Dodatkowe wyposażenie 1\",\n      price: \"0.00\"\n    });\n    \n    return result;\n  }\n\n  async updateEquipment(id: number, equipmentData: Partial<InsertEquipment>): Promise<Equipment> {\n    const [result] = await db\n      .update(equipment)\n      .set({ ...equipmentData, updatedAt: new Date() })\n      .where(eq(equipment.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteEquipment(id: number): Promise<void> {\n    await db.update(equipment).set({ isActive: false }).where(eq(equipment.id, id));\n  }\n\n  async permanentlyDeleteEquipment(id: number): Promise<void> {\n    // Delete all related data first\n    await db.delete(quoteItems).where(eq(quoteItems.equipmentId, id));\n    await db.delete(equipmentPricing).where(eq(equipmentPricing.equipmentId, id));\n    await db.delete(equipmentAdditional).where(eq(equipmentAdditional.equipmentId, id));\n    \n    // Delete service-related data\n    await db.delete(equipmentServiceCosts).where(eq(equipmentServiceCosts.equipmentId, id));\n    await db.delete(equipmentServiceItems).where(eq(equipmentServiceItems.equipmentId, id));\n    \n    // Finally delete the equipment itself\n    await db.delete(equipment).where(eq(equipment.id, id));\n  }\n\n  // Equipment pricing\n  async createEquipmentPricing(pricing: InsertEquipmentPricing): Promise<EquipmentPricing> {\n    const [result] = await db.insert(equipmentPricing).values(pricing).returning();\n    return result;\n  }\n\n  async updateEquipmentPricing(id: number, pricing: Partial<InsertEquipmentPricing>): Promise<EquipmentPricing> {\n    const [result] = await db\n      .update(equipmentPricing)\n      .set(pricing)\n      .where(eq(equipmentPricing.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteEquipmentPricing(id: number): Promise<void> {\n    await db.delete(equipmentPricing).where(eq(equipmentPricing.id, id));\n  }\n\n  // Equipment additional and accessories\n  async getEquipmentAdditional(equipmentId: number): Promise<EquipmentAdditional[]> {\n    return await db\n      .select()\n      .from(equipmentAdditional)\n      .where(eq(equipmentAdditional.equipmentId, equipmentId))\n      .orderBy(equipmentAdditional.type, equipmentAdditional.position);\n  }\n\n  async createEquipmentAdditional(additional: InsertEquipmentAdditional): Promise<EquipmentAdditional> {\n    const [result] = await db.insert(equipmentAdditional).values(additional).returning();\n    return result;\n  }\n\n  async updateEquipmentAdditional(id: number, additional: Partial<InsertEquipmentAdditional>): Promise<EquipmentAdditional> {\n    const [result] = await db\n      .update(equipmentAdditional)\n      .set({ ...additional, updatedAt: new Date() })\n      .where(eq(equipmentAdditional.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteEquipmentAdditional(id: number): Promise<void> {\n    await db.delete(equipmentAdditional).where(eq(equipmentAdditional.id, id));\n  }\n\n  // Clients\n  async getClients(): Promise<Client[]> {\n    return await db.select().from(clients).orderBy(desc(clients.createdAt));\n  }\n\n  async getClientById(id: number): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const [result] = await db.insert(clients).values(client).returning();\n    return result;\n  }\n\n  async updateClient(id: number, client: Partial<InsertClient>): Promise<Client> {\n    const [result] = await db\n      .update(clients)\n      .set({ ...client, updatedAt: new Date() })\n      .where(eq(clients.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteClient(id: number): Promise<void> {\n    await db.delete(clients).where(eq(clients.id, id));\n  }\n\n  // Quotes\n  async getQuotes(): Promise<QuoteWithDetails[]> {\n    const result = await db\n      .select()\n      .from(quotes)\n      .leftJoin(clients, eq(quotes.clientId, clients.id))\n      .leftJoin(users, eq(quotes.createdById, users.id))\n      .leftJoin(quoteItems, eq(quotes.id, quoteItems.quoteId))\n      .leftJoin(equipment, eq(quoteItems.equipmentId, equipment.id))\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .orderBy(desc(quotes.createdAt));\n\n    const quotesMap = new Map<number, QuoteWithDetails>();\n\n    for (const row of result) {\n      if (!quotesMap.has(row.quotes.id)) {\n        quotesMap.set(row.quotes.id, {\n          ...row.quotes,\n          client: row.clients!,\n          createdBy: row.users!,\n          items: [],\n        });\n      }\n\n      if (row.quote_items && row.equipment && row.equipment_categories) {\n        const quote = quotesMap.get(row.quotes.id)!;\n        const existingItem = quote.items.find(item => item.id === row.quote_items!.id);\n        \n        if (!existingItem) {\n          quote.items.push({\n            ...row.quote_items,\n            equipment: {\n              ...row.equipment,\n              category: row.equipment_categories,\n              pricing: [], // Would need separate query for pricing\n              additionalEquipment: [],\n              serviceItems: [],\n            },\n          });\n        }\n      }\n    }\n\n    return Array.from(quotesMap.values());\n  }\n\n  async getQuoteById(id: number): Promise<QuoteWithDetails | undefined> {\n    const result = await db\n      .select()\n      .from(quotes)\n      .leftJoin(clients, eq(quotes.clientId, clients.id))\n      .leftJoin(users, eq(quotes.createdById, users.id))\n      .leftJoin(quoteItems, eq(quotes.id, quoteItems.quoteId))\n      .leftJoin(equipment, eq(quoteItems.equipmentId, equipment.id))\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .where(eq(quotes.id, id));\n\n    if (result.length === 0) return undefined;\n\n    const quote = result[0].quotes;\n    const client = result[0].clients!;\n    const createdBy = result[0].users!;\n    \n    // Process items and fetch additional equipment for each\n    const itemsWithAdditional = await Promise.all(\n      result\n        .filter(row => row.quote_items && row.equipment && row.equipment_categories)\n        .map(async (row) => {\n          const additionalEquipment = await this.getEquipmentAdditional(row.equipment!.id);\n          return {\n            ...row.quote_items!,\n            equipment: {\n              ...row.equipment!,\n              category: row.equipment_categories!,\n              pricing: [],\n              additionalEquipment,\n              serviceItems: [],\n            },\n          };\n        })\n    );\n\n    return {\n      ...quote,\n      client,\n      createdBy,\n      items: itemsWithAdditional,\n    };\n  }\n\n  async getQuotesByUser(userId: string): Promise<QuoteWithDetails[]> {\n    const result = await db\n      .select()\n      .from(quotes)\n      .leftJoin(clients, eq(quotes.clientId, clients.id))\n      .leftJoin(users, eq(quotes.createdById, users.id))\n      .leftJoin(quoteItems, eq(quotes.id, quoteItems.quoteId))\n      .leftJoin(equipment, eq(quoteItems.equipmentId, equipment.id))\n      .leftJoin(equipmentCategories, eq(equipment.categoryId, equipmentCategories.id))\n      .where(eq(quotes.createdById, userId))\n      .orderBy(desc(quotes.createdAt));\n\n    const quotesMap = new Map<number, QuoteWithDetails>();\n\n    for (const row of result) {\n      if (!quotesMap.has(row.quotes.id)) {\n        quotesMap.set(row.quotes.id, {\n          ...row.quotes,\n          client: row.clients!,\n          createdBy: row.users!,\n          items: [],\n        });\n      }\n\n      if (row.quote_items && row.equipment && row.equipment_categories) {\n        const quote = quotesMap.get(row.quotes.id)!;\n        const existingItem = quote.items.find(item => item.id === row.quote_items!.id);\n        \n        if (!existingItem) {\n          quote.items.push({\n            ...row.quote_items,\n            equipment: {\n              ...row.equipment,\n              category: row.equipment_categories,\n              pricing: [],\n              additionalEquipment: [],\n              serviceItems: [],\n            },\n          });\n        }\n      }\n    }\n\n    return Array.from(quotesMap.values());\n  }\n\n  async createQuote(quote: InsertQuote): Promise<Quote> {\n    const [result] = await db.insert(quotes).values(quote).returning();\n    return result;\n  }\n\n  async updateQuote(id: number, quote: Partial<InsertQuote>): Promise<Quote> {\n    const [result] = await db\n      .update(quotes)\n      .set({ ...quote, updatedAt: new Date() })\n      .where(eq(quotes.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteQuote(id: number): Promise<void> {\n    // First delete all quote items\n    await db.delete(quoteItems).where(eq(quoteItems.quoteId, id));\n    // Then delete the quote itself\n    await db.delete(quotes).where(eq(quotes.id, id));\n  }\n\n  // Quote items\n  async createQuoteItem(item: InsertQuoteItem): Promise<QuoteItem> {\n    const [result] = await db.insert(quoteItems).values(item).returning();\n    return result;\n  }\n\n  async updateQuoteItem(id: number, item: Partial<InsertQuoteItem>): Promise<QuoteItem> {\n    const [result] = await db\n      .update(quoteItems)\n      .set(item)\n      .where(eq(quoteItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteQuoteItem(id: number): Promise<void> {\n    await db.delete(quoteItems).where(eq(quoteItems.id, id));\n  }\n\n  async getQuoteItems(quoteId: number): Promise<QuoteItem[]> {\n    return await db.select().from(quoteItems).where(eq(quoteItems.quoteId, quoteId));\n  }\n\n\n\n  // Pricing schemas\n  async getPricingSchemas(): Promise<PricingSchema[]> {\n    const schemas = await db.select().from(pricingSchemas).orderBy(pricingSchemas.name);\n    return schemas;\n  }\n\n  async getPricingSchemaById(id: number): Promise<PricingSchema | undefined> {\n    const [schema] = await db.select().from(pricingSchemas).where(eq(pricingSchemas.id, id));\n    return schema;\n  }\n\n  async createPricingSchema(schemaData: InsertPricingSchema): Promise<PricingSchema> {\n    const [schema] = await db.insert(pricingSchemas).values(schemaData).returning();\n    return schema;\n  }\n\n  async updatePricingSchema(id: number, schemaData: Partial<InsertPricingSchema>): Promise<PricingSchema> {\n    const [schema] = await db\n      .update(pricingSchemas)\n      .set({ ...schemaData, updatedAt: new Date() })\n      .where(eq(pricingSchemas.id, id))\n      .returning();\n    return schema;\n  }\n\n  async deletePricingSchema(id: number): Promise<void> {\n    await db.delete(pricingSchemas).where(eq(pricingSchemas.id, id));\n  }\n\n  // Equipment service costs methods\n  async getEquipmentServiceCosts(equipmentId: number): Promise<EquipmentServiceCosts | undefined> {\n    const [result] = await db\n      .select()\n      .from(equipmentServiceCosts)\n      .where(eq(equipmentServiceCosts.equipmentId, equipmentId));\n    return result;\n  }\n\n  async upsertEquipmentServiceCosts(serviceCosts: InsertEquipmentServiceCosts): Promise<EquipmentServiceCosts> {\n    const [result] = await db\n      .insert(equipmentServiceCosts)\n      .values(serviceCosts)\n      .onConflictDoUpdate({\n        target: equipmentServiceCosts.equipmentId,\n        set: {\n          serviceIntervalMonths: serviceCosts.serviceIntervalMonths,\n          serviceIntervalKm: (serviceCosts as any).serviceIntervalKm,\n          serviceIntervalMotohours: (serviceCosts as any).serviceIntervalMotohours,\n          workerHours: serviceCosts.workerHours,\n          workerCostPerHour: serviceCosts.workerCostPerHour,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  // Equipment service items methods\n  async getEquipmentServiceItems(equipmentId: number): Promise<EquipmentServiceItems[]> {\n    return await db\n      .select()\n      .from(equipmentServiceItems)\n      .where(eq(equipmentServiceItems.equipmentId, equipmentId))\n      .orderBy(equipmentServiceItems.sortOrder);\n  }\n\n  async createEquipmentServiceItem(serviceItem: InsertEquipmentServiceItems): Promise<EquipmentServiceItems> {\n    const [result] = await db\n      .insert(equipmentServiceItems)\n      .values(serviceItem)\n      .returning();\n    return result;\n  }\n\n  async updateEquipmentServiceItem(id: number, serviceItem: Partial<InsertEquipmentServiceItems>): Promise<EquipmentServiceItems> {\n    const [result] = await db\n      .update(equipmentServiceItems)\n      .set({ ...serviceItem, updatedAt: new Date() })\n      .where(eq(equipmentServiceItems.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteEquipmentServiceItem(id: number): Promise<void> {\n    await db.delete(equipmentServiceItems).where(eq(equipmentServiceItems.id, id));\n  }\n\n  async syncServiceWorkHours(equipmentId: number): Promise<void> {\n    // Get current service costs configuration for this equipment\n    const serviceCosts = await this.getEquipmentServiceCosts(equipmentId);\n    \n    if (serviceCosts && serviceCosts.workerHours && serviceCosts.workerCostPerHour) {\n      // Calculate the total cost for service work hours\n      const totalCost = parseFloat(serviceCosts.workerHours.toString()) * parseFloat(serviceCosts.workerCostPerHour.toString());\n      \n      // Update the \"Roboczogodziny serwisowe\" item with the calculated cost\n      await db\n        .update(equipmentServiceItems)\n        .set({ \n          itemCost: totalCost.toString(),\n          updatedAt: new Date()\n        })\n        .where(\n          and(\n            eq(equipmentServiceItems.equipmentId, equipmentId),\n            eq(equipmentServiceItems.itemName, 'Roboczogodziny serwisowe')\n          )\n        );\n    } else {\n      // If no service costs exist, create default configuration\n      const equipmentData = await this.getEquipmentById(equipmentId);\n      if (equipmentData) {\n        await this.createDefaultServiceConfiguration(equipmentId, equipmentData.category.name);\n      }\n    }\n  }\n\n  // Helper function to create default service configuration for any equipment/category\n  async createDefaultServiceConfiguration(equipmentId: number, categoryName: string): Promise<void> {\n    // Create default service cost configuration based on category\n    let serviceConfig: any = {\n      equipmentId: equipmentId,\n      workerHours: 2.0,\n      workerCostPerHour: 100.00,\n      serviceIntervalMonths: 12\n    };\n\n    // Adjust service configuration based on category\n    if (categoryName === 'Agregaty prądotwórcze') {\n      serviceConfig.serviceIntervalMotohours = 500;\n      serviceConfig.serviceIntervalMonths = null;\n    } else if (categoryName === 'Maszty oświetleniowe') {\n      serviceConfig.serviceIntervalMotohours = 1000;\n      serviceConfig.serviceIntervalMonths = null;\n    } else if (categoryName === 'Pojazdy') {\n      serviceConfig.serviceIntervalKm = 15000;\n      serviceConfig.serviceIntervalMonths = null;\n      serviceConfig.workerHours = 3.0;\n      serviceConfig.workerCostPerHour = 500.00;\n    }\n\n    // Insert service costs configuration\n    await db.insert(equipmentServiceCosts).values(serviceConfig);\n\n    // Create default service items based on category\n    const defaultServiceItems = [\n      { itemName: 'Filtr paliwa', itemCost: 50.00, sortOrder: 1 },\n      { itemName: 'Filtr oleju', itemCost: 75.00, sortOrder: 2 },\n      { itemName: 'Wymiana oleju', itemCost: 120.00, sortOrder: 3 },\n      { itemName: 'Roboczogodziny serwisowe', itemCost: serviceConfig.workerHours * serviceConfig.workerCostPerHour, sortOrder: 4 }\n    ];\n\n    // Adjust service items based on category\n    if (categoryName === 'Pojazdy') {\n      defaultServiceItems[0] = { itemName: 'Filtr paliwa', itemCost: 50.00, sortOrder: 1 };\n      defaultServiceItems[1] = { itemName: 'Filtr oleju', itemCost: 75.00, sortOrder: 2 };\n      defaultServiceItems[2] = { itemName: 'Wymiana oleju', itemCost: 120.00, sortOrder: 3 };\n      defaultServiceItems[3] = { itemName: 'Roboczogodziny serwisowe', itemCost: 1500.00, sortOrder: 4 };\n    }\n\n    // Insert service items\n    for (const serviceItem of defaultServiceItems) {\n      await db.insert(equipmentServiceItems).values({\n        equipmentId: equipmentId,\n        itemName: serviceItem.itemName,\n        itemCost: serviceItem.itemCost.toString(),\n        sortOrder: serviceItem.sortOrder\n      });\n    }\n  }\n\n  // Function to sync ALL equipment with current admin panel settings\n  async syncAllEquipmentWithAdminSettings(): Promise<void> {\n    console.log('Syncing all equipment with admin panel settings...');\n    \n    // Get all active equipment\n    const allEquipment = await this.getEquipment();\n    \n    for (const equipment of allEquipment) {\n      // Ensure each equipment has service configuration\n      const serviceCosts = await db\n        .select()\n        .from(equipmentServiceCosts)\n        .where(eq(equipmentServiceCosts.equipmentId, equipment.id))\n        .limit(1);\n\n      if (serviceCosts.length === 0) {\n        // Create missing service configuration\n        await this.createDefaultServiceConfiguration(equipment.id, equipment.category.name);\n        console.log(`Created service configuration for ${equipment.name}`);\n      } else {\n        // Sync existing configuration\n        await this.syncServiceWorkHours(equipment.id);\n        console.log(`Synced service configuration for ${equipment.name}`);\n      }\n    }\n    \n    console.log('Finished syncing all equipment with admin panel settings');\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":36762},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"employee\"), // admin, kierownik, employee\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  isApproved: boolean(\"is_approved\").default(false).notNull(), // admin approval required\n  approvedAt: timestamp(\"approved_at\"),\n  approvedById: varchar(\"approved_by_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Equipment categories\nexport const equipmentCategories = pgTable(\"equipment_categories\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Equipment items\nexport const equipment = pgTable(\"equipment\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(),\n  categoryId: integer(\"category_id\").references(() => equipmentCategories.id).notNull(),\n  description: text(\"description\"),\n  model: varchar(\"model\"),\n  power: varchar(\"power\"), // e.g., \"90.18 kW\", \"235 kW\"\n  // Additional technical specifications for generators\n  fuelConsumption75: decimal(\"fuel_consumption_75\", { precision: 6, scale: 2 }), // l/h at 75% load\n  dimensions: varchar(\"dimensions\"), // LxWxH in mm\n  weight: varchar(\"weight\"), // in kg\n  engine: varchar(\"engine\"), // engine manufacturer/model\n  alternator: varchar(\"alternator\"), // alternator info\n  fuelTankCapacity: integer(\"fuel_tank_capacity\"), // liters\n  imageUrl: varchar(\"image_url\"), // equipment image URL\n\n  quantity: integer(\"quantity\").notNull().default(0),\n  availableQuantity: integer(\"available_quantity\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pricing tiers for different rental periods\nexport const equipmentPricing = pgTable(\"equipment_pricing\", {\n  id: serial(\"id\").primaryKey(),\n  equipmentId: integer(\"equipment_id\").references(() => equipment.id).notNull(),\n  periodStart: integer(\"period_start\").notNull(), // days\n  periodEnd: integer(\"period_end\"), // days, null for 30+\n  pricePerDay: decimal(\"price_per_day\", { precision: 10, scale: 2 }).notNull(),\n  discountPercent: decimal(\"discount_percent\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Equipment additional equipment and accessories\nexport const equipmentAdditional = pgTable(\"equipment_additional\", {\n  id: serial(\"id\").primaryKey(),\n  equipmentId: integer(\"equipment_id\").references(() => equipment.id).notNull(),\n  type: varchar(\"type\").notNull(), // \"additional\" or \"accessories\"\n  name: varchar(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  position: integer(\"position\").notNull().default(1), // 1-4 for ordering\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Clients/Customers\nexport const clients = pgTable(\"clients\", {\n  id: serial(\"id\").primaryKey(),\n  companyName: varchar(\"company_name\").notNull(),\n  nip: varchar(\"nip\"),\n  contactPerson: varchar(\"contact_person\"),\n  phone: varchar(\"phone\"),\n  email: varchar(\"email\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Pricing tiers/schemas - define different pricing strategies\nexport const pricingSchemas = pgTable(\"pricing_schemas\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull().unique(), // e.g., \"Rabat od pierwszego dnia\", \"Rabat progowy\"\n  description: text(\"description\"),\n  calculationMethod: varchar(\"calculation_method\").notNull().default(\"progressive\"), // \"first_day\" or \"progressive\"\n  isDefault: boolean(\"is_default\").default(false).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// API Keys for external access\nexport const apiKeys = pgTable(\"api_keys\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\").notNull(), // e.g., \"Website Integration\", \"Partner API\"\n  keyValue: varchar(\"key_value\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  permissions: jsonb(\"permissions\").notNull().default(JSON.stringify([\"quotes:create\", \"assessments:create\"])), // array of permissions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdById: varchar(\"created_by_id\").references(() => users.id),\n  lastUsedAt: timestamp(\"last_used_at\"),\n});\n\n// Progressive pricing tiers for each pricing schema\n\n\n// Quotes\nexport const quotes = pgTable(\"quotes\", {\n  id: serial(\"id\").primaryKey(),\n  quoteNumber: varchar(\"quote_number\").notNull().unique(),\n  clientId: integer(\"client_id\").references(() => clients.id).notNull(),\n  createdById: varchar(\"created_by_id\").references(() => users.id),\n  isGuestQuote: boolean(\"is_guest_quote\").default(false).notNull(),\n  guestEmail: varchar(\"guest_email\"),\n  pricingSchemaId: integer(\"pricing_schema_id\").references(() => pricingSchemas.id),\n  status: varchar(\"status\").notNull().default(\"draft\"), // draft, pending, approved, rejected\n  totalNet: decimal(\"total_net\", { precision: 12, scale: 2 }).notNull(),\n  vatRate: decimal(\"vat_rate\", { precision: 5, scale: 2 }).notNull().default(\"23\"),\n  totalGross: decimal(\"total_gross\", { precision: 12, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n\n\n// Quote items\nexport const quoteItems = pgTable(\"quote_items\", {\n  id: serial(\"id\").primaryKey(),\n  quoteId: integer(\"quote_id\").references(() => quotes.id).notNull(),\n  equipmentId: integer(\"equipment_id\").references(() => equipment.id).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  rentalPeriodDays: integer(\"rental_period_days\").notNull(),\n  pricePerDay: decimal(\"price_per_day\", { precision: 10, scale: 2 }).notNull(),\n  discountPercent: decimal(\"discount_percent\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  totalPrice: decimal(\"total_price\", { precision: 12, scale: 2 }).notNull(),\n  // Fuel cost fields for generators (motohours-based)\n  fuelConsumptionLH: decimal(\"fuel_consumption_lh\", { precision: 5, scale: 2 }), // liters per hour\n  fuelPricePerLiter: decimal(\"fuel_price_per_liter\", { precision: 6, scale: 2 }), // PLN per liter\n  hoursPerDay: integer(\"hours_per_day\").default(8), // operating hours per day\n  totalFuelCost: decimal(\"total_fuel_cost\", { precision: 12, scale: 2 }).default(\"0\"),\n  includeFuelCost: boolean(\"include_fuel_cost\").default(false),\n  // Fuel cost fields for vehicles (kilometers-based)\n  fuelConsumptionPer100km: decimal(\"fuel_consumption_per_100km\", { precision: 5, scale: 2 }), // liters per 100km for vehicles\n  kilometersPerDay: integer(\"kilometers_per_day\"), // kilometers driven per day\n  // Maintenance/exploitation cost fields for generators (every 500 mth)\n  includeMaintenanceCost: boolean(\"include_maintenance_cost\").default(false),\n  maintenanceIntervalHours: integer(\"maintenance_interval_hours\").default(500), // every 500 mth for generators\n  maintenanceIntervalKm: integer(\"maintenance_interval_km\"), // service interval in kilometers for vehicles\n  calculationType: varchar(\"calculation_type\").default(\"motohours\"), // 'motohours' or 'kilometers'\n  // Filter costs (6 filters)\n  fuelFilter1Cost: decimal(\"fuel_filter_1_cost\", { precision: 8, scale: 2 }).default(\"49.00\"),\n  fuelFilter2Cost: decimal(\"fuel_filter_2_cost\", { precision: 8, scale: 2 }).default(\"118.00\"),\n  oilFilterCost: decimal(\"oil_filter_cost\", { precision: 8, scale: 2 }).default(\"45.00\"),\n  airFilter1Cost: decimal(\"air_filter_1_cost\", { precision: 8, scale: 2 }).default(\"105.00\"),\n  airFilter2Cost: decimal(\"air_filter_2_cost\", { precision: 8, scale: 2 }).default(\"54.00\"),\n  engineFilterCost: decimal(\"engine_filter_cost\", { precision: 8, scale: 2 }).default(\"150.00\"),\n  // Oil cost\n  oilCost: decimal(\"oil_cost\", { precision: 8, scale: 2 }).default(\"162.44\"),\n  oilQuantityLiters: decimal(\"oil_quantity_liters\", { precision: 5, scale: 1 }).default(\"14.7\"),\n  // Service work cost\n  serviceWorkHours: decimal(\"service_work_hours\", { precision: 4, scale: 1 }).default(\"2\"),\n  serviceWorkRatePerHour: decimal(\"service_work_rate_per_hour\", { precision: 8, scale: 2 }).default(\"100.00\"),\n  // Service travel cost\n  serviceTravelDistanceKm: decimal(\"service_travel_distance_km\", { precision: 8, scale: 2 }).default(\"31\"),\n  serviceTravelRatePerKm: decimal(\"service_travel_rate_per_km\", { precision: 6, scale: 2 }).default(\"1.15\"),\n  // Total maintenance cost for the rental period\n  totalMaintenanceCost: decimal(\"total_maintenance_cost\", { precision: 12, scale: 2 }).default(\"0\"),\n  expectedMaintenanceHours: integer(\"expected_maintenance_hours\"), // expected operating hours for the rental period\n  // Installation cost fields\n  includeInstallationCost: boolean(\"include_installation_cost\").default(false),\n  installationDistanceKm: decimal(\"installation_distance_km\", { precision: 8, scale: 2 }),\n  numberOfTechnicians: integer(\"number_of_technicians\").default(1),\n  serviceRatePerTechnician: decimal(\"service_rate_per_technician\", { precision: 8, scale: 2 }).default(\"150\"),\n  travelRatePerKm: decimal(\"travel_rate_per_km\", { precision: 6, scale: 2 }).default(\"1.15\"),\n  totalInstallationCost: decimal(\"total_installation_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  \n  // Disassembly cost fields\n  includeDisassemblyCost: boolean(\"include_disassembly_cost\").default(false),\n  disassemblyDistanceKm: decimal(\"disassembly_distance_km\", { precision: 8, scale: 2 }),\n  disassemblyNumberOfTechnicians: integer(\"disassembly_number_of_technicians\").default(1),\n  disassemblyServiceRatePerTechnician: decimal(\"disassembly_service_rate_per_technician\", { precision: 8, scale: 2 }).default(\"150\"),\n  disassemblyTravelRatePerKm: decimal(\"disassembly_travel_rate_per_km\", { precision: 6, scale: 2 }).default(\"1.15\"),\n  totalDisassemblyCost: decimal(\"total_disassembly_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  \n  // Travel/Service cost fields\n  includeTravelServiceCost: boolean(\"include_travel_service_cost\").default(false),\n  travelServiceDistanceKm: decimal(\"travel_service_distance_km\", { precision: 8, scale: 2 }),\n  travelServiceNumberOfTechnicians: integer(\"travel_service_number_of_technicians\").default(1),\n  travelServiceServiceRatePerTechnician: decimal(\"travel_service_service_rate_per_technician\", { precision: 8, scale: 2 }).default(\"150\"),\n  travelServiceTravelRatePerKm: decimal(\"travel_service_travel_rate_per_km\", { precision: 6, scale: 2 }).default(\"1.15\"),\n  travelServiceNumberOfTrips: integer(\"travel_service_number_of_trips\").default(1),\n  totalTravelServiceCost: decimal(\"total_travel_service_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  \n  // Legacy travel cost fields (keeping for backward compatibility)\n  includeTravelCost: boolean(\"include_travel_cost\").default(false),\n  travelDistanceKm: decimal(\"travel_distance_km\", { precision: 8, scale: 2 }),\n  hourlyRatePerTechnician: decimal(\"hourly_rate_per_technician\", { precision: 8, scale: 2 }).default(\"150\"),\n  totalTravelCost: decimal(\"total_travel_cost\", { precision: 10, scale: 2 }).default(\"0\"),\n  // Service items for heaters\n  includeServiceItems: boolean(\"include_service_items\").default(false),\n  serviceItem1Cost: decimal(\"service_item_1_cost\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  serviceItem2Cost: decimal(\"service_item_2_cost\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  serviceItem3Cost: decimal(\"service_item_3_cost\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  serviceItem4Cost: decimal(\"service_item_4_cost\", { precision: 8, scale: 2 }).default(\"0.00\"),\n  totalServiceItemsCost: decimal(\"total_service_items_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  // Additional equipment tracking\n  additionalCost: decimal(\"additional_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  accessoriesCost: decimal(\"accessories_cost\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Service cost configuration for equipment\nexport const equipmentServiceCosts = pgTable(\"equipment_service_costs\", {\n  id: serial(\"id\").primaryKey(),\n  equipmentId: integer(\"equipment_id\").references(() => equipment.id).notNull().unique(),\n  serviceIntervalMonths: integer(\"service_interval_months\").default(12), // How often service is required for traditional equipment (months)\n  serviceIntervalKm: integer(\"service_interval_km\"), // Service interval in kilometers for vehicles\n  serviceIntervalMotohours: integer(\"service_interval_motohours\"), // Service interval in motohours for generators and lighting towers\n  workerHours: decimal(\"worker_hours\", { precision: 4, scale: 1 }).default(\"2.0\").notNull(), // Fixed field name\n  workerCostPerHour: decimal(\"worker_cost_per_hour\", { precision: 8, scale: 2 }).default(\"100.00\").notNull(), // Fixed field name\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Service items for equipment (configurable by admin)\nexport const equipmentServiceItems = pgTable(\"equipment_service_items\", {\n  id: serial(\"id\").primaryKey(),\n  equipmentId: integer(\"equipment_id\").references(() => equipment.id).notNull(),\n  itemName: varchar(\"item_name\").notNull(), // e.g., \"Filtr paliwa 1\", \"Filtr oleju\", \"Wymiana oleju\"\n  itemCost: decimal(\"item_cost\", { precision: 8, scale: 2 }).default(\"0.00\").notNull(),\n  sortOrder: integer(\"sort_order\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Needs Assessment Questions\nexport const needsAssessmentQuestions = pgTable(\"needs_assessment_questions\", {\n  id: serial(\"id\").primaryKey(),\n  category: varchar(\"category\").notNull(), // \"Informacje ogólne\", \"Warunki otoczenia\", etc.\n  question: text(\"question\").notNull(),\n  type: varchar(\"type\").notNull().default(\"text\"), // text, select, checkbox, radio, textarea\n  options: jsonb(\"options\"), // for select/radio/checkbox options\n  isRequired: boolean(\"is_required\").default(false),\n  position: integer(\"position\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  categoryType: varchar(\"category_type\").notNull().default(\"general\"), // \"general\" or \"equipment\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Needs Assessment Responses\nexport const needsAssessmentResponses = pgTable(\"needs_assessment_responses\", {\n  id: serial(\"id\").primaryKey(),\n  responseNumber: varchar(\"response_number\").notNull().unique(),\n  clientCompanyName: varchar(\"client_company_name\"),\n  clientContactPerson: varchar(\"client_contact_person\"),\n  clientPhone: varchar(\"client_phone\"),\n  clientEmail: varchar(\"client_email\"),\n  clientAddress: text(\"client_address\"),\n  responses: jsonb(\"responses\").notNull(), // { questionId: answer }\n  userId: varchar(\"user_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const equipmentRelations = relations(equipment, ({ one, many }) => ({\n  category: one(equipmentCategories, {\n    fields: [equipment.categoryId],\n    references: [equipmentCategories.id],\n  }),\n  pricing: many(equipmentPricing),\n  quoteItems: many(quoteItems),\n  additionalEquipment: many(equipmentAdditional),\n  serviceCosts: one(equipmentServiceCosts, {\n    fields: [equipment.id],\n    references: [equipmentServiceCosts.equipmentId],\n  }),\n  serviceItems: many(equipmentServiceItems),\n}));\n\nexport const equipmentAdditionalRelations = relations(equipmentAdditional, ({ one }) => ({\n  equipment: one(equipment, {\n    fields: [equipmentAdditional.equipmentId],\n    references: [equipment.id],\n  }),\n}));\n\nexport const equipmentCategoriesRelations = relations(equipmentCategories, ({ many }) => ({\n  equipment: many(equipment),\n}));\n\nexport const equipmentPricingRelations = relations(equipmentPricing, ({ one }) => ({\n  equipment: one(equipment, {\n    fields: [equipmentPricing.equipmentId],\n    references: [equipment.id],\n  }),\n}));\n\nexport const clientsRelations = relations(clients, ({ many }) => ({\n  quotes: many(quotes),\n}));\n\nexport const pricingSchemasRelations = relations(pricingSchemas, ({ many }) => ({\n  quotes: many(quotes),\n}));\n\n\n\nexport const quotesRelations = relations(quotes, ({ one, many }) => ({\n  client: one(clients, {\n    fields: [quotes.clientId],\n    references: [clients.id],\n  }),\n  createdBy: one(users, {\n    fields: [quotes.createdById],\n    references: [users.id],\n  }),\n  pricingSchema: one(pricingSchemas, {\n    fields: [quotes.pricingSchemaId],\n    references: [pricingSchemas.id],\n  }),\n  items: many(quoteItems),\n}));\n\nexport const quoteItemsRelations = relations(quoteItems, ({ one }) => ({\n  quote: one(quotes, {\n    fields: [quoteItems.quoteId],\n    references: [quotes.id],\n  }),\n  equipment: one(equipment, {\n    fields: [quoteItems.equipmentId],\n    references: [equipment.id],\n  }),\n}));\n\nexport const equipmentServiceCostsRelations = relations(equipmentServiceCosts, ({ one }) => ({\n  equipment: one(equipment, {\n    fields: [equipmentServiceCosts.equipmentId],\n    references: [equipment.id],\n  }),\n}));\n\nexport const equipmentServiceItemsRelations = relations(equipmentServiceItems, ({ one }) => ({\n  equipment: one(equipment, {\n    fields: [equipmentServiceItems.equipmentId],\n    references: [equipment.id],\n  }),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  quotes: many(quotes),\n  needsAssessmentResponses: many(needsAssessmentResponses),\n}));\n\nexport const needsAssessmentResponsesRelations = relations(needsAssessmentResponses, ({ one }) => ({\n  user: one(users, {\n    fields: [needsAssessmentResponses.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert and select schemas\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertEquipmentCategorySchema = createInsertSchema(equipmentCategories);\nexport const insertEquipmentSchema = createInsertSchema(equipment).extend({\n  fuelConsumption75: z.union([z.string(), z.number()]).optional().transform((val) => {\n    if (val === undefined || val === null) return undefined;\n    return typeof val === 'number' ? val.toString() : val;\n  }),\n  fuelTankCapacity: z.union([z.string(), z.number()]).optional().transform((val) => {\n    if (val === undefined || val === null) return undefined;\n    return typeof val === 'number' ? val : parseInt(val?.toString() || '0') || undefined;\n  }),\n});\nexport const insertEquipmentPricingSchema = createInsertSchema(equipmentPricing);\nexport const insertClientSchema = createInsertSchema(clients);\nexport const insertQuoteSchema = createInsertSchema(quotes);\nexport const insertQuoteItemSchema = createInsertSchema(quoteItems);\n\nexport const insertEquipmentAdditionalSchema = createInsertSchema(equipmentAdditional);\nexport const insertPricingSchemaSchema = createInsertSchema(pricingSchemas);\nexport const insertEquipmentServiceCostsSchema = createInsertSchema(equipmentServiceCosts);\nexport const insertEquipmentServiceItemsSchema = createInsertSchema(equipmentServiceItems);\nexport const insertNeedsAssessmentQuestionSchema = createInsertSchema(needsAssessmentQuestions);\nexport const insertNeedsAssessmentResponseSchema = createInsertSchema(needsAssessmentResponses).omit({\n  id: true,\n  responseNumber: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const selectUserSchema = createSelectSchema(users);\nexport const selectEquipmentCategorySchema = createSelectSchema(equipmentCategories);\nexport const selectEquipmentSchema = createSelectSchema(equipment);\nexport const selectEquipmentPricingSchema = createSelectSchema(equipmentPricing);\nexport const selectClientSchema = createSelectSchema(clients);\nexport const selectQuoteSchema = createSelectSchema(quotes);\nexport const selectQuoteItemSchema = createSelectSchema(quoteItems);\n\nexport const selectEquipmentAdditionalSchema = createSelectSchema(equipmentAdditional);\nexport const selectPricingSchemaSchema = createSelectSchema(pricingSchemas);\nexport const selectEquipmentServiceCostsSchema = createSelectSchema(equipmentServiceCosts);\nexport const selectEquipmentServiceItemsSchema = createSelectSchema(equipmentServiceItems);\nexport const selectNeedsAssessmentQuestionSchema = createSelectSchema(needsAssessmentQuestions);\nexport const selectNeedsAssessmentResponseSchema = createSelectSchema(needsAssessmentResponses);\n\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = z.infer<typeof selectUserSchema>;\nexport type InsertEquipmentCategory = z.infer<typeof insertEquipmentCategorySchema>;\nexport type EquipmentCategory = z.infer<typeof selectEquipmentCategorySchema>;\nexport type InsertEquipment = z.infer<typeof insertEquipmentSchema>;\nexport type Equipment = z.infer<typeof selectEquipmentSchema>;\nexport type InsertEquipmentPricing = z.infer<typeof insertEquipmentPricingSchema>;\nexport type EquipmentPricing = z.infer<typeof selectEquipmentPricingSchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\nexport type Client = z.infer<typeof selectClientSchema>;\nexport type InsertQuote = z.infer<typeof insertQuoteSchema>;\nexport type Quote = z.infer<typeof selectQuoteSchema>;\nexport type InsertQuoteItem = z.infer<typeof insertQuoteItemSchema>;\nexport type QuoteItem = z.infer<typeof selectQuoteItemSchema>;\n\nexport type InsertEquipmentAdditional = z.infer<typeof insertEquipmentAdditionalSchema>;\nexport type EquipmentAdditional = z.infer<typeof selectEquipmentAdditionalSchema>;\nexport type InsertPricingSchema = z.infer<typeof insertPricingSchemaSchema>;\nexport type PricingSchema = typeof pricingSchemas.$inferSelect;\n\nexport type InsertEquipmentServiceCosts = z.infer<typeof insertEquipmentServiceCostsSchema>;\nexport type EquipmentServiceCosts = z.infer<typeof selectEquipmentServiceCostsSchema>;\nexport type InsertEquipmentServiceItems = z.infer<typeof insertEquipmentServiceItemsSchema>;\nexport type EquipmentServiceItems = z.infer<typeof selectEquipmentServiceItemsSchema>;\nexport type InsertNeedsAssessmentQuestion = z.infer<typeof insertNeedsAssessmentQuestionSchema>;\nexport type NeedsAssessmentQuestion = z.infer<typeof selectNeedsAssessmentQuestionSchema>;\nexport type InsertNeedsAssessmentResponse = z.infer<typeof insertNeedsAssessmentResponseSchema>;\nexport type NeedsAssessmentResponse = z.infer<typeof selectNeedsAssessmentResponseSchema>;\n\n// API Keys schema\nexport const insertApiKeySchema = createInsertSchema(apiKeys, {\n  permissions: z.array(z.string()),\n}).omit({\n  id: true,\n  createdAt: true,\n  lastUsedAt: true,\n});\n\nexport type InsertApiKey = z.infer<typeof insertApiKeySchema>;\nexport type SelectApiKey = typeof apiKeys.$inferSelect;\n\n// Public API schemas for external usage\nexport const publicQuoteSchema = z.object({\n  clientCompanyName: z.string().min(1, \"Nazwa firmy jest wymagana\"),\n  clientContactPerson: z.string().optional(),\n  clientPhone: z.string().optional(),\n  clientEmail: z.string().email().optional(),\n  clientAddress: z.string().optional(),\n  equipment: z.array(z.object({\n    equipmentId: z.number(),\n    quantity: z.number().min(1),\n    rentalPeriod: z.number().min(1),\n  })),\n  additionalEquipment: z.array(z.object({\n    equipmentId: z.number(),\n    additionalId: z.number(),\n    quantity: z.number().min(1),\n  })).optional(),\n});\n\nexport const publicAssessmentSchema = z.object({\n  clientCompanyName: z.string().min(1, \"Nazwa firmy jest wymagana\"),\n  clientContactPerson: z.string().optional(),\n  clientPhone: z.string().optional(),\n  clientEmail: z.string().email().optional(),\n  clientAddress: z.string().optional(),\n  responses: z.record(z.string()),\n});\n\nexport type PublicQuoteData = z.infer<typeof publicQuoteSchema>;\nexport type PublicAssessmentData = z.infer<typeof publicAssessmentSchema>;\n\n// Extended types for API responses\nexport type EquipmentWithCategory = Equipment & {\n  category: EquipmentCategory;\n  pricing: EquipmentPricing[];\n  additionalEquipment: EquipmentAdditional[];\n  serviceCosts?: EquipmentServiceCosts;\n  serviceItems: EquipmentServiceItems[];\n};\n\nexport type QuoteWithDetails = Quote & {\n  client: Client;\n  createdBy: User;\n  items: (QuoteItem & {\n    equipment: EquipmentWithCategory;\n  })[];\n};\n","size_bytes":25319},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Equipment from \"@/pages/equipment\";\nimport Quotes from \"@/pages/quotes\";\nimport QuoteDetail from \"@/pages/quote-detail\";\nimport CreateQuote from \"@/pages/create-quote\";\nimport EditQuote from \"@/pages/edit-quote\";\nimport Admin from \"@/pages/admin\";\nimport AdminRoom from \"@/pages/admin-room\";\nimport AdminNeedsAssessment from \"@/pages/admin-needs-assessment\";\nimport AdminApiKeys from \"@/pages/admin-api-keys\";\nimport AdminEquipmentCategories from \"@/pages/admin-equipment-categories\";\nimport NeedsAssessment from \"@/pages/needs-assessment\";\nimport NeedsAssessmentList from \"@/pages/needs-assessment-list\";\nimport NeedsAssessmentPrint from \"@/pages/needs-assessment-print\";\nimport Profile from \"@/pages/profile\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\nimport GuestQuote from \"@/pages/guest-quote\";\nimport PendingApproval from \"@/pages/pending-approval\";\nimport Navbar from \"@/components/navbar\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user, needsApproval } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Ładowanie...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Switch>\n          <Route path=\"/\" component={Landing} />\n          <Route component={() => <Landing />} />\n        </Switch>\n      </div>\n    );\n  }\n\n  // Check if user needs approval (authenticated but not approved)\n  if (user && !(user as any).isApproved) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <PendingApproval />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/equipment\" component={Equipment} />\n        <Route path=\"/quotes\" component={Quotes} />\n        <Route path=\"/quotes/:id\" component={QuoteDetail} />\n        <Route path=\"/quotes/:id/edit\" component={EditQuote} />\n        <Route path=\"/create-quote\" component={() => <CreateQuote />} />\n        <Route path=\"/needs-assessment\" component={NeedsAssessment} />\n        <Route path=\"/needs-assessment-list\" component={NeedsAssessmentList} />\n        <Route path=\"/needs-assessment/:id/print\">\n          {(params) => <NeedsAssessmentPrint id={params.id} />}\n        </Route>\n        <Route path=\"/admin\" component={Admin} />\n        <Route path=\"/admin-room\" component={AdminRoom} />\n        <Route path=\"/admin/needs-assessment\" component={AdminNeedsAssessment} />\n        <Route path=\"/admin/api-keys\" component={AdminApiKeys} />\n        <Route path=\"/admin/equipment-categories\" component={AdminEquipmentCategories} />\n        <Route path=\"/profile\" component={Profile} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"sebastian-popiel-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3925},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 13%, 91%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(220, 13%, 85%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(220, 13%, 82%);\n  --input: hsl(220, 13%, 88%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(25, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(220, 13%, 88%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(122, 39%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(35, 91%, 62%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(217, 32%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(25, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --success: hsl(122, 39%, 49%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(35, 91%, 62%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --ring: hsl(217, 32%, 17%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-success {\n    background-color: hsl(var(--success));\n  }\n  .text-success {\n    color: hsl(var(--success));\n  }\n  .text-success-foreground {\n    color: hsl(var(--success-foreground));\n  }\n  .bg-warning {\n    background-color: hsl(var(--warning));\n  }\n  .text-warning {\n    color: hsl(var(--warning));\n  }\n  .text-warning-foreground {\n    color: hsl(var(--warning-foreground));\n  }\n}\n","size_bytes":2468},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Settings, \n  BarChart3, \n  Wrench, \n  FileText, \n  Plus, \n  LogOut,\n  User,\n  Bell,\n  ClipboardList,\n  ChevronDown,\n  Shield\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function Navbar() {\n  const { user, isAuthenticated } = useAuth();\n  const [location] = useLocation();\n\n  const isActive = (path: string) => {\n    return location === path;\n  };\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: BarChart3 },\n    { path: \"/equipment\", label: \"Sprzęt\", icon: Wrench },\n  ];\n\n  if (isAuthenticated && (user as any)?.role === 'admin') {\n    navItems.push({ path: \"/admin\", label: \"Admin\", icon: Settings });\n    navItems.push({ path: \"/admin-room\", label: \"ADMIN ROOM\", icon: Shield });\n  }\n\n  return (\n    <nav className=\"bg-card shadow-sm border-b border-border\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"flex items-center\">\n              <div className=\"bg-primary text-white w-10 h-10 rounded-full flex items-center justify-center mr-3\">\n                <Settings className=\"w-6 h-6\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">PPP :: Program</h1>\n            </Link>\n          </div>\n          \n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant={isActive(item.path) ? \"default\" : \"ghost\"}\n                  className={`flex items-center space-x-2 ${\n                    isActive(item.path) \n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  <item.icon className=\"w-4 h-4\" />\n                  <span>{item.label}</span>\n                </Button>\n              </Link>\n            ))}\n            \n            {/* Badania Potrzeb Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant={isActive(\"/needs-assessment\") || isActive(\"/needs-assessment-list\") ? \"default\" : \"ghost\"}\n                  className={`flex items-center space-x-2 ${\n                    isActive(\"/needs-assessment\") || isActive(\"/needs-assessment-list\")\n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  <ClipboardList className=\"w-4 h-4\" />\n                  <span>BADANIA</span>\n                  <ChevronDown className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"start\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/needs-assessment\" className=\"cursor-pointer\">\n                    <ClipboardList className=\"w-4 h-4 mr-2\" />\n                    Nowe Badanie\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/needs-assessment-list\" className=\"cursor-pointer\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Zapisane Badania\n                  </Link>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Wyceny Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant={isActive(\"/create-quote\") || isActive(\"/quotes\") ? \"default\" : \"ghost\"}\n                  className={`flex items-center space-x-2 ${\n                    isActive(\"/create-quote\") || isActive(\"/quotes\")\n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span>OFERTY</span>\n                  <ChevronDown className=\"w-4 h-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"start\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/create-quote\" className=\"cursor-pointer\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nowa Wycena\n                  </Link>\n                </DropdownMenuItem>\n                {isAuthenticated && (user as any)?.role === 'admin' && (\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/quotes\" className=\"cursor-pointer\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Zapisane Wyceny\n                    </Link>\n                  </DropdownMenuItem>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {isAuthenticated ? (\n              <>\n                <Button variant=\"ghost\" size=\"icon\" className=\"text-muted-foreground hover:text-primary\">\n                  <Bell className=\"w-5 h-5\" />\n                </Button>\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 h-10\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={(user as any)?.profileImageUrl || undefined} />\n                        <AvatarFallback className=\"bg-primary text-white\">\n                          <User className=\"w-4 h-4\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-sm font-medium text-foreground\">\n                        {(user as any)?.firstName && (user as any)?.lastName \n                          ? `${(user as any).firstName} ${(user as any).lastName}`\n                          : (user as any)?.email?.split('@')[0] || 'Użytkownik'\n                        }\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"cursor-pointer\">\n                        <User className=\"w-4 h-4 mr-2\" />\n                        Profil\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/settings\" className=\"cursor-pointer\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        Ustawienia\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={() => window.location.href = '/api/logout'}\n                      className=\"text-red-600\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Wyloguj się\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : (\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n                variant=\"default\"\n              >\n                Zaloguj się\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        <div className=\"md:hidden border-t border-border py-3\">\n          <div className=\"flex space-x-1 overflow-x-auto\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant={isActive(item.path) ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className={`flex items-center space-x-1 whitespace-nowrap ${\n                    isActive(item.path) \n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground\"\n                  }`}\n                >\n                  <item.icon className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">{item.label}</span>\n                </Button>\n              </Link>\n            ))}\n            \n            {/* Mobile Badania Potrzeb Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant={isActive(\"/needs-assessment\") || isActive(\"/needs-assessment-list\") ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className={`flex items-center space-x-1 whitespace-nowrap ${\n                    isActive(\"/needs-assessment\") || isActive(\"/needs-assessment-list\")\n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground\"\n                  }`}\n                >\n                  <ClipboardList className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">POTRZEBY</span>\n                  <ChevronDown className=\"w-3 h-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"start\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/needs-assessment\" className=\"cursor-pointer\">\n                    <ClipboardList className=\"w-4 h-4 mr-2\" />\n                    Nowe Badanie\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem asChild>\n                  <Link href=\"/needs-assessment-list\" className=\"cursor-pointer\">\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Zapisane Badania\n                  </Link>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            {/* Mobile Wyceny Dropdown */}\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant={isActive(\"/create-quote\") || isActive(\"/quotes\") ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  className={`flex items-center space-x-1 whitespace-nowrap ${\n                    isActive(\"/create-quote\") || isActive(\"/quotes\")\n                      ? \"bg-primary text-primary-foreground\" \n                      : \"text-muted-foreground\"\n                  }`}\n                >\n                  <Plus className=\"w-4 h-4\" />\n                  <span className=\"text-xs\">OFERTY</span>\n                  <ChevronDown className=\"w-3 h-3\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"start\" className=\"w-56\">\n                <DropdownMenuItem asChild>\n                  <Link href=\"/create-quote\" className=\"cursor-pointer\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Nowa Wycena\n                  </Link>\n                </DropdownMenuItem>\n                {isAuthenticated && (user as any)?.role === 'admin' && (\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/quotes\" className=\"cursor-pointer\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Zapisane Wyceny\n                    </Link>\n                  </DropdownMenuItem>\n                )}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":11991},"client/src/components/quote-item.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Trash2, Fuel, Car, Wrench, Settings } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface QuoteItemData {\n  id: string;\n  equipmentId: number;\n  quantity: number;\n  rentalPeriodDays: number;\n  pricePerDay: number;\n  discountPercent: number;\n  totalPrice: number;\n  notes?: string;\n  // Fuel cost fields for generators (motohours-based)\n  fuelConsumptionLH?: number;\n  fuelPricePerLiter?: number;\n  hoursPerDay?: number;\n  totalFuelCost?: number;\n  includeFuelCost?: boolean;\n  \n  // Fuel cost fields for vehicles (kilometers-based)\n  fuelConsumptionPer100km?: number;\n  kilometersPerDay?: number;\n  calculationType?: 'motohours' | 'kilometers';\n\n  // Installation cost fields\n  includeInstallationCost?: boolean;\n  installationDistanceKm?: number;\n  numberOfTechnicians?: number;\n  serviceRatePerTechnician?: number;\n  travelRatePerKm?: number;\n  totalInstallationCost?: number;\n\n  // Disassembly cost fields\n  includeDisassemblyCost?: boolean;\n  disassemblyDistanceKm?: number;\n  disassemblyNumberOfTechnicians?: number;\n  disassemblyServiceRatePerTechnician?: number;\n  disassemblyTravelRatePerKm?: number;\n  totalDisassemblyCost?: number;\n\n  // Travel/Service cost fields\n  includeTravelServiceCost?: boolean;\n  travelServiceDistanceKm?: number;\n  travelServiceNumberOfTechnicians?: number;\n  travelServiceServiceRatePerTechnician?: number;\n  travelServiceTravelRatePerKm?: number;\n  travelServiceNumberOfTrips?: number;\n  totalTravelServiceCost?: number;\n\n  // Service items for heaters\n  includeServiceItems?: boolean;\n  serviceItem1Cost?: number;\n  serviceItem2Cost?: number;\n  serviceItem3Cost?: number;\n  serviceItem4Cost?: number;\n  totalServiceItemsCost?: number;\n\n  // Maintenance/exploitation cost fields for generators\n  includeMaintenanceCost?: boolean;\n  maintenanceIntervalHours?: number;\n  // Filter costs (6 filters)\n  fuelFilter1Cost?: number;\n  fuelFilter2Cost?: number;\n  oilFilterCost?: number;\n  airFilter1Cost?: number;\n  airFilter2Cost?: number;\n  engineFilterCost?: number;\n  // Oil cost\n  oilCost?: number;\n  oilQuantityLiters?: number;\n  // Service work cost\n  serviceWorkHours?: number;\n  serviceWorkRatePerHour?: number;\n  // Service travel cost\n  serviceTravelDistanceKm?: number;\n  serviceTravelRatePerKm?: number;\n  includeServiceTravelCost?: boolean;\n  totalMaintenanceCost?: number;\n  expectedMaintenanceHours?: number;\n\n  // Additional equipment and accessories\n  selectedAdditional?: number[]; // IDs of selected additional equipment\n  selectedAccessories?: number[]; // IDs of selected accessories\n  additionalCost?: number;\n  accessoriesCost?: number;\n}\n\ninterface EquipmentAdditional {\n  id: number;\n  equipmentId: number;\n  type: \"additional\" | \"accessories\";\n  name: string;\n  price: string;\n  position: number;\n}\n\ninterface Equipment {\n  id: number;\n  name: string;\n  category: {\n    id: number;\n    name: string;\n  };\n  pricing: Array<{\n    periodStart: number;\n    periodEnd?: number;\n    pricePerDay: string;\n    discountPercent: string;\n  }>;\n  fuelConsumption75?: number; // l/h at 75% load for generators\n  additionalEquipment?: EquipmentAdditional[];\n}\n\ninterface PricingSchema {\n  id: number;\n  name: string;\n  description: string | null;\n  calculationMethod: string; // \"first_day\" or \"progressive\"\n  isDefault: boolean;\n  isActive: boolean;\n}\n\ninterface QuoteItemProps {\n  item: QuoteItemData;\n  equipment: Equipment[];\n  pricingSchema?: PricingSchema;\n  onUpdate: (item: QuoteItemData) => void;\n  onRemove: () => void;\n  canRemove: boolean;\n}\n\n\n\nexport default function QuoteItem({ item, equipment, pricingSchema, onUpdate, onRemove, canRemove }: QuoteItemProps) {\n  // Helper functions for handling notes with hidden JSON data\n  const getUserNotes = (notes: string): string => {\n    try {\n      if (notes.startsWith('{\"selectedAdditional\"')) {\n        const notesData = JSON.parse(notes);\n        return notesData.userNotes || \"\";\n      }\n      return notes;\n    } catch (e) {\n      return notes;\n    }\n  };\n  \n  const handleNotesChange = (userNotes: string) => {\n    try {\n      let newNotes;\n      if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n        const notesData = JSON.parse(item.notes);\n        newNotes = JSON.stringify({\n          ...notesData,\n          userNotes: userNotes\n        });\n      } else {\n        // If no technical data exists yet, just save user notes directly\n        newNotes = userNotes;\n      }\n      onUpdate({ ...item, notes: newNotes });\n    } catch (e) {\n      // If parsing fails, just save user notes directly\n      onUpdate({ ...item, notes: userNotes });\n    }\n  };\n\n  // Initialize selectedCategory based on current equipment\n  const currentEquipment = equipment.find(eq => eq.id === item.equipmentId);\n  const [selectedCategory, setSelectedCategory] = useState<number | null>(\n    currentEquipment ? currentEquipment.category.id : null\n  );\n\n  // Get unique categories\n  const categories = equipment.reduce((acc, eq) => {\n    if (!acc.find(cat => cat.id === eq.category.id)) {\n      acc.push(eq.category);\n    }\n    return acc;\n  }, [] as Array<{ id: number; name: string }>);\n\n  // Get equipment for selected category\n  const categoryEquipment = selectedCategory \n    ? equipment.filter(eq => eq.category.id === selectedCategory)\n    : [];\n\n  // Update selectedCategory when equipment changes from outside (auto-add from URL)\n  useEffect(() => {\n    if (item.equipmentId && equipment.length > 0) {\n      const currentEquipment = equipment.find(eq => eq.id === item.equipmentId);\n      if (currentEquipment && selectedCategory !== currentEquipment.category.id) {\n        setSelectedCategory(currentEquipment.category.id);\n      }\n    }\n  }, [item.equipmentId, equipment, selectedCategory]);\n\n  // Get selected equipment\n  const selectedEquipment = equipment.find(eq => eq.id === item.equipmentId);\n  const isGenerator = selectedEquipment?.category.name === 'Agregaty prądotwórcze';\n  const isLightingTower = selectedEquipment?.category.name === 'Maszty oświetleniowe';\n  const isAirConditioner = selectedEquipment?.category.name === 'Klimatyzacje';\n  const isVehicle = selectedEquipment?.category.name === 'Pojazdy';\n  const hasMaintenanceCosts = isGenerator || isLightingTower || isAirConditioner;\n\n\n\n  // Query to get additional equipment and accessories\n  const { data: additionalEquipment = [] } = useQuery<EquipmentAdditional[]>({\n    queryKey: [\"/api/equipment\", item.equipmentId, \"additional\"],\n    enabled: !!item.equipmentId && item.equipmentId > 0,\n  });\n\n  // Query to get service costs for the selected equipment\n  const { data: serviceCosts } = useQuery<any>({\n    queryKey: [\"/api/equipment\", item.equipmentId, \"service-costs\"],\n    enabled: !!item.equipmentId && item.equipmentId > 0,\n  });\n\n  // Query to get service items for the selected equipment\n  const { data: serviceItems = [], refetch: refetchServiceItems } = useQuery<any[]>({\n    queryKey: [\"/api/equipment\", item.equipmentId, \"service-items\"],\n    enabled: !!item.equipmentId && item.equipmentId > 0,\n    staleTime: 0, // Always fetch fresh data\n    gcTime: 0, // Don't cache\n  });\n\n  // Calculate additional equipment costs when data loads or selections change\n  useEffect(() => {\n    if (additionalEquipment && additionalEquipment.length > 0) {\n      let shouldUpdate = false;\n      let updatedItem = { ...item };\n      \n      // Calculate additional equipment costs (multiply by quantity)\n      if (item.selectedAdditional && item.selectedAdditional.length > 0) {\n        const currentAdditionalCost = item.selectedAdditional.reduce((sum, id) => {\n          const additionalItem = additionalEquipment.find(add => add.id === id && add.type === 'additional');\n          return sum + (additionalItem ? parseFloat(additionalItem.price) : 0);\n        }, 0) * item.quantity;\n        \n        if (currentAdditionalCost !== (item.additionalCost || 0)) {\n          updatedItem.additionalCost = currentAdditionalCost;\n          shouldUpdate = true;\n        }\n      } else if ((item.additionalCost || 0) > 0) {\n        // Reset cost if no items selected\n        updatedItem.additionalCost = 0;\n        shouldUpdate = true;\n      }\n      \n      // Calculate accessories costs (multiply by quantity)\n      if (item.selectedAccessories && item.selectedAccessories.length > 0) {\n        const currentAccessoriesCost = item.selectedAccessories.reduce((sum, id) => {\n          const accessoryItem = additionalEquipment.find(acc => acc.id === id && acc.type === 'accessories');\n          return sum + (accessoryItem ? parseFloat(accessoryItem.price) : 0);\n        }, 0) * item.quantity;\n        \n        if (currentAccessoriesCost !== (item.accessoriesCost || 0)) {\n          updatedItem.accessoriesCost = currentAccessoriesCost;\n          shouldUpdate = true;\n        }\n      } else if ((item.accessoriesCost || 0) > 0) {\n        // Reset cost if no items selected\n        updatedItem.accessoriesCost = 0;\n        shouldUpdate = true;\n      }\n      \n      if (shouldUpdate) {\n        console.log('Updating additional costs:', {\n          additionalCost: updatedItem.additionalCost,\n          accessoriesCost: updatedItem.accessoriesCost,\n          selectedAdditional: item.selectedAdditional,\n          selectedAccessories: item.selectedAccessories\n        });\n        onUpdate(updatedItem);\n      }\n    }\n  }, [additionalEquipment, item.selectedAdditional, item.selectedAccessories, item.additionalCost, item.accessoriesCost, item.quantity]);\n\n  // Auto-populate service costs from database when service items load and costs are enabled but empty\n  useEffect(() => {\n    if (item.includeServiceItems && serviceItems && serviceItems.length > 0) {\n      // Check if values need to be populated (all are 0)\n      const hasEmptyValues = (item.serviceItem1Cost || 0) === 0 && (item.serviceItem2Cost || 0) === 0 && (item.serviceItem3Cost || 0) === 0 && (item.serviceItem4Cost || 0) === 0;\n      \n      if (hasEmptyValues) {\n        const item1Cost = serviceItems[0]?.itemCost ? parseFloat(serviceItems[0].itemCost) : 0;\n        const item2Cost = serviceItems[1]?.itemCost ? parseFloat(serviceItems[1].itemCost) : 0;\n        const item3Cost = serviceItems[2]?.itemCost ? parseFloat(serviceItems[2].itemCost) : 0;\n        const item4Cost = serviceItems[3]?.itemCost ? parseFloat(serviceItems[3].itemCost) : 0;\n        \n        console.log('Auto-populating service costs from database (useEffect):', { \n          serviceItemsLength: serviceItems.length,\n          item1Cost, \n          item2Cost, \n          item3Cost,\n          item4Cost,\n          rawServiceItems: serviceItems,\n          itemNames: serviceItems.map(item => item?.itemName)\n        });\n        \n        if (item1Cost > 0 || item2Cost > 0 || item3Cost > 0 || item4Cost > 0) {\n          onUpdate({\n            ...item,\n            serviceItem1Cost: item1Cost,\n            serviceItem2Cost: item2Cost,\n            serviceItem3Cost: item3Cost,\n            serviceItem4Cost: item4Cost,\n          });\n        }\n      }\n    }\n  }, [serviceItems, item.includeServiceItems]);\n\n  // Calculate price when equipment, quantity, or period changes\n  useEffect(() => {\n    if (selectedEquipment && item.quantity > 0 && item.rentalPeriodDays > 0) {\n      const pricing = getPricingForPeriod(selectedEquipment, item.rentalPeriodDays);\n      if (pricing) {\n        let pricePerDay = parseFloat(pricing.pricePerDay);\n        let discountPercent = parseFloat(pricing.discountPercent);\n        \n        // If pricing schema is provided, use it to determine calculation method\n        if (pricingSchema) {\n          if (pricingSchema.calculationMethod === \"first_day\") {\n            // For first_day method: Use highest available discount from day 1, but apply base price\n            const basePricing = selectedEquipment.pricing.find(p => p.periodStart === 1);\n            if (basePricing) {\n              const basePrice = parseFloat(basePricing.pricePerDay);\n              \n              // Find the pricing tier that matches this rental period\n              const applicablePricing = selectedEquipment.pricing\n                .filter(p => item.rentalPeriodDays >= p.periodStart && \n                           (!p.periodEnd || item.rentalPeriodDays <= p.periodEnd))[0];\n              \n              if (applicablePricing && parseFloat(applicablePricing.discountPercent) > 0) {\n                // Apply the available discount to base price from day 1\n                discountPercent = parseFloat(applicablePricing.discountPercent);\n                pricePerDay = basePrice * (1 - discountPercent / 100);\n              } else {\n                // No discount available, use base pricing\n                discountPercent = parseFloat(basePricing.discountPercent);\n                pricePerDay = basePrice;\n              }\n            }\n          } else if (pricingSchema.calculationMethod === \"progressive\") {\n            // For progressive method: Calculate price based on progressive tiers\n            let totalCost = 0;\n            let currentDay = 1;\n            \n            // Sort pricing tiers by period start\n            const sortedPricing = selectedEquipment.pricing.sort((a, b) => a.periodStart - b.periodStart);\n            \n            while (currentDay <= item.rentalPeriodDays) {\n              // Find which tier applies to the current day\n              let applicableTier = sortedPricing[0]; // default to first tier\n              \n              for (const tier of sortedPricing) {\n                if (currentDay >= tier.periodStart && \n                    (!tier.periodEnd || currentDay <= tier.periodEnd)) {\n                  applicableTier = tier;\n                  break;\n                }\n              }\n              \n              const tierPrice = parseFloat(applicableTier.pricePerDay);\n              totalCost += tierPrice;\n              currentDay++;\n            }\n            \n            // Calculate average price per day and effective discount\n            if (totalCost > 0) {\n              pricePerDay = totalCost / item.rentalPeriodDays;\n              const basePricing = sortedPricing[0];\n              if (basePricing) {\n                const basePrice = parseFloat(basePricing.pricePerDay);\n                // Use stored discount percentage instead of calculating it\n                // This ensures consistency with admin panel settings\n                const applicableTierForDiscount = sortedPricing.find(tier => \n                  item.rentalPeriodDays >= tier.periodStart && \n                  (!tier.periodEnd || item.rentalPeriodDays <= tier.periodEnd)\n                );\n                if (applicableTierForDiscount) {\n                  discountPercent = parseFloat(applicableTierForDiscount.discountPercent);\n                } else {\n                  discountPercent = ((basePrice - pricePerDay) / basePrice) * 100;\n                }\n              }\n            }\n          }\n        }\n        \n        if (isNaN(pricePerDay) || isNaN(discountPercent)) {\n          return;\n        }\n        \n        const totalEquipmentPrice = pricePerDay * item.quantity * item.rentalPeriodDays;\n        \n        // Calculate fuel cost for different equipment types\n        let fuelCost = 0;\n        if (item.includeFuelCost && item.fuelPricePerLiter) {\n          if (selectedEquipment?.category.name === 'Pojazdy') {\n            // Vehicle fuel calculation: km-based\n            if (item.fuelConsumptionPer100km && item.kilometersPerDay) {\n              const totalKm = item.rentalPeriodDays * item.kilometersPerDay;\n              const totalFuelNeeded = (totalKm / 100) * item.fuelConsumptionPer100km * item.quantity;\n              fuelCost = totalFuelNeeded * item.fuelPricePerLiter;\n              \n              console.log('Vehicle fuel calculation:', {\n                category: selectedEquipment.category.name,\n                rentalDays: item.rentalPeriodDays,\n                kilometersPerDay: item.kilometersPerDay,\n                totalKm,\n                fuelConsumptionPer100km: item.fuelConsumptionPer100km,\n                quantity: item.quantity,\n                fuelPricePerLiter: item.fuelPricePerLiter,\n                totalFuelNeeded,\n                fuelCost\n              });\n            }\n          } else {\n            // Engine equipment fuel calculation: hour-based (generators, lighting towers, etc.)\n            if (item.fuelConsumptionLH && item.hoursPerDay) {\n              const totalHours = item.rentalPeriodDays * item.hoursPerDay;\n              const totalFuelNeeded = totalHours * item.fuelConsumptionLH * item.quantity;\n              fuelCost = totalFuelNeeded * item.fuelPricePerLiter;\n              \n              console.log('Engine equipment fuel calculation:', {\n                category: selectedEquipment?.category.name || 'Unknown',\n                rentalDays: item.rentalPeriodDays,\n                hoursPerDay: item.hoursPerDay,\n                totalHours,\n                fuelConsumptionLH: item.fuelConsumptionLH,\n                quantity: item.quantity,\n                fuelPricePerLiter: item.fuelPricePerLiter,\n                totalFuelNeeded,\n                fuelCost\n              });\n            }\n          }\n        }\n\n        // Calculate installation cost\n        let installationCost = 0;\n        if (item.includeInstallationCost) {\n          // Travel cost (round trip) - kilometers should not be multiplied by technicians\n          const travelCost = (item.installationDistanceKm || 0) * (item.travelRatePerKm || 1.15);\n          // Service cost (per technician)\n          const serviceCost = (item.numberOfTechnicians || 1) * (item.serviceRatePerTechnician || 150);\n          installationCost = travelCost + serviceCost;\n        }\n\n        // Calculate disassembly cost\n        let disassemblyCost = 0;\n        if (item.includeDisassemblyCost) {\n          // Travel cost (round trip) - kilometers should not be multiplied by technicians\n          const travelCost = (item.disassemblyDistanceKm || 0) * (item.disassemblyTravelRatePerKm || 1.15);\n          // Service cost (per technician)\n          const serviceCost = (item.disassemblyNumberOfTechnicians || 1) * (item.disassemblyServiceRatePerTechnician || 150);\n          disassemblyCost = travelCost + serviceCost;\n        }\n\n        // Calculate travel/service cost\n        let travelServiceCost = 0;\n        if (item.includeTravelServiceCost) {\n          // Travel cost (round trip) - kilometers should not be multiplied by technicians\n          const travelCost = (item.travelServiceDistanceKm || 0) * (item.travelServiceTravelRatePerKm || 1.15);\n          // Service cost (per technician)\n          const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * (item.travelServiceServiceRatePerTechnician || 150);\n          // Total cost per trip\n          const costPerTrip = travelCost + serviceCost;\n          // Multiply by number of trips\n          travelServiceCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n        }\n\n        // Maintenance costs removed per user request\n\n        // Additional equipment and accessories cost (already multiplied by quantity in useEffect)\n        const additionalCost = item.additionalCost || 0;\n        const accessoriesCost = item.accessoriesCost || 0;\n        \n        // Calculate service items cost - only include if service items are enabled\n        let serviceItemsCost = 0;\n        if (item.includeServiceItems) {\n          // Calculate service cost based on operating hours and service intervals\n          let totalServiceCost = 0;\n          \n          // Calculate total service cost proportionally based on usage\n          // Only use service items - work hours are already included in service items\n          const totalServiceItemsCost = (item.serviceItem1Cost || 0) + (item.serviceItem2Cost || 0) + (item.serviceItem3Cost || 0) + ((item as any).serviceItem4Cost || 0);\n          \n          console.log('Service Items Debug:', {\n            serviceItem1Cost: item.serviceItem1Cost,\n            serviceItem2Cost: item.serviceItem2Cost,\n            serviceItem3Cost: item.serviceItem3Cost,\n            serviceItem4Cost: (item as any).serviceItem4Cost,\n            totalServiceItemsCost,\n            equipmentName: selectedEquipment?.name,\n            manualSum: (item.serviceItem1Cost || 0) + (item.serviceItem2Cost || 0) + (item.serviceItem3Cost || 0) + ((item as any).serviceItem4Cost || 0),\n            expectedSum: 2048 + 800 + 2937.82\n          });\n          \n          if (serviceCosts && selectedEquipment && totalServiceItemsCost > 0) {\n            const isGenerator = selectedEquipment.category.name === 'Agregaty prądotwórcze';\n            const isLightingTower = selectedEquipment.category.name === 'Maszty oświetleniowe';\n            const isVehicle = selectedEquipment.category.name === 'Pojazdy';\n            \n            if (isGenerator || isLightingTower) {\n              // For engine equipment - use motohour intervals from database\n              const serviceIntervalMotohours = parseInt((serviceCosts as any).serviceIntervalMotohours) || 500;\n              const hoursPerDay = item.hoursPerDay || 8;\n              const expectedMotohours = item.rentalPeriodDays * hoursPerDay;\n              \n              // Calculate proportional service cost based on actual usage vs interval\n              const proportionFactor = expectedMotohours / serviceIntervalMotohours;\n              totalServiceCost = totalServiceItemsCost * proportionFactor * item.quantity;\n              \n\n            } else if (isVehicle) {\n              // For vehicles - use kilometer intervals\n              const serviceIntervalKm = parseInt((serviceCosts as any).serviceIntervalKm) || 15000;\n              const dailyKm = item.kilometersPerDay || 100;\n              const expectedKm = item.rentalPeriodDays * dailyKm;\n              \n              // Calculate proportional service cost based on actual usage vs interval\n              const proportionFactor = expectedKm / serviceIntervalKm;\n              totalServiceCost = totalServiceItemsCost * proportionFactor * item.quantity;\n              \n              console.log('Vehicle Service Cost Calculation:', {\n                categoryName: selectedEquipment.category.name,\n                equipmentName: selectedEquipment.name,\n                totalServiceItemsCost,\n                serviceItem1Cost: item.serviceItem1Cost,\n                serviceItem2Cost: item.serviceItem2Cost,\n                serviceItem3Cost: item.serviceItem3Cost,\n                serviceItem4Cost: (item as any).serviceItem4Cost,\n                serviceIntervalKm,\n                dailyKm,\n                rentalDays: item.rentalPeriodDays,\n                expectedKm,\n                proportionFactor,\n                quantity: item.quantity,\n                finalCost: totalServiceCost,\n                note: 'Check if all service items are included'\n              });\n            } else {\n              // For other equipment (nagrzewnice, klimatyzacje, etc.) - use yearly intervals (365 days)\n              const serviceIntervalMonths = parseInt((serviceCosts as any).serviceIntervalMonths) || 12;\n              \n              // For yearly service interval (12 months), calculate based on actual usage\n              if (serviceIntervalMonths === 12) {\n                // Calculate based on actual hours vs standard yearly hours\n                const hoursPerDay = item.hoursPerDay || 8;\n                const expectedHours = item.rentalPeriodDays * hoursPerDay;\n                const standardYearlyHours = 365 * 12; // Standard 12 hours per day for full year (100%)\n                \n                // Proportional to actual usage vs standard yearly usage\n                const proportionFactor = expectedHours / standardYearlyHours;\n                totalServiceCost = totalServiceItemsCost * proportionFactor * item.quantity;\n                console.log('Yearly Service Cost (12 months):', {\n                  categoryName: selectedEquipment.category.name,\n                  equipmentName: selectedEquipment.name,\n                  serviceIntervalMonths,\n                  totalServiceItemsCost,\n                  rentalDays: item.rentalPeriodDays,\n                  hoursPerDay,\n                  expectedHours,\n                  standardYearlyHours,\n                  proportionFactor,\n                  quantity: item.quantity,\n                  finalCost: totalServiceCost,\n                  note: 'Cost based on actual hours vs standard yearly hours (365 × 8h)'\n                });\n              } else {\n                // For other intervals, calculate proportionally\n                const hoursPerDay = item.hoursPerDay || 8;\n                const expectedHours = item.rentalPeriodDays * hoursPerDay;\n                const serviceIntervalHours = 365 * hoursPerDay;\n                const proportionFactor = expectedHours / serviceIntervalHours;\n                totalServiceCost = totalServiceItemsCost * proportionFactor * item.quantity;\n              }\n            }\n          } else {\n            // No service cost data or no service items - use base cost multiplied by quantity\n            totalServiceCost = totalServiceItemsCost * item.quantity;\n          }\n          \n          serviceItemsCost = totalServiceCost;\n        } else {\n          serviceItemsCost = 0;\n        }\n        \n        // Total price (maintenance costs removed per user request)\n        const totalPrice = totalEquipmentPrice + fuelCost + installationCost + disassemblyCost + travelServiceCost + serviceItemsCost + additionalCost + accessoriesCost;\n        \n\n\n\n\n        onUpdate({\n          ...item,\n          pricePerDay,\n          discountPercent,\n          totalPrice,\n          totalFuelCost: fuelCost,\n          totalInstallationCost: installationCost,\n          totalDisassemblyCost: disassemblyCost,\n          totalTravelServiceCost: travelServiceCost,\n          totalMaintenanceCost: 0,\n          totalServiceItemsCost: serviceItemsCost,\n          additionalCost,\n          accessoriesCost,\n        });\n      }\n    }\n  }, [\n    item.equipmentId, \n    item.quantity, \n    item.rentalPeriodDays, \n    item.includeFuelCost, \n    item.fuelConsumptionLH, \n    item.fuelPricePerLiter, \n    item.hoursPerDay,\n    item.fuelConsumptionPer100km,\n    item.kilometersPerDay,\n    item.includeInstallationCost, \n    item.installationDistanceKm, \n    item.travelRatePerKm,\n    item.numberOfTechnicians,\n    item.serviceRatePerTechnician,\n    item.includeDisassemblyCost,\n    item.disassemblyDistanceKm,\n    item.disassemblyTravelRatePerKm,\n    item.disassemblyNumberOfTechnicians,\n    item.disassemblyServiceRatePerTechnician,\n    item.includeTravelServiceCost,\n    item.travelServiceDistanceKm,\n    item.travelServiceTravelRatePerKm,\n    item.travelServiceNumberOfTechnicians,\n    item.travelServiceServiceRatePerTechnician,\n    item.travelServiceNumberOfTrips,\n    item.includeServiceItems,\n    item.serviceItem1Cost,\n    item.serviceItem2Cost, \n    item.serviceItem3Cost,\n    (item as any).serviceItem4Cost,\n    item.additionalCost,\n    item.accessoriesCost,\n    selectedEquipment,\n    pricingSchema,\n    serviceCosts,\n  ]);\n\n  const getPricingForPeriod = (equipment: Equipment, days: number) => {\n    // Sort pricing by periodStart to ensure we get the correct tier\n    const sortedPricing = equipment.pricing.sort((a, b) => a.periodStart - b.periodStart);\n    \n    // Find the appropriate pricing tier based on days\n    for (const pricing of sortedPricing) {\n      if (!pricing.periodEnd) {\n        // This is the last tier (e.g., 30+ days)\n        if (days >= pricing.periodStart) {\n          return pricing;\n        }\n      } else {\n        // This is a bounded tier (e.g., 1-2 days, 3-7 days, etc.)\n        if (days >= pricing.periodStart && days <= pricing.periodEnd) {\n          return pricing;\n        }\n      }\n    }\n    \n    // Fallback: return the first pricing tier if no match found\n    return sortedPricing[0];\n  };\n\n  const handleCategoryChange = (categoryId: string) => {\n    const catId = parseInt(categoryId);\n    setSelectedCategory(catId);\n    // Reset equipment selection when category changes\n    onUpdate({\n      ...item,\n      equipmentId: 0,\n      pricePerDay: 0,\n      discountPercent: 0,\n      totalPrice: 0,\n    });\n  };\n\n  const handleEquipmentChange = (equipmentId: string) => {\n    const eqId = parseInt(equipmentId);\n    const equipment = categoryEquipment.find(eq => eq.id === eqId);\n    \n    if (equipment) {\n      // Set the category based on selected equipment\n      setSelectedCategory(equipment.category.id);\n      \n      // Auto-fill fuel consumption and maintenance costs for generators, lighting towers, and heaters\n      let fuelData = {};\n      if (equipment.category.name === 'Agregaty prądotwórcze' || equipment.category.name === 'Maszty oświetleniowe' || equipment.category.name === 'Nagrzewnice' || equipment.category.name === 'Klimatyzacje') {\n        fuelData = {\n          includeFuelCost: true,\n          fuelConsumptionLH: equipment.fuelConsumption75 || 0,\n          fuelPricePerLiter: 6.50, // Default fuel price PLN/liter\n          hoursPerDay: equipment.category.name === 'Klimatyzacje' ? 12 : 8,\n          totalFuelCost: 0,\n          // Maintenance costs removed per user request\n        };\n      }\n      \n      onUpdate({\n        ...item,\n        equipmentId: eqId,\n        pricePerDay: 0,\n        discountPercent: 0,\n        totalPrice: 0,\n        ...fuelData\n      });\n    } else {\n      onUpdate({\n        ...item,\n        equipmentId: eqId,\n        pricePerDay: 0,\n        discountPercent: 0,\n        totalPrice: 0,\n      });\n    }\n  };\n\n  const handleQuantityChange = (quantity: string) => {\n    const qty = parseInt(quantity) || 1;\n    onUpdate({\n      ...item,\n      quantity: qty,\n    });\n  };\n\n  const handlePeriodChange = (days: string) => {\n    const period = parseInt(days) || 1;\n    onUpdate({\n      ...item,\n      rentalPeriodDays: period,\n    });\n  };\n\n\n\n\n\n  const formatCurrency = (amount: number) => {\n    if (isNaN(amount)) {\n      return \"0,00 zł\";\n    }\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(amount);\n  };\n\n  // updateMaintenanceCost function removed per user request\n\n  return (\n    <Card className=\"border border-border\">\n      <CardContent className=\"p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">Kategoria</label>\n            <Select value={selectedCategory?.toString() || \"\"} onValueChange={handleCategoryChange}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Wybierz kategorię\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id.toString()}>\n                    {category.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">Sprzęt</label>\n            <Select \n              value={item.equipmentId.toString()} \n              onValueChange={handleEquipmentChange}\n              disabled={!selectedCategory}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder={selectedCategory ? \"Wybierz sprzęt\" : \"Najpierw wybierz kategorię\"} />\n              </SelectTrigger>\n              <SelectContent>\n                {categoryEquipment.map((equipment) => (\n                  <SelectItem key={equipment.id} value={equipment.id.toString()}>\n                    {equipment.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">Ilość</label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              value={item.quantity}\n              onChange={(e) => handleQuantityChange(e.target.value)}\n              placeholder=\"1\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">Okres wynajmu (dni)</label>\n            <Input\n              type=\"number\"\n              min=\"1\"\n              max=\"365\"\n              value={item.rentalPeriodDays}\n              onChange={(e) => handlePeriodChange(e.target.value)}\n              placeholder=\"1\"\n              className=\"text-center\"\n            />\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {pricingSchema?.calculationMethod === \"first_day\" \n                ? `Rabat ${item.discountPercent}% (od 1. dnia)`\n                : `Rabat ${item.discountPercent}%`\n              }\n            </div>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">Cena netto</label>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-lg font-medium text-foreground\">\n                {formatCurrency(item.totalPrice)}\n              </span>\n              {canRemove && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={onRemove}\n                  className=\"text-red-600 hover:text-red-700\"\n                >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n            <p className=\"text-xs text-green-600 mt-1\">\n              Rabat: {item.discountPercent}%\n            </p>\n          </div>\n        </div>\n\n        {/* Fuel Cost Calculation for Generators, Lighting Towers, Heaters, and Vehicles */}\n        {selectedEquipment && (selectedEquipment.category.name === 'Agregaty prądotwórcze' || selectedEquipment.category.name === 'Maszty oświetleniowe' || selectedEquipment.category.name === 'Nagrzewnice' || selectedEquipment.category.name === 'Pojazdy') && (\n          <div className=\"mt-4\">\n            <Separator className=\"my-4\" />\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <Checkbox \n                id=\"includeFuelCost\" \n                checked={item.includeFuelCost || false}\n                onCheckedChange={(checked) => \n                  onUpdate({ \n                    ...item, \n                    includeFuelCost: checked as boolean,\n                    totalFuelCost: checked ? item.totalFuelCost : 0\n                  })\n                }\n              />\n              <label htmlFor=\"includeFuelCost\" className=\"text-sm font-medium text-foreground flex items-center\">\n                <Fuel className=\"w-4 h-4 mr-2\" />\n                Uwzględnij koszty paliwa\n              </label>\n            </div>\n            \n            {/* Advisory text for fuel-related equipment */}\n            {selectedEquipment && (selectedEquipment.category.name === 'Agregaty prądotwórcze' || selectedEquipment.category.name === 'Maszty oświetleniowe' || selectedEquipment.category.name === 'Nagrzewnice') && (\n              <div className=\"bg-blue-50 dark:bg-blue-950/20 p-3 rounded-lg mb-4 border border-blue-200 dark:border-blue-800\">\n                <div className=\"flex items-start space-x-2\">\n                  <div className=\"text-blue-600 dark:text-blue-400 mt-0.5\">💡</div>\n                  <div className=\"text-sm text-blue-800 dark:text-blue-200\">\n                    <strong>Porada:</strong> W przypadku konieczności tankowania urządzeń przez pracownika, może wystąpić konieczność jego dojazdu z innej lokalizacji - uwzględnij te koszty np. w \"kosztach dojazdu / serwisu\"\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {item.includeFuelCost && (\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                {/* Show different inputs based on equipment category */}\n                {selectedEquipment.category.name === 'Pojazdy' ? (\n                  // Vehicle fuel calculation (kilometers-based)\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Zużycie paliwa (l/100km)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.1\"\n                        min=\"0\"\n                        placeholder=\"np. 8.5\"\n                        value={item.fuelConsumptionPer100km || \"\"}\n                        onChange={(e) => {\n                          const consumption = parseFloat(e.target.value) || 0;\n                          const days = item.rentalPeriodDays;\n                          const kmPerDay = item.kilometersPerDay || 0;\n                          const fuelPrice = item.fuelPricePerLiter || 6.50;\n                          const totalKm = days * kmPerDay;\n                          const totalFuelCost = (totalKm / 100) * consumption * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            fuelConsumptionPer100km: consumption,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'kilometers'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Kilometry dziennie\n                      </label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"np. 50\"\n                        value={item.kilometersPerDay || \"\"}\n                        onChange={(e) => {\n                          const kmPerDay = parseInt(e.target.value) || 0;\n                          const days = item.rentalPeriodDays;\n                          const consumption = item.fuelConsumptionPer100km || 0;\n                          const fuelPrice = item.fuelPricePerLiter || 6.50;\n                          const totalKm = days * kmPerDay;\n                          const totalFuelCost = (totalKm / 100) * consumption * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            kilometersPerDay: kmPerDay,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'kilometers'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Cena paliwa (zł/l)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"6.50\"\n                        value={item.fuelPricePerLiter || \"\"}\n                        onChange={(e) => {\n                          const fuelPrice = parseFloat(e.target.value) || 0;\n                          const days = item.rentalPeriodDays;\n                          const kmPerDay = item.kilometersPerDay || 0;\n                          const consumption = item.fuelConsumptionPer100km || 0;\n                          const totalKm = days * kmPerDay;\n                          const totalFuelCost = (totalKm / 100) * consumption * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            fuelPricePerLiter: fuelPrice,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'kilometers'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Łączny koszt paliwa\n                      </label>\n                      <Input \n                        value={formatCurrency(item.totalFuelCost || 0)}\n                        disabled\n                        className=\"bg-background\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {item.rentalPeriodDays * (item.kilometersPerDay || 0)} km całkowity przebieg\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  // Standard fuel calculation (motohours-based) for generators, lighting towers, heaters\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Zużycie paliwa (l/h)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.1\"\n                        min=\"0\"\n                        placeholder=\"np. 35.3\"\n                        value={item.fuelConsumptionLH?.toString() || \"\"}\n                        onChange={(e) => {\n                          const consumption = parseFloat(e.target.value) || 0;\n                          const hours = item.hoursPerDay || 8;\n                          const days = item.rentalPeriodDays;\n                          const fuelPrice = item.fuelPricePerLiter || 6.50;\n                          const totalFuelCost = consumption * hours * days * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            fuelConsumptionLH: consumption,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'motohours'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Godziny pracy dziennie\n                      </label>\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"24\"\n                        placeholder=\"8\"\n                        value={item.hoursPerDay || \"\"}\n                        onChange={(e) => {\n                          const hours = parseInt(e.target.value) || 8;\n                          const consumption = item.fuelConsumptionLH || 0;\n                          const days = item.rentalPeriodDays;\n                          const fuelPrice = item.fuelPricePerLiter || 6.50;\n                          const totalFuelCost = consumption * hours * days * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            hoursPerDay: hours,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'motohours'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Cena paliwa (zł/l)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"6.50\"\n                        value={item.fuelPricePerLiter?.toString() || \"\"}\n                        onChange={(e) => {\n                          const fuelPrice = parseFloat(e.target.value) || 0;\n                          const consumption = item.fuelConsumptionLH || 0;\n                          const hours = item.hoursPerDay || 8;\n                          const days = item.rentalPeriodDays;\n                          const totalFuelCost = consumption * hours * days * fuelPrice;\n                          onUpdate({ \n                            ...item, \n                            fuelPricePerLiter: fuelPrice,\n                            totalFuelCost: totalFuelCost,\n                            calculationType: 'motohours'\n                          });\n                        }}\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-foreground mb-2\">\n                        Łączny koszt paliwa\n                      </label>\n                      <Input \n                        value={formatCurrency(item.totalFuelCost || 0)}\n                        disabled\n                        className=\"bg-background\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {item.rentalPeriodDays * (item.hoursPerDay || 8)} mth łącznie\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Installation Cost Section */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Checkbox \n              id=\"includeInstallationCost\" \n              checked={item.includeInstallationCost || false}\n              onCheckedChange={(checked) => {\n                let totalCost = 0;\n                if (checked) {\n                  const travelCost = (item.installationDistanceKm || 0) * (item.travelRatePerKm || 1.15);\n                  const serviceCost = (item.numberOfTechnicians || 1) * (item.serviceRatePerTechnician || 150);\n                  totalCost = travelCost + serviceCost;\n                }\n                onUpdate({ \n                  ...item, \n                  includeInstallationCost: checked as boolean,\n                  installationDistanceKm: checked ? (item.installationDistanceKm || 0) : 0,\n                  numberOfTechnicians: checked ? (item.numberOfTechnicians || 1) : 1,\n                  serviceRatePerTechnician: checked ? (item.serviceRatePerTechnician || 150) : 150,\n                  travelRatePerKm: checked ? (item.travelRatePerKm || 1.15) : 1.15,\n                  totalInstallationCost: totalCost\n                });\n              }}\n            />\n            <label htmlFor=\"includeInstallationCost\" className=\"text-sm font-medium text-foreground flex items-center\">\n              <Car className=\"w-4 h-4 mr-2\" />\n              Uwzględnij koszty montażu\n            </label>\n          </div>\n          \n          {item.includeInstallationCost && (\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość kilometrów (tam i z powrotem)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={item.installationDistanceKm || \"\"}\n                    onChange={(e) => {\n                      const distance = parseFloat(e.target.value) || 0;\n                      const travelCost = distance * (item.travelRatePerKm || 1.15);\n                      const serviceCost = (item.numberOfTechnicians || 1) * (item.serviceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        installationDistanceKm: distance,\n                        totalInstallationCost: totalCost\n                      });\n                    }}\n                    placeholder=\"np. 50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość techników\n                  </label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    value={item.numberOfTechnicians || 1}\n                    onChange={(e) => {\n                      const technicians = parseInt(e.target.value) || 1;\n                      const travelCost = (item.installationDistanceKm || 0) * (item.travelRatePerKm || 1.15);\n                      const serviceCost = technicians * (item.serviceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        numberOfTechnicians: technicians,\n                        totalInstallationCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt usługi jednego pracownika (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.serviceRatePerTechnician || 150}\n                    onChange={(e) => {\n                      const serviceRate = parseFloat(e.target.value) || 150;\n                      const travelCost = (item.installationDistanceKm || 0) * (item.travelRatePerKm || 1.15);\n                      const serviceCost = (item.numberOfTechnicians || 1) * serviceRate;\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        serviceRatePerTechnician: serviceRate,\n                        totalInstallationCost: totalCost\n                      });\n                    }}\n                    placeholder=\"150.00\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Stawka za km (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.travelRatePerKm || 1.15}\n                    onChange={(e) => {\n                      const rate = parseFloat(e.target.value) || 1.15;\n                      const travelCost = (item.installationDistanceKm || 0) * rate;\n                      const serviceCost = (item.numberOfTechnicians || 1) * (item.serviceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        travelRatePerKm: rate,\n                        totalInstallationCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1.15\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt montażu\n                  </label>\n                  <div className=\"text-lg font-medium text-foreground bg-background p-2 rounded border\">\n                    {formatCurrency(item.totalInstallationCost || 0)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    W obie strony\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Disassembly Cost Section */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Checkbox \n              id=\"includeDisassemblyCost\" \n              checked={item.includeDisassemblyCost || false}\n              onCheckedChange={(checked) => {\n                let totalCost = 0;\n                if (checked) {\n                  const travelCost = (item.disassemblyDistanceKm || 0) * (item.disassemblyTravelRatePerKm || 1.15);\n                  const serviceCost = (item.disassemblyNumberOfTechnicians || 1) * (item.disassemblyServiceRatePerTechnician || 150);\n                  totalCost = travelCost + serviceCost;\n                }\n                onUpdate({ \n                  ...item, \n                  includeDisassemblyCost: checked as boolean,\n                  disassemblyDistanceKm: checked ? (item.disassemblyDistanceKm || 0) : 0,\n                  disassemblyNumberOfTechnicians: checked ? (item.disassemblyNumberOfTechnicians || 1) : 1,\n                  disassemblyServiceRatePerTechnician: checked ? (item.disassemblyServiceRatePerTechnician || 150) : 150,\n                  disassemblyTravelRatePerKm: checked ? (item.disassemblyTravelRatePerKm || 1.15) : 1.15,\n                  totalDisassemblyCost: totalCost\n                });\n              }}\n            />\n            <label htmlFor=\"includeDisassemblyCost\" className=\"text-sm font-medium text-foreground flex items-center\">\n              <Car className=\"w-4 h-4 mr-2\" />\n              Uwzględnij koszty demontażu\n            </label>\n          </div>\n          \n          {item.includeDisassemblyCost && (\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość kilometrów (tam i z powrotem)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={item.disassemblyDistanceKm || \"\"}\n                    onChange={(e) => {\n                      const distance = parseFloat(e.target.value) || 0;\n                      const travelCost = distance * (item.disassemblyTravelRatePerKm || 1.15);\n                      const serviceCost = (item.disassemblyNumberOfTechnicians || 1) * (item.disassemblyServiceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        disassemblyDistanceKm: distance,\n                        totalDisassemblyCost: totalCost\n                      });\n                    }}\n                    placeholder=\"np. 50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość techników\n                  </label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    value={item.disassemblyNumberOfTechnicians || 1}\n                    onChange={(e) => {\n                      const technicians = parseInt(e.target.value) || 1;\n                      const travelCost = (item.disassemblyDistanceKm || 0) * (item.disassemblyTravelRatePerKm || 1.15);\n                      const serviceCost = technicians * (item.disassemblyServiceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        disassemblyNumberOfTechnicians: technicians,\n                        totalDisassemblyCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt usługi jednego pracownika (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.disassemblyServiceRatePerTechnician || 150}\n                    onChange={(e) => {\n                      const serviceRate = parseFloat(e.target.value) || 150;\n                      const travelCost = (item.disassemblyDistanceKm || 0) * (item.disassemblyTravelRatePerKm || 1.15);\n                      const serviceCost = (item.disassemblyNumberOfTechnicians || 1) * serviceRate;\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        disassemblyServiceRatePerTechnician: serviceRate,\n                        totalDisassemblyCost: totalCost\n                      });\n                    }}\n                    placeholder=\"150.00\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Stawka za km (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.disassemblyTravelRatePerKm || 1.15}\n                    onChange={(e) => {\n                      const rate = parseFloat(e.target.value) || 1.15;\n                      const travelCost = (item.disassemblyDistanceKm || 0) * rate;\n                      const serviceCost = (item.disassemblyNumberOfTechnicians || 1) * (item.disassemblyServiceRatePerTechnician || 150);\n                      const totalCost = travelCost + serviceCost;\n                      onUpdate({\n                        ...item,\n                        disassemblyTravelRatePerKm: rate,\n                        totalDisassemblyCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1.15\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt demontażu\n                  </label>\n                  <div className=\"text-lg font-medium text-foreground bg-background p-2 rounded border\">\n                    {formatCurrency(item.totalDisassemblyCost || 0)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    W obie strony\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Travel/Service Cost Section */}\n        <div className=\"mt-4\">\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Checkbox \n              id=\"includeTravelServiceCost\" \n              checked={item.includeTravelServiceCost || false}\n              onCheckedChange={(checked) => {\n                let totalCost = 0;\n                if (checked) {\n                  const travelCost = (item.travelServiceDistanceKm || 0) * (item.travelServiceTravelRatePerKm || 1.15);\n                  const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * (item.travelServiceServiceRatePerTechnician || 150);\n                  const costPerTrip = travelCost + serviceCost;\n                  totalCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n                }\n                onUpdate({ \n                  ...item, \n                  includeTravelServiceCost: checked as boolean,\n                  travelServiceDistanceKm: checked ? (item.travelServiceDistanceKm || 0) : 0,\n                  travelServiceNumberOfTechnicians: checked ? (item.travelServiceNumberOfTechnicians || 1) : 1,\n                  travelServiceServiceRatePerTechnician: checked ? (item.travelServiceServiceRatePerTechnician || 150) : 150,\n                  travelServiceTravelRatePerKm: checked ? (item.travelServiceTravelRatePerKm || 1.15) : 1.15,\n                  travelServiceNumberOfTrips: checked ? (item.travelServiceNumberOfTrips || 1) : 1,\n                  totalTravelServiceCost: totalCost\n                });\n              }}\n            />\n            <label htmlFor=\"includeTravelServiceCost\" className=\"text-sm font-medium text-foreground flex items-center\">\n              <Car className=\"w-4 h-4 mr-2\" />\n              Uwzględnij koszt dojazdu / serwis\n            </label>\n          </div>\n          \n          {item.includeTravelServiceCost && (\n            <div className=\"bg-muted/50 p-4 rounded-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość kilometrów (tam i z powrotem)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.1\"\n                    value={item.travelServiceDistanceKm || \"\"}\n                    onChange={(e) => {\n                      const distance = parseFloat(e.target.value) || 0;\n                      const travelCost = distance * (item.travelServiceTravelRatePerKm || 1.15);\n                      const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * (item.travelServiceServiceRatePerTechnician || 150);\n                      const costPerTrip = travelCost + serviceCost;\n                      const totalCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n                      onUpdate({\n                        ...item,\n                        travelServiceDistanceKm: distance,\n                        totalTravelServiceCost: totalCost\n                      });\n                    }}\n                    placeholder=\"np. 50\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość techników\n                  </label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    value={item.travelServiceNumberOfTechnicians || 1}\n                    onChange={(e) => {\n                      const technicians = parseInt(e.target.value) || 1;\n                      const travelCost = (item.travelServiceDistanceKm || 0) * (item.travelServiceTravelRatePerKm || 1.15);\n                      const serviceCost = technicians * (item.travelServiceServiceRatePerTechnician || 150);\n                      const costPerTrip = travelCost + serviceCost;\n                      const totalCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n                      onUpdate({\n                        ...item,\n                        travelServiceNumberOfTechnicians: technicians,\n                        totalTravelServiceCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt usługi jednego pracownika (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.travelServiceServiceRatePerTechnician || 150}\n                    onChange={(e) => {\n                      const serviceRate = parseFloat(e.target.value) || 150;\n                      const travelCost = (item.travelServiceDistanceKm || 0) * (item.travelServiceTravelRatePerKm || 1.15);\n                      const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * serviceRate;\n                      const costPerTrip = travelCost + serviceCost;\n                      const totalCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n                      onUpdate({\n                        ...item,\n                        travelServiceServiceRatePerTechnician: serviceRate,\n                        totalTravelServiceCost: totalCost\n                      });\n                    }}\n                    placeholder=\"150.00\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Stawka za km (zł)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.travelServiceTravelRatePerKm || 1.15}\n                    onChange={(e) => {\n                      const rate = parseFloat(e.target.value) || 1.15;\n                      const travelCost = (item.travelServiceDistanceKm || 0) * rate;\n                      const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * (item.travelServiceServiceRatePerTechnician || 150);\n                      const costPerTrip = travelCost + serviceCost;\n                      const totalCost = costPerTrip * (item.travelServiceNumberOfTrips || 1);\n                      onUpdate({\n                        ...item,\n                        travelServiceTravelRatePerKm: rate,\n                        totalTravelServiceCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1.15\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Ilość wyjazdów\n                  </label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    value={item.travelServiceNumberOfTrips || 1}\n                    onChange={(e) => {\n                      const trips = parseInt(e.target.value) || 1;\n                      const travelCost = (item.travelServiceDistanceKm || 0) * (item.travelServiceTravelRatePerKm || 1.15);\n                      const serviceCost = (item.travelServiceNumberOfTechnicians || 1) * (item.travelServiceServiceRatePerTechnician || 150);\n                      const costPerTrip = travelCost + serviceCost;\n                      const totalCost = costPerTrip * trips;\n                      onUpdate({\n                        ...item,\n                        travelServiceNumberOfTrips: trips,\n                        totalTravelServiceCost: totalCost\n                      });\n                    }}\n                    placeholder=\"1\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Koszt dojazdu / serwis\n                  </label>\n                  <div className=\"text-lg font-medium text-foreground bg-background p-2 rounded border\">\n                    {formatCurrency(item.totalTravelServiceCost || 0)}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    W obie strony\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Service Items Enable Section (for all equipment categories) */}\n        {selectedEquipment && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <Checkbox \n                id=\"includeServiceItems\" \n                checked={item.includeServiceItems || false}\n                onCheckedChange={(checked) => {\n                  let updatedItem = { ...item };\n                  \n                  if (checked) {\n                    // Load values from database if available\n                    if (serviceItems && (serviceItems as any[]).length > 0) {\n                      const item1Cost = (serviceItems as any[])[0]?.itemCost ? parseFloat((serviceItems as any[])[0].itemCost) : 0;\n                      const item2Cost = (serviceItems as any[])[1]?.itemCost ? parseFloat((serviceItems as any[])[1].itemCost) : 0;\n                      const item3Cost = (serviceItems as any[])[2]?.itemCost ? parseFloat((serviceItems as any[])[2].itemCost) : 0;\n                      const item4Cost = (serviceItems as any[])[3]?.itemCost ? parseFloat((serviceItems as any[])[3].itemCost) : 0;\n                      \n                      console.log('Loading service costs on enable:', { \n                        item1Cost, \n                        item2Cost, \n                        item3Cost, \n                        serviceItemsData: serviceItems,\n                        firstItem: (serviceItems as any[])[0],\n                        secondItem: (serviceItems as any[])[1],\n                        firstItemName: (serviceItems as any[])[0]?.itemName,\n                        secondItemName: (serviceItems as any[])[1]?.itemName,\n                        allItemNames: (serviceItems as any[]).map(item => item?.itemName)\n                      });\n                      \n                      // Refetch latest data from server\n                      refetchServiceItems();\n                      \n                      updatedItem = {\n                        ...updatedItem,\n                        serviceItem1Cost: item1Cost,\n                        serviceItem2Cost: item2Cost,\n                        serviceItem3Cost: item3Cost,\n                        serviceItem4Cost: item4Cost,\n                      };\n                    } else {\n                      // No data available yet, set to 0\n                      updatedItem = {\n                        ...updatedItem,\n                        serviceItem1Cost: 0,\n                        serviceItem2Cost: 0,\n                        serviceItem3Cost: 0,\n                        serviceItem4Cost: 0,\n                      };\n                    }\n                    \n                    // Don't calculate totalServiceItemsCost here - let the useEffect calculate it proportionally\n                    updatedItem.totalServiceItemsCost = 0; // Will be calculated by useEffect\n                  } else {\n                    updatedItem.totalServiceItemsCost = 0;\n                  }\n                  \n                  updatedItem.includeServiceItems = checked as boolean;\n                  onUpdate(updatedItem);\n                }}\n              />\n              <label htmlFor=\"includeServiceItems\" className=\"text-sm font-medium text-foreground\">\n                Uwzględnij koszty serwisowe\n              </label>\n            </div>\n          </div>\n        )}\n\n        {/* Service Items Configuration Section (for all equipment) */}\n        {selectedEquipment && item.includeServiceItems && (\n          <div className=\"mt-4\">\n            <div className=\"space-y-4 bg-muted p-4 rounded-lg\">\n              <div className=\"flex items-center space-x-2\">\n                <Settings className=\"w-4 h-4 text-muted-foreground\" />\n                <h4 className=\"font-medium text-foreground\">Koszty serwisowe</h4>\n              </div>\n\n              {/* Operating Hours Per Day Configuration - show different fields for vehicles vs equipment */}\n              <div className=\"mb-4 p-3 bg-background rounded border\">\n                <h5 className=\"text-sm font-medium text-foreground mb-2\">\n                  {isVehicle ? 'Założenia eksploatacji pojazdu' : 'Założenia pracy urządzenia'}\n                </h5>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {isVehicle ? (\n                    <>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Kilometry dziennie\n                        </label>\n                        <Input\n                          type=\"number\"\n                          step=\"1\"\n                          min=\"1\"\n                          value={item.kilometersPerDay || 100}\n                          onChange={(e) => {\n                            const km = parseFloat(e.target.value) || 100;\n                            onUpdate({\n                              ...item,\n                              kilometersPerDay: km\n                            });\n                          }}\n                          placeholder=\"100\"\n                        />\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Przewidywane kilometry dziennie\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Łączne kilometry\n                        </label>\n                        <div className=\"text-lg font-medium text-foreground bg-muted p-2 rounded border\">\n                          {(item.rentalPeriodDays * (item.kilometersPerDay || 100)).toFixed(0)} km\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {item.rentalPeriodDays} dni × {item.kilometersPerDay || 100} km/dzień\n                        </p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Godziny pracy dziennie\n                        </label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.5\"\n                          min=\"1\"\n                          max=\"24\"\n                          value={item.hoursPerDay || 8}\n                          onChange={(e) => {\n                            const hours = parseFloat(e.target.value) || 8;\n                            onUpdate({\n                              ...item,\n                              hoursPerDay: hours\n                            });\n                          }}\n                          placeholder=\"8\"\n                        />\n\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Łączne motogodziny\n                        </label>\n                        <div className=\"text-lg font-medium text-foreground bg-muted p-2 rounded border\">\n                          {(item.rentalPeriodDays * (item.hoursPerDay || 8)).toFixed(0)}h\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {item.rentalPeriodDays} dni × {item.hoursPerDay || 8}h/dzień\n                        </p>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    {serviceItems?.[0]?.itemName || 'Pozycja serwisowa 1'}\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.serviceItem1Cost || 0}\n                    onChange={(e) => {\n                      const cost = parseFloat(e.target.value) || 0;\n                      // Don't update totalServiceItemsCost here - let useEffect calculate it proportionally\n                      onUpdate({\n                        ...item,\n                        serviceItem1Cost: cost\n                      });\n                    }}\n                    placeholder={serviceItems[0]?.itemCost ? parseFloat(serviceItems[0].itemCost).toFixed(2) : \"0.00\"}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    {serviceItems?.[1]?.itemName || 'Pozycja serwisowa 2'}\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.serviceItem2Cost || 0}\n                    onChange={(e) => {\n                      const cost = parseFloat(e.target.value) || 0;\n                      // Don't update totalServiceItemsCost here - let useEffect calculate it proportionally\n                      onUpdate({\n                        ...item,\n                        serviceItem2Cost: cost\n                      });\n                    }}\n                    placeholder={serviceItems[1]?.itemCost ? parseFloat(serviceItems[1].itemCost).toFixed(2) : \"0.00\"}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    {serviceItems?.[2]?.itemName || 'Pozycja serwisowa 3'}\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.serviceItem3Cost || 0}\n                    onChange={(e) => {\n                      const cost = parseFloat(e.target.value) || 0;\n                      // Don't update totalServiceItemsCost here - let useEffect calculate it proportionally\n                      onUpdate({\n                        ...item,\n                        serviceItem3Cost: cost\n                      });\n                    }}\n                    placeholder={serviceItems[2]?.itemCost ? parseFloat(serviceItems[2].itemCost).toFixed(2) : \"0.00\"}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    {serviceItems?.[3]?.itemName || 'Pozycja serwisowa 4'}\n                  </label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={item.serviceItem4Cost || 0}\n                    onChange={(e) => {\n                      const cost = parseFloat(e.target.value) || 0;\n                      onUpdate({\n                        ...item,\n                        serviceItem4Cost: cost\n                      });\n                    }}\n                    placeholder={serviceItems[3]?.itemCost ? parseFloat(serviceItems[3].itemCost).toFixed(2) : \"0.00\"}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">\n                  Całkowity koszt serwisowy\n                </label>\n                <div className=\"text-lg font-medium text-foreground bg-background p-2 rounded border\">\n                  {formatCurrency(item.totalServiceItemsCost || 0)}\n                </div>\n                \n                {/* Service calculation details */}\n                {serviceCosts && (\n                  <div className=\"mt-3 p-3 bg-muted/50 rounded text-sm\">\n                    <h5 className=\"font-medium mb-2\">Szczegóły kalkulacji serwisu:</h5>\n                    <div className=\"text-xs text-muted-foreground mb-2 italic\">\n                      Bazowe założenie:<br />\n                      Nagrzewnice i Klimatyzacje - Serwis standardowy przy 12h pracy dziennie przez 365 dni = 100% kosztów serwisowych.<br />\n                      Agregaty i Maszty Oświetleniowe - przyjęty interwał zgodny z zaleceniami producenta.\n                    </div>\n                    <div className=\"space-y-1 text-muted-foreground\">\n                      {isVehicle ? (\n                        <>\n                          <div>Interwał serwisu: {serviceCosts?.serviceIntervalKm || 15000} km</div>\n                          <div>Przewidywane kilometry: {item.rentalPeriodDays * (item.kilometersPerDay || 100)} km</div>\n                          <div>Proporcja użytkowania: {((item.rentalPeriodDays * (item.kilometersPerDay || 100)) / (serviceCosts?.serviceIntervalKm || 15000) * 100).toFixed(2)}%</div>\n                          <div>Koszt serwisu na okres: {formatCurrency(item.totalServiceItemsCost || 0)}</div>\n                        </>\n                      ) : isGenerator || isLightingTower ? (\n                        <>\n                          <div>Interwał serwisu: {serviceCosts?.serviceIntervalMotohours || 500} mth (motogodzin)</div>\n                          <div>Przewidywane motogodziny: {item.rentalPeriodDays * (item.hoursPerDay || 8)} mth</div>\n                          <div>Proporcja użytkowania: {((item.rentalPeriodDays * (item.hoursPerDay || 8)) / (serviceCosts?.serviceIntervalMotohours || 500) * 100).toFixed(2)}%</div>\n                          <div>Koszt serwisu na okres: {formatCurrency(item.totalServiceItemsCost || 0)}</div>\n                        </>\n                      ) : (\n                        <>\n                          <div>Interwał serwisu: {serviceCosts?.serviceIntervalMonths || 12} miesięcy</div>\n                          <div>Przewidywane godziny pracy: {item.rentalPeriodDays * (item.hoursPerDay || 8)} h</div>\n                          <div>Proporcja użytkowania: {(() => {\n                            const serviceIntervalMonths = serviceCosts?.serviceIntervalMonths || 12;\n                            if (serviceIntervalMonths === 12) {\n                              // For yearly service interval, show proportion based on actual hours vs standard yearly hours\n                              const expectedHours = item.rentalPeriodDays * (item.hoursPerDay || 8);\n                              const standardYearlyHours = 365 * 12; // Standard 12 hours per day for full year (100%)\n                              return (expectedHours / standardYearlyHours * 100).toFixed(2);\n                            } else {\n                              // For other intervals, use the original calculation\n                              return ((item.rentalPeriodDays * (item.hoursPerDay || 8)) / (serviceIntervalMonths * 30 * (item.hoursPerDay || 8)) * 100).toFixed(2);\n                            }\n                          })()}%</div>\n                          <div>Koszt serwisu na okres: {formatCurrency(item.totalServiceItemsCost || 0)}</div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Maintenance costs section removed per user request */}\n        {false && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <Checkbox \n                id=\"includeMaintenanceCost\" \n                checked={item.includeMaintenanceCost || false}\n                onCheckedChange={(checked) => {\n                  let totalCost = 0;\n                  if (checked) {\n                    // Calculate total filters cost\n                    const filtersCost = \n                      (item.fuelFilter1Cost || 49) +\n                      (item.fuelFilter2Cost || 118) +\n                      (item.oilFilterCost || 45) +\n                      (item.airFilter1Cost || 105) +\n                      (item.airFilter2Cost || 54) +\n                      (item.engineFilterCost || 150);\n                    \n                    // Calculate oil cost \n                    const oilTotalCost = (item.oilCost || 162.44);\n                    \n                    // Calculate service work cost using actual values or defaults\n                    const serviceWorkCost = (item.serviceWorkHours !== undefined ? item.serviceWorkHours : 2) * (item.serviceWorkRatePerHour !== undefined ? item.serviceWorkRatePerHour : 100);\n                    \n                    // No travel cost for maintenance\n                    \n                    // Total maintenance cost for 500 hours\n                    const maintenanceCostPer500h = filtersCost + oilTotalCost + serviceWorkCost;\n                    \n                    // Calculate how much of maintenance cost applies to rental period\n                    const expectedHours = item.expectedMaintenanceHours || (item.rentalPeriodDays * (item.hoursPerDay || 8));\n                    if (expectedHours > 0) {\n                      totalCost = (maintenanceCostPer500h / 500) * expectedHours;\n                    }\n                  }\n                  onUpdate({ \n                    ...item, \n                    includeMaintenanceCost: checked as boolean,\n                    fuelFilter1Cost: checked ? (item.fuelFilter1Cost || 49) : undefined,\n                    fuelFilter2Cost: checked ? (item.fuelFilter2Cost || 118) : undefined,\n                    oilFilterCost: checked ? (item.oilFilterCost || 45) : undefined,\n                    airFilter1Cost: checked ? (item.airFilter1Cost || 105) : undefined,\n                    airFilter2Cost: checked ? (item.airFilter2Cost || 54) : undefined,\n                    engineFilterCost: checked ? (item.engineFilterCost || 150) : undefined,\n                    oilCost: checked ? (item.oilCost || 162.44) : undefined,\n                    oilQuantityLiters: checked ? (item.oilQuantityLiters || 14.7) : undefined,\n                    serviceWorkHours: checked ? (item.serviceWorkHours !== undefined ? item.serviceWorkHours : 2) : undefined,\n                    serviceWorkRatePerHour: checked ? (item.serviceWorkRatePerHour !== undefined ? item.serviceWorkRatePerHour : 100) : undefined,\n\n                    maintenanceIntervalHours: checked ? (item.maintenanceIntervalHours || 500) : undefined,\n                    expectedMaintenanceHours: checked ? (item.expectedMaintenanceHours || (item.rentalPeriodDays * (item.hoursPerDay || 8))) : undefined,\n                    totalMaintenanceCost: checked ? totalCost : 0\n                  });\n                }}\n              />\n              <label htmlFor=\"includeMaintenanceCost\" className=\"text-sm font-medium text-foreground flex items-center\">\n                <Wrench className=\"w-4 h-4 mr-2\" />\n                Uwzględnij koszty eksploatacji{isAirConditioner ? ' (wymiana filtrów)' : ' (co 500 mth)'}\n              </label>\n            </div>\n            \n            {item.includeMaintenanceCost && (\n              <div className=\"bg-muted/50 p-4 rounded-lg\">\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                  <div className=\"md:col-span-4\">\n                    <h4 className=\"font-medium text-foreground mb-3\">Filtra (6 szt.)</h4>\n                  </div>\n                  \n                  {/* Filter costs - 6 filters */}\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Paliwa 1\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.fuelFilter1Cost || 49}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 49;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"49.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Paliwa 2\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.fuelFilter2Cost || 118}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 118;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"118.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Oleju\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.oilFilterCost || 45}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 45;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"45.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Powietrza 1\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.airFilter1Cost || 105}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 105;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"105.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Powietrza 2\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.airFilter2Cost || 54}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 54;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"54.00\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      {\"Filtr Silnika\"} (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.engineFilterCost || 150}\n                      onChange={(e) => {\n                        const cost = parseFloat(e.target.value) || 150;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"150.00\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"mt-4 pt-4 border-t\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-foreground\">Suma filtrów:</span>\n                    <span className=\"text-lg font-bold text-primary\">\n                      {formatCurrency(\n                        (item.fuelFilter1Cost || 49) + \n                        (item.fuelFilter2Cost || 118) + \n                        (item.oilFilterCost || 45) + \n                        (item.airFilter1Cost || 105) + \n                        (item.airFilter2Cost || 54) + \n                        (item.engineFilterCost || 150)\n                      )}\n                    </span>\n                  </div>\n                </div>\n\n                {!isAirConditioner && (\n                  <>\n                    <Separator className=\"my-4\" />\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                      <div className=\"md:col-span-3\">\n                        <h4 className=\"font-medium text-foreground mb-3\">Olej</h4>\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Koszt oleju (zł)\n                        </label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={item.oilCost || 162.44}\n                          onChange={(e) => {\n                            const cost = parseFloat(e.target.value) || 162.44;\n                            // Maintenance costs removed per user request\n                          }}\n                          placeholder=\"162.44\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium text-foreground mb-2\">\n                          Ilość oleju (l)\n                        </label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.1\"\n                          value={item.oilQuantityLiters || 14.7}\n                          onChange={(e) => {\n                            const quantity = parseFloat(e.target.value) || 14.7;\n                            // Maintenance costs removed per user request\n                          }}\n                          placeholder=\"14.7\"\n                        />\n                      </div>\n                    </div>\n                  </>\n                )}\n\n                <Separator className=\"my-4\" />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                  <div className=\"md:col-span-2\">\n                    <h4 className=\"font-medium text-foreground mb-3\">Koszt pracy serwisanta</h4>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Czas pracy (h)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={item.serviceWorkHours ?? 2}\n                      onChange={(e) => {\n                        const hours = parseFloat(e.target.value);\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"0\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Stawka za godzinę (zł)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={item.serviceWorkRatePerHour ?? 100}\n                      onChange={(e) => {\n                        const rate = parseFloat(e.target.value);\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"0.00\"\n                    />\n                  </div>\n                </div>\n\n                <Separator className=\"my-4\" />\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Przewidywane motogodziny\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={item.expectedMaintenanceHours || (item.rentalPeriodDays * (item.hoursPerDay || 8))}\n                      onChange={(e) => {\n                        const hours = parseInt(e.target.value) || 0;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"Dni × godz/dzień\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Domyślnie: {item.rentalPeriodDays} dni × {item.hoursPerDay || 8} h/dzień\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Interwał serwisu (mth)\n                    </label>\n                    <Input\n                      type=\"number\"\n                      value={item.maintenanceIntervalHours || 500}\n                      onChange={(e) => {\n                        const interval = parseInt(e.target.value) || 500;\n                        // Maintenance costs removed per user request\n                      }}\n                      placeholder=\"500\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-foreground mb-2\">\n                      Koszt eksploatacji\n                    </label>\n                    <div className=\"text-lg font-bold text-primary bg-primary/10 p-3 rounded-lg border-2 border-primary/20\">\n                      {formatCurrency(item.totalMaintenanceCost || 0)}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Za okres wynajmu\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Additional Equipment and Accessories */}\n        {additionalEquipment.length > 0 && (\n          <div className=\"space-y-4\">\n            {additionalEquipment.filter(item => item.type === \"additional\").length > 0 && (\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={`additional-${item.id}`}\n                  checked={additionalEquipment.filter(item => item.type === \"additional\").some(add => item.selectedAdditional?.includes(add.id))}\n                  onCheckedChange={(checked) => {\n                    const additionalItems = additionalEquipment.filter(item => item.type === \"additional\");\n                    const allSelected = additionalItems.every(add => item.selectedAdditional?.includes(add.id));\n                    \n                    if (checked && !allSelected) {\n                      // Select all additional items\n                      const newSelected = [...(item.selectedAdditional || []), ...additionalItems.map(add => add.id)];\n                      const cost = additionalItems.reduce((sum, add) => sum + parseFloat(add.price), 0);\n                      onUpdate({\n                        ...item,\n                        selectedAdditional: newSelected,\n                        additionalCost: cost\n                      });\n                    } else {\n                      // Deselect all additional items\n                      const additionalIds = additionalItems.map(add => add.id);\n                      const newSelected = (item.selectedAdditional || []).filter(id => !additionalIds.includes(id));\n                      onUpdate({\n                        ...item,\n                        selectedAdditional: newSelected,\n                        additionalCost: 0\n                      });\n                    }\n                  }}\n                />\n                <label htmlFor={`additional-${item.id}`} className=\"text-lg font-semibold\">\n                  Wyposażenie dodatkowe\n                </label>\n              </div>\n            )}\n\n            {additionalEquipment.filter(item => item.type === \"additional\").map((additional) => (\n              <div key={additional.id} className=\"ml-6 flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id={`additional-item-${additional.id}`}\n                    checked={item.selectedAdditional?.includes(additional.id) || false}\n                    onCheckedChange={(checked) => {\n                      const currentSelected = item.selectedAdditional || [];\n                      let newSelected;\n                      let newCost = item.additionalCost || 0;\n                      \n                      if (checked) {\n                        newSelected = [...currentSelected, additional.id];\n                        newCost += parseFloat(additional.price);\n                      } else {\n                        newSelected = currentSelected.filter(id => id !== additional.id);\n                        newCost -= parseFloat(additional.price);\n                      }\n                      \n                      // Save selected items info in notes as JSON (hidden from user)\n                      const currentNotes = item.notes || \"\";\n                      const hiddenData = {\n                        selectedAdditional: newSelected,\n                        selectedAccessories: item.selectedAccessories || [],\n                        userNotes: currentNotes.startsWith('{\"selectedAdditional\"') ? \n                          JSON.parse(currentNotes).userNotes || \"\" : currentNotes\n                      };\n                      \n                      onUpdate({\n                        ...item,\n                        selectedAdditional: newSelected,\n                        additionalCost: Math.max(0, newCost),\n                        notes: JSON.stringify(hiddenData)\n                      });\n                    }}\n                  />\n                  <label htmlFor={`additional-item-${additional.id}`} className=\"font-medium\">\n                    {additional.name}\n                  </label>\n                </div>\n                <div className=\"text-sm font-semibold\">\n                  {parseFloat(additional.price).toFixed(2)} zł\n                </div>\n              </div>\n            ))}\n\n            {additionalEquipment.filter(item => item.type === \"accessories\").length > 0 && (\n              <div className=\"flex items-center space-x-2 mt-6\">\n                <Checkbox\n                  id={`accessories-${item.id}`}\n                  checked={additionalEquipment.filter(item => item.type === \"accessories\").some(acc => item.selectedAccessories?.includes(acc.id))}\n                  onCheckedChange={(checked) => {\n                    const accessoryItems = additionalEquipment.filter(item => item.type === \"accessories\");\n                    const allSelected = accessoryItems.every(acc => item.selectedAccessories?.includes(acc.id));\n                    \n                    if (checked && !allSelected) {\n                      // Select all accessories\n                      const newSelected = [...(item.selectedAccessories || []), ...accessoryItems.map(acc => acc.id)];\n                      const cost = accessoryItems.reduce((sum, acc) => sum + parseFloat(acc.price), 0);\n                      onUpdate({\n                        ...item,\n                        selectedAccessories: newSelected,\n                        accessoriesCost: cost\n                      });\n                    } else {\n                      // Deselect all accessories\n                      const accessoryIds = accessoryItems.map(acc => acc.id);\n                      const newSelected = (item.selectedAccessories || []).filter(id => !accessoryIds.includes(id));\n                      onUpdate({\n                        ...item,\n                        selectedAccessories: newSelected,\n                        accessoriesCost: 0\n                      });\n                    }\n                  }}\n                />\n                <label htmlFor={`accessories-${item.id}`} className=\"text-lg font-semibold\">\n                  Akcesoria\n                </label>\n              </div>\n            )}\n\n            {additionalEquipment.filter(item => item.type === \"accessories\").map((accessory) => (\n              <div key={accessory.id} className=\"ml-6 flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <Checkbox\n                    id={`accessory-item-${accessory.id}`}\n                    checked={item.selectedAccessories?.includes(accessory.id) || false}\n                    onCheckedChange={(checked) => {\n                      const currentSelected = item.selectedAccessories || [];\n                      let newSelected;\n                      let newCost = item.accessoriesCost || 0;\n                      \n                      if (checked) {\n                        newSelected = [...currentSelected, accessory.id];\n                        newCost += parseFloat(accessory.price);\n                      } else {\n                        newSelected = currentSelected.filter(id => id !== accessory.id);\n                        newCost -= parseFloat(accessory.price);\n                      }\n                      \n                      // Save selected items info in notes as JSON (hidden from user)  \n                      const currentNotes = item.notes || \"\";\n                      const hiddenData = {\n                        selectedAdditional: item.selectedAdditional || [],\n                        selectedAccessories: newSelected,\n                        userNotes: currentNotes.startsWith('{\"selectedAdditional\"') ? \n                          JSON.parse(currentNotes).userNotes || \"\" : currentNotes\n                      };\n                      \n                      onUpdate({\n                        ...item,\n                        selectedAccessories: newSelected,\n                        accessoriesCost: Math.max(0, newCost),\n                        notes: JSON.stringify(hiddenData)\n                      });\n                    }}\n                  />\n                  <label htmlFor={`accessory-item-${accessory.id}`} className=\"font-medium\">\n                    {accessory.name}\n                  </label>\n                </div>\n                <div className=\"text-sm font-semibold\">\n                  {parseFloat(accessory.price).toFixed(2)} zł\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"mt-4\">\n          <label className=\"block text-sm font-medium text-foreground mb-2\">Uwagi</label>\n          <Textarea\n            value={getUserNotes(item.notes || \"\")}\n            onChange={(e) => handleNotesChange(e.target.value)}\n            placeholder=\"Dodatkowe uwagi do pozycji\"\n            rows={2}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":106452},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"sebastian-popiel-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.add(\"light\");\n    }\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1468},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Check if error is due to pending approval\n  const needsApproval = error && (error as any).message?.includes(\"Account pending approval\");\n  \n  // If user is pending approval, return user data from error response\n  const pendingUser = needsApproval ? (error as any).user : null;\n\n  return {\n    user: user || pendingUser,\n    isLoading,\n    isAuthenticated: !!user || needsApproval,\n    needsApproval,\n    isApproved: (user || pendingUser)?.isApproved ?? false,\n  };\n}\n","size_bytes":664},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Plus,\n  Edit,\n  Trash2,\n  Save,\n  Settings,\n  Users,\n  Wrench,\n  DollarSign,\n  UserCheck,\n  UserX,\n  Shield,\n  AlertTriangle,\n  Copy,\n  ChevronUp,\n  RefreshCw,\n  ClipboardList,\n  Key\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport EquipmentAdditionalManager from \"@/components/equipment-additional-manager\";\nimport { ServiceCostsManager } from \"@/components/service-costs-manager\";\nimport { Link } from \"wouter\";\n\ninterface Equipment {\n  id: number;\n  name: string;\n  description?: string;\n  model?: string;\n  power?: string;\n  quantity: number;\n  availableQuantity: number;\n  // Technical specifications for generators\n  fuelConsumption75?: number;\n  dimensions?: string;\n  weight?: string;\n  engine?: string;\n  alternator?: string;\n  fuelTankCapacity?: number;\n\n  category: {\n    id: number;\n    name: string;\n  };\n  pricing: Array<{\n    id: number;\n    periodStart: number;\n    periodEnd?: number;\n    pricePerDay: string;\n    discountPercent: string;\n  }>;\n}\n\ninterface EquipmentCategory {\n  id: number;\n  name: string;\n  description?: string;\n}\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  role: string;\n  isActive?: boolean;\n  createdAt?: string;\n}\n\ninterface PricingSchema {\n  id: number;\n  name: string;\n  description?: string;\n  calculationMethod: string; // \"first_day\" or \"progressive\"\n  isDefault: boolean;\n  isActive: boolean;\n}\n\nconst equipmentSchema = z.object({\n  name: z.string().min(1, \"Nazwa jest wymagana\"),\n  description: z.string().default(\"\"),\n  model: z.string().default(\"\"),\n  power: z.string().default(\"\"),\n  quantity: z.number().min(0, \"Ilość musi być nieujemna\"),\n  availableQuantity: z.number().min(0, \"Dostępna ilość musi być nieujemna\"),\n  categoryId: z.number().min(1, \"Kategoria jest wymagana\"),\n  // Technical specifications - keep as strings for form compatibility\n  fuelConsumption75: z.string().default(\"\"),\n  dimensions: z.string().default(\"\"),\n  weight: z.string().default(\"\"),\n  engine: z.string().default(\"\"),\n  alternator: z.string().default(\"\"),\n  fuelTankCapacity: z.string().default(\"\"),\n});\n\nconst categorySchema = z.object({\n  name: z.string().min(1, \"Nazwa kategorii jest wymagana\"),\n  description: z.string().optional(),\n});\n\nconst pricingSchema = z.object({\n  equipmentId: z.number(),\n  periodStart: z.number().min(1, \"Początek okresu musi być większy od 0\"),\n  periodEnd: z.number().optional(),\n  pricePerDay: z.string().min(1, \"Cena jest wymagana\"),\n  discountPercent: z.string(),\n});\n\nconst pricingSchemaSchema = z.object({\n  name: z.string().min(1, \"Nazwa schematu jest wymagana\"),\n  description: z.string().optional(),\n  calculationMethod: z.enum([\"first_day\", \"progressive\"]),\n  isDefault: z.boolean().default(false),\n});\n\nexport default function Admin() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mutation to sync all equipment with admin settings\n  const syncAllEquipmentMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"/api/admin/sync-all-equipment\", \"POST\", {});\n      return response.json();\n    },\n    onSuccess: (data) => {\n      // Invalidate all equipment-related queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment/inactive\"] });\n      toast({\n        title: \"Sukces\",\n        description: data.message || \"Wszystkie urządzenia zostały zsynchronizowane\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zsynchronizować urządzeń\",\n        variant: \"destructive\",\n      });\n    },\n  });\n  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);\n  const [isEquipmentDialogOpen, setIsEquipmentDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [isPricingDialogOpen, setIsPricingDialogOpen] = useState(false);\n  const [editingPricing, setEditingPricing] = useState<any>(null);\n  const [selectedEquipmentForPricing, setSelectedEquipmentForPricing] = useState<Equipment | null>(null);\n  const [editingPricingTable, setEditingPricingTable] = useState<any>({});\n  const [localPrices, setLocalPrices] = useState<Record<number, number>>({});\n  const [localDiscounts, setLocalDiscounts] = useState<Record<number, number>>({});\n  const [isPricingSchemaDialogOpen, setIsPricingSchemaDialogOpen] = useState(false);\n  const [editingPricingSchema, setEditingPricingSchema] = useState<PricingSchema | null>(null);\n  const [selectedEquipmentForServiceCosts, setSelectedEquipmentForServiceCosts] = useState<Equipment | null>(null);\n  const [selectedEquipmentCategory, setSelectedEquipmentCategory] = useState<string>(\"all\");\n  const [isEquipmentAdditionalDialogOpen, setIsEquipmentAdditionalDialogOpen] = useState(false);\n  const [selectedEquipmentForAdditional, setSelectedEquipmentForAdditional] = useState<Equipment | null>(null);\n\n\n  // Allow development access to admin data  \n  const isDevelopment = true; // Force development mode for now\n  const canAccessAdmin = isDevelopment || (user as any)?.role === 'admin' || (user as any)?.role === 'kierownik';\n\n  const { data: equipment = [], isLoading: equipmentLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n    enabled: canAccessAdmin,\n  });\n\n  const { data: inactiveEquipment = [], isLoading: inactiveEquipmentLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment/inactive\"],\n    enabled: canAccessAdmin,\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<EquipmentCategory[]>({\n    queryKey: [\"/api/equipment-categories\"],\n    enabled: canAccessAdmin,\n  });\n\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: canAccessAdmin,\n  });\n\n  const { data: pricingSchemas = [], isLoading: pricingSchemasLoading } = useQuery<PricingSchema[]>({\n    queryKey: [\"/api/pricing-schemas\"],\n    enabled: canAccessAdmin,\n  });\n\n  // Initialize local prices when equipment is selected\n  useEffect(() => {\n    if (selectedEquipmentForPricing) {\n      const initialPrices: Record<number, number> = {};\n      const initialDiscounts: Record<number, number> = {};\n      selectedEquipmentForPricing.pricing.forEach(p => {\n        initialPrices[p.id] = parseFloat(p.pricePerDay || \"0\");\n        initialDiscounts[p.id] = parseFloat(p.discountPercent || \"0\");\n      });\n      setLocalPrices(initialPrices);\n      setLocalDiscounts(initialDiscounts);\n    } else {\n      setLocalPrices({});\n      setLocalDiscounts({});\n    }\n  }, [selectedEquipmentForPricing?.id]);\n\n  const equipmentForm = useForm<z.infer<typeof equipmentSchema>>({\n    resolver: zodResolver(equipmentSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      model: \"\",\n      power: \"\",\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: 23,\n      fuelConsumption75: \"\",\n      dimensions: \"\",\n      weight: \"\",\n      engine: \"\",\n      alternator: \"\",\n      fuelTankCapacity: \"\",\n    },\n  });\n\n  // Watch selected category to show relevant fields\n  const selectedCategoryId = equipmentForm.watch(\"categoryId\");\n  const selectedCategory = categories.find(cat => cat.id === selectedCategoryId);\n  const selectedCategoryName = selectedCategory?.name?.toLowerCase() || \"\";\n\n  const categoryForm = useForm<z.infer<typeof categorySchema>>({\n    resolver: zodResolver(categorySchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const pricingForm = useForm<z.infer<typeof pricingSchema>>({\n    resolver: zodResolver(pricingSchema),\n    defaultValues: {\n      equipmentId: 0,\n      periodStart: 1,\n      periodEnd: undefined,\n      pricePerDay: \"\",\n      discountPercent: \"0\",\n    },\n  });\n\n  const pricingSchemaForm = useForm<z.infer<typeof pricingSchemaSchema>>({\n    resolver: zodResolver(pricingSchemaSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      calculationMethod: \"progressive\",\n      isDefault: false,\n    },\n  });\n\n  const createEquipmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof equipmentSchema>) => {\n      const response = await apiRequest(\"/api/equipment\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      // Invalidate and refetch equipment data to ensure new equipment is available\n      await queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      await queryClient.refetchQueries({ queryKey: [\"/api/equipment\"] });\n      \n      toast({\n        title: \"Sukces\",\n        description: data.message || \"Sprzęt został dodany pomyślnie. Standardowe progi cenowe zostały utworzone automatycznie.\",\n      });\n      handleCloseEquipmentDialog();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEquipmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<z.infer<typeof equipmentSchema>> }) => {\n      console.log(\"updateEquipmentMutation called with:\", { id, data });\n      const response = await apiRequest(`/api/equipment/${id}`, \"PUT\", data);\n      console.log(\"API response:\", response);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Sprzęt został zaktualizowany pomyślnie\",\n      });\n      handleCloseEquipmentDialog();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEquipmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment/inactive\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Sprzęt został usunięty pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const permanentDeleteEquipmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment/${id}/permanent`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment/inactive\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Nieaktywny sprzęt został całkowicie usunięty wraz ze wszystkimi powiązanymi danymi\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się całkowicie usunąć nieaktywnego sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof categorySchema>) => {\n      const response = await apiRequest(\"/api/equipment-categories\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment-categories\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Kategoria została dodana pomyślnie\",\n      });\n      setIsCategoryDialogOpen(false);\n      categoryForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać kategorii\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment-categories/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment-categories\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Kategoria została usunięta pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      // Extract specific error message if available\n      let errorMessage = \"Nie udało się usunąć kategorii\";\n      if (error.message && error.message.includes(\"Nie można usunąć kategorii\")) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Błąd\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPricingMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof pricingSchema>) => {\n      const response = await apiRequest(\"/api/equipment-pricing\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Cennik został dodany pomyślnie\",\n      });\n      setIsPricingDialogOpen(false);\n      pricingForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać cennika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePricingMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: number; pricePerDay?: string; discountPercent?: string }) => {\n      const response = await apiRequest(`/api/equipment-pricing/${id}`, \"PATCH\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Cennik został zaktualizowany\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować cennika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePricingMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment-pricing/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Przedział cenowy został usunięty\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć przedziału cenowego\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Pricing Schema Mutations\n  const createPricingSchemaMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof pricingSchemaSchema>) => {\n      const response = await apiRequest(\"/api/pricing-schemas\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing-schemas\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Schemat cenowy został utworzony\",\n      });\n      setIsPricingSchemaDialogOpen(false);\n      pricingSchemaForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się utworzyć schematu cenowego\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePricingSchemaMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: number } & z.infer<typeof pricingSchemaSchema>) => {\n      const response = await apiRequest(`/api/pricing-schemas/${id}`, \"PATCH\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing-schemas\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Schemat cenowy został zaktualizowany\",\n      });\n      setIsPricingSchemaDialogOpen(false);\n      setEditingPricingSchema(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować schematu cenowego\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePricingSchemaMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/pricing-schemas/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pricing-schemas\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Schemat cenowy został usunięty\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć schematu cenowego\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ id, role }: { id: string; role: string }) => {\n      const response = await apiRequest(`/api/users/${id}/role`, \"PUT\", { role });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Rola użytkownika została zaktualizowana\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować roli użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleUserActiveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}/toggle-active`, \"PUT\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Status aktywności użytkownika został zmieniony\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zmienić statusu aktywności użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Użytkownik został usunięty\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEquipmentQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity, availableQuantity }: { id: number, quantity: number, availableQuantity: number }) => {\n      const response = await apiRequest(`/api/equipment/${id}/quantity`, \"PATCH\", { quantity, availableQuantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Ilość urządzenia została zaktualizowana\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować ilości urządzenia\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditEquipment = (equipment: Equipment) => {\n    console.log(\"handleEditEquipment called with:\", equipment);\n    setSelectedEquipment(equipment);\n    const formData = {\n      name: equipment.name || \"\",\n      description: equipment.description || \"\",\n      model: equipment.model || \"\",\n      power: equipment.power || \"\",\n      quantity: equipment.quantity || 1,\n      availableQuantity: equipment.availableQuantity || 1,\n      categoryId: equipment.category?.id || 23,\n      fuelConsumption75: equipment.fuelConsumption75?.toString() || \"\",\n      dimensions: equipment.dimensions || \"\",\n      weight: equipment.weight || \"\",\n      engine: equipment.engine || \"\",\n      alternator: equipment.alternator || \"\",\n      fuelTankCapacity: equipment.fuelTankCapacity?.toString() || \"\",\n    };\n    console.log(\"Resetting form with data:\", formData);\n    console.log(\"Category ID being set:\", formData.categoryId);\n    equipmentForm.reset(formData);\n    \n    // Force form validation after reset\n    setTimeout(() => {\n      console.log(\"Form state after reset:\", {\n        values: equipmentForm.getValues(),\n        errors: equipmentForm.formState.errors,\n        isValid: equipmentForm.formState.isValid\n      });\n    }, 100);\n    \n    setIsEquipmentDialogOpen(true);\n  };\n\n  const handleCopyEquipment = (equipment: Equipment) => {\n    try {\n      setSelectedEquipment(null); // Clear selected to create new equipment\n      \n      const formData = {\n        name: `${equipment.name} (kopia)`,\n        description: equipment.description || \"\",\n        model: equipment.model || \"\",\n        power: equipment.power || \"\",\n        quantity: equipment.quantity,\n        availableQuantity: equipment.quantity, // Set available to same as quantity for new equipment\n        categoryId: equipment.category.id,\n        fuelConsumption75: equipment.fuelConsumption75 ? equipment.fuelConsumption75.toString() : \"\",\n        dimensions: equipment.dimensions || \"\",\n        weight: equipment.weight || \"\",\n        engine: equipment.engine || \"\",\n        alternator: equipment.alternator || \"\",\n        fuelTankCapacity: equipment.fuelTankCapacity ? equipment.fuelTankCapacity.toString() : \"\",\n      };\n      \n      equipmentForm.reset(formData);\n      setIsEquipmentDialogOpen(true);\n    } catch (error) {\n      console.error(\"Błąd podczas kopiowania sprzętu:\", error);\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się skopiować sprzętu\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCloseEquipmentDialog = () => {\n    setIsEquipmentDialogOpen(false);\n    setSelectedEquipment(null);\n    equipmentForm.reset({\n      name: \"\",\n      description: \"\",\n      model: \"\",\n      power: \"\",\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: 23,\n      fuelConsumption75: \"\",\n      dimensions: \"\",\n      weight: \"\",\n      engine: \"\",\n      alternator: \"\",\n      fuelTankCapacity: \"\",\n    });\n  };\n\n  const handleDeleteEquipment = (id: number) => {\n    if (confirm(\"Czy na pewno chcesz usunąć ten sprzęt?\")) {\n      deleteEquipmentMutation.mutate(id);\n    }\n  };\n\n  const handleDeleteUser = (id: string, userName: string) => {\n    if (confirm(`Czy na pewno chcesz usunąć użytkownika ${userName}?`)) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  const onSubmitEquipment = (data: z.infer<typeof equipmentSchema>) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Selected equipment:\", selectedEquipment);\n    \n    // Convert string fields to numbers where needed for API\n    const processedData = {\n      ...data,\n      fuelConsumption75: data.fuelConsumption75 ? parseFloat(data.fuelConsumption75) : undefined,\n      fuelTankCapacity: data.fuelTankCapacity ? parseFloat(data.fuelTankCapacity) : undefined,\n    };\n    \n    if (selectedEquipment) {\n      console.log(\"Calling updateEquipmentMutation with:\", { id: selectedEquipment.id, data: processedData });\n      updateEquipmentMutation.mutate({ id: selectedEquipment.id, data: processedData });\n    } else {\n      console.log(\"Calling createEquipmentMutation with:\", processedData);\n      createEquipmentMutation.mutate(processedData);\n    }\n  };\n\n  const onSubmitCategory = (data: z.infer<typeof categorySchema>) => {\n    createCategoryMutation.mutate(data);\n  };\n\n  const onSubmitPricing = (data: z.infer<typeof pricingSchema>) => {\n    createPricingMutation.mutate(data);\n  };\n\n  const createStandardPricing = async (equipmentId: number) => {\n    // Create placeholder pricing that REQUIRES admin to set proper values\n    // All pricing starts with same price and 0% discount - admin MUST configure actual values\n    const placeholderPricing = [\n      { periodStart: 1, periodEnd: 2, pricePerDay: \"100\", discountPercent: \"0\" },\n      { periodStart: 3, periodEnd: 7, pricePerDay: \"100\", discountPercent: \"0\" },\n      { periodStart: 8, periodEnd: 18, pricePerDay: \"100\", discountPercent: \"0\" },\n      { periodStart: 19, periodEnd: 29, pricePerDay: \"100\", discountPercent: \"0\" },\n      { periodStart: 30, periodEnd: undefined, pricePerDay: \"100\", discountPercent: \"0\" },\n    ];\n\n    for (const pricing of placeholderPricing) {\n      createPricingMutation.mutate({\n        equipmentId,\n        ...pricing\n      });\n    }\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(parseFloat(amount));\n  };\n\n  const getPeriodText = (start: number, end?: number) => {\n    if (!end) return `${start}+ dni`;\n    return `${start}-${end} dni`;\n  };\n\n  // Check if user is admin (allow development access)\n  if (false) { // Disabled for development\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <Settings className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">Brak uprawnień</h2>\n            <p className=\"text-muted-foreground\">Nie masz uprawnień administratora aby uzyskać dostęp do tej strony.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (equipmentLoading || categoriesLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">Panel Zarządzania Wypożyczalnią</h1>\n          <p className=\"text-muted-foreground mt-2\">Zarządzaj sprzętem, cenami i ustawieniami systemu</p>\n        </div>\n\n\n\n\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Equipment Management */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle className=\"flex items-center\">\n                    <Wrench className=\"w-5 h-5 mr-2\" />\n                    Zarządzanie sprzętem\n                  </CardTitle>\n                </div>\n                <div className=\"flex gap-4 items-center mt-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <label className=\"text-sm font-medium\">Kategoria:</label>\n                    <Select value={selectedEquipmentCategory} onValueChange={setSelectedEquipmentCategory}>\n                      <SelectTrigger className=\"w-48\">\n                        <SelectValue placeholder=\"Wybierz kategorię\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Wszystkie kategorie</SelectItem>\n                        {categories.map((category) => (\n                          <SelectItem key={category.id} value={category.id.toString()}>\n                            {category.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end items-center\">{/* Move buttons to the right */}\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => syncAllEquipmentMutation.mutate()}\n                      disabled={syncAllEquipmentMutation.isPending}\n                      title=\"Zsynchronizuj wszystkie urządzenia z ustawieniami panelu admina\"\n                      className=\"text-blue-600 border-blue-200 hover:bg-blue-50\"\n                    >\n                      {syncAllEquipmentMutation.isPending ? (\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"></div>\n                      ) : (\n                        <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Synchronizuj wszystkie\n                    </Button>\n                    <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Kategoria\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Dodaj kategorię</DialogTitle>\n                        </DialogHeader>\n                        <Form {...categoryForm}>\n                          <form onSubmit={categoryForm.handleSubmit(onSubmitCategory)} className=\"space-y-4\">\n                            <FormField\n                              control={categoryForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Nazwa kategorii</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={categoryForm.control}\n                              name=\"description\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Opis</FormLabel>\n                                  <FormControl>\n                                    <Textarea {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <Button type=\"submit\" disabled={createCategoryMutation.isPending}>\n                              {createCategoryMutation.isPending ? \"Dodawanie...\" : \"Dodaj kategorię\"}\n                            </Button>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n\n                    <Dialog open={isEquipmentDialogOpen} onOpenChange={(open) => {\n                      if (open) {\n                        setIsEquipmentDialogOpen(true);\n                      } else {\n                        handleCloseEquipmentDialog();\n                      }\n                    }}>\n                      <DialogTrigger asChild>\n                        <Button size=\"sm\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Sprzęt\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                        <DialogHeader>\n                          <DialogTitle>\n                            {selectedEquipment ? \"Edytuj sprzęt\" : \"Dodaj sprzęt\"}\n                          </DialogTitle>\n                        </DialogHeader>\n                        <div className=\"max-h-[calc(90vh-120px)] overflow-y-auto pr-2\">\n                          <Form {...equipmentForm}>\n                            <form onSubmit={(e) => {\n                              console.log(\"Form submit event triggered\");\n                              console.log(\"Form errors:\", equipmentForm.formState.errors);\n                              equipmentForm.handleSubmit(onSubmitEquipment)(e);\n                            }} className=\"space-y-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"name\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Nazwa</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"categoryId\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Kategoria</FormLabel>\n                                    <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value ? field.value.toString() : \"\"}>\n                                      <FormControl>\n                                        <SelectTrigger>\n                                          <SelectValue placeholder=\"Wybierz kategorię\" />\n                                        </SelectTrigger>\n                                      </FormControl>\n                                      <SelectContent>\n                                        {categories.map((category) => (\n                                          <SelectItem key={category.id} value={category.id.toString()}>\n                                            {category.name}\n                                          </SelectItem>\n                                        ))}\n                                      </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"model\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Model</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"power\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Moc</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} placeholder=\"np. 90.18 kW\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"quantity\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Ilość całkowita</FormLabel>\n                                    <FormControl>\n                                      <Input \n                                        type=\"number\" \n                                        {...field} \n                                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"availableQuantity\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Ilość dostępna</FormLabel>\n                                    <FormControl>\n                                      <Input \n                                        type=\"number\" \n                                        {...field} \n                                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                      />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <FormField\n                              control={equipmentForm.control}\n                              name=\"description\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Opis</FormLabel>\n                                  <FormControl>\n                                    <Textarea {...field} />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            {/* Technical specifications - conditional based on category */}\n                            {selectedCategoryName && (\n                              <div className=\"space-y-4\">\n                                <h3 className=\"text-lg font-medium text-foreground\">\n                                  Parametry techniczne ({selectedCategory?.name})\n                                </h3>\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                {/* Show power field for equipment that has power (generators, heaters, AC units) */}\n                                {(selectedCategoryName.includes(\"agregat\") || \n                                  selectedCategoryName.includes(\"nagrzewnic\") || \n                                  selectedCategoryName.includes(\"klimat\")) && (\n                                  <FormField\n                                    control={equipmentForm.control}\n                                    name=\"power\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Moc</FormLabel>\n                                        <FormControl>\n                                          <Input {...field} placeholder=\"np. 90.18 kW\" />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                )}\n\n                                {/* Equipment with fuel consumption - show for agregat, nagrzewnic, maszty oświetleniowe, and pojazdy */}\n                                {(selectedCategoryName.includes(\"agregat\") || selectedCategoryName.includes(\"nagrzewnic\") || selectedCategoryName.includes(\"oświetlen\") || selectedCategoryName.includes(\"pojazd\")) && (\n                                  <>\n                                    <FormField\n                                      control={equipmentForm.control}\n                                      name=\"fuelConsumption75\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>\n                                            {selectedCategoryName.includes(\"oświetlen\") ? \"Spalanie paliwa (l/h)\" : \n                                             selectedCategoryName.includes(\"pojazd\") ? \"Spalanie paliwa (l/100km)\" :\n                                             \"Spalanie przy 75% obciążenia (l/h)\"}\n                                          </FormLabel>\n                                          <FormControl>\n                                            <Input \n                                              type=\"number\" \n                                              step=\"0.1\"\n                                              placeholder={selectedCategoryName.includes(\"oświetlen\") ? \"np. 4.2\" : \n                                                         selectedCategoryName.includes(\"pojazd\") ? \"np. 8.5\" :\n                                                         \"np. 35.3\"}\n                                              {...field}\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    <FormField\n                                      control={equipmentForm.control}\n                                      name=\"fuelTankCapacity\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>\n                                            {selectedCategoryName.includes(\"pojazd\") ? \"Pojemność zbiornika paliwa (l)\" : \"Pojemność zbiornika paliwa (l)\"}\n                                          </FormLabel>\n                                          <FormControl>\n                                            <Input \n                                              type=\"number\" \n                                              placeholder={selectedCategoryName.includes(\"oświetlen\") ? \"np. 60\" : \n                                                         selectedCategoryName.includes(\"pojazd\") ? \"np. 80\" :\n                                                         \"np. 350\"}\n                                              {...field}\n                                            />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    <FormField\n                                      control={equipmentForm.control}\n                                      name=\"engine\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Silnik</FormLabel>\n                                          <FormControl>\n                                            <Input {...field} placeholder=\"np. VOLVO TAD734GE\" />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                    <FormField\n                                      control={equipmentForm.control}\n                                      name=\"alternator\"\n                                      render={({ field }) => (\n                                        <FormItem>\n                                          <FormLabel>Alternator</FormLabel>\n                                          <FormControl>\n                                            <Input {...field} placeholder=\"np. LEROY SOMER\" />\n                                          </FormControl>\n                                          <FormMessage />\n                                        </FormItem>\n                                      )}\n                                    />\n                                  </>\n                                )}\n\n                                {/* Common fields for all equipment types */}\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"dimensions\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Wymiary (DxSxW mm)</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} placeholder=\"np. 3600x1100x1800\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"weight\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Waga (kg)</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} placeholder=\"np. 1850\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n                              </div>\n                            )}\n\n                            <div className=\"flex justify-end space-x-2\">\n                              <Button \n                                type=\"button\" \n                                variant=\"outline\" \n                                onClick={() => {\n                                  setIsEquipmentDialogOpen(false);\n                                  setSelectedEquipment(null);\n                                  equipmentForm.reset();\n                                }}\n                              >\n                                Anuluj\n                              </Button>\n                              <Button \n                                type=\"submit\" \n                                disabled={createEquipmentMutation.isPending || updateEquipmentMutation.isPending}\n                                onClick={() => {\n                                  console.log(\"Button clicked!\");\n                                  console.log(\"Is form valid:\", equipmentForm.formState.isValid);\n                                  console.log(\"Form values:\", equipmentForm.getValues());\n                                }}\n                              >\n                                {selectedEquipment \n                                  ? (updateEquipmentMutation.isPending ? \"Aktualizowanie...\" : \"Aktualizuj\")\n                                  : (createEquipmentMutation.isPending ? \"Dodawanie...\" : \"Dodaj\")\n                                }\n                              </Button>\n                            </div>\n                          </form>\n                        </Form>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nazwa</TableHead>\n                        <TableHead>Kategoria</TableHead>\n                        <TableHead>Ilość</TableHead>\n                        <TableHead>Dostępne</TableHead>\n                        <TableHead>Akcje</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {equipment.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                            Brak sprzętu do wyświetlenia\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        equipment\n                          .filter((item) => selectedEquipmentCategory === \"all\" || item.category.id.toString() === selectedEquipmentCategory)\n                          .map((item) => (\n                          <TableRow key={item.id}>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{item.name}</div>\n                                {item.model && (\n                                  <div className=\"text-sm text-muted-foreground\">{item.model}</div>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{item.category.name}</Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                value={item.quantity}\n                                onChange={(e) => {\n                                  const newQuantity = parseInt(e.target.value) || 0;\n                                  updateEquipmentQuantityMutation.mutate({\n                                    id: item.id,\n                                    quantity: newQuantity,\n                                    availableQuantity: Math.min(item.availableQuantity, newQuantity)\n                                  });\n                                }}\n                                className=\"w-20\"\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <Input\n                                type=\"number\"\n                                min=\"0\"\n                                max={item.quantity}\n                                value={item.availableQuantity}\n                                onChange={(e) => {\n                                  const newAvailable = parseInt(e.target.value) || 0;\n                                  if (newAvailable <= item.quantity) {\n                                    updateEquipmentQuantityMutation.mutate({\n                                      id: item.id,\n                                      quantity: item.quantity,\n                                      availableQuantity: newAvailable\n                                    });\n                                  }\n                                }}\n                                className={`w-20 ${item.availableQuantity > 0 ? \"text-green-600\" : \"text-red-600\"}`}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex space-x-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => handleEditEquipment(item)}\n                                  title=\"Edytuj\"\n                                  className=\"h-7 w-7 p-0\"\n                                >\n                                  <Edit className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => handleCopyEquipment(item)}\n                                  title=\"Kopiuj\"\n                                  className=\"text-blue-600 hover:text-blue-700 h-7 w-7 p-0\"\n                                >\n                                  <Copy className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => {\n                                    setSelectedEquipmentForPricing(item);\n                                    setLocalPrices({});\n                                    // Scroll to pricing section\n                                    const pricingSection = document.querySelector('[data-pricing-section]');\n                                    if (pricingSection) {\n                                      pricingSection.scrollIntoView({ behavior: 'smooth' });\n                                    }\n                                  }}\n                                  title=\"Edytuj cennik\"\n                                  className=\"h-7 w-7 p-0\"\n                                >\n                                  <DollarSign className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => {\n                                    setSelectedEquipmentForAdditional(item);\n                                    setIsEquipmentAdditionalDialogOpen(true);\n                                  }}\n                                  title=\"Wyposażenie dodatkowe i akcesoria\"\n                                  className=\"text-green-600 hover:text-green-700 h-7 w-7 p-0\"\n                                >\n                                  <Plus className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => {\n                                    setSelectedEquipmentForServiceCosts(item);\n                                    // Scroll to service costs section\n                                    setTimeout(() => {\n                                      const serviceCostsSection = document.querySelector('[data-service-costs-section]');\n                                      if (serviceCostsSection) {\n                                        serviceCostsSection.scrollIntoView({ behavior: 'smooth' });\n                                      }\n                                    }, 100);\n                                  }}\n                                  title=\"Koszty serwisu\"\n                                  className=\"text-purple-600 hover:text-purple-700 h-7 w-7 p-0\"\n                                >\n                                  <Wrench className=\"w-3 h-3\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"xs\"\n                                  onClick={() => handleDeleteEquipment(item.id)}\n                                  className=\"text-red-600 hover:text-red-700 h-7 w-7 p-0\"\n                                  title=\"Usuń\"\n                                >\n                                  <Trash2 className=\"w-3 h-3\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Equipment Additional and Accessories Management Dialog */}\n            <Dialog open={isEquipmentAdditionalDialogOpen} onOpenChange={setIsEquipmentAdditionalDialogOpen}>\n              <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle className=\"flex items-center\">\n                    <Plus className=\"w-5 h-5 mr-2\" />\n                    Wyposażenie dodatkowe i akcesoria - {selectedEquipmentForAdditional?.name}\n                  </DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-6\">\n                  {selectedEquipmentForAdditional && (\n                    <EquipmentAdditionalManager\n                      key={selectedEquipmentForAdditional.id}\n                      equipmentId={selectedEquipmentForAdditional.id}\n                      equipmentName={selectedEquipmentForAdditional.name}\n                    />\n                  )}\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Settings and Users */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2\" />\n                  Kategorie sprzętu\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {categories.map((category) => (\n                    <div key={category.id} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-foreground\">{category.name}</p>\n                        {category.description && (\n                          <p className=\"text-sm text-muted-foreground\">{category.description}</p>\n                        )}\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          if (confirm(`Czy na pewno chcesz usunąć kategorię \"${category.name}\"? Uwaga: nie można usunąć kategorii, która ma przypisany sprzęt.`)) {\n                            deleteCategoryMutation.mutate(category.id);\n                          }\n                        }}\n                        className=\"text-red-600 hover:text-red-700\"\n                        disabled={deleteCategoryMutation.isPending}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Inactive Equipment Management */}\n            {inactiveEquipment.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <AlertTriangle className=\"w-5 h-5 mr-2 text-orange-500\" />\n                    Nieaktywny sprzęt\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Sprzęt oznaczony jako nieaktywny. Możesz go bezpiecznie usunąć jeśli nie jest używany w wycenach.\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {inactiveEquipment.map((item) => (\n                      <div key={item.id} className=\"flex items-center justify-between p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium text-foreground\">{item.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {item.category?.name} • {item.model}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(`Czy na pewno chcesz CAŁKOWICIE usunąć nieaktywny sprzęt \"${item.name}\"? Ta operacja usunie wszystkie powiązane dane włącznie z pozycjami w wycenach. Tej operacji nie można cofnąć!`)) {\n                                permanentDeleteEquipmentMutation.mutate(item.id);\n                              }\n                            }}\n                            className=\"text-red-600 hover:text-red-700\"\n                            disabled={permanentDeleteEquipmentMutation.isPending}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"w-5 h-5 mr-2\" />\n                  Ustawienia cenowe\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">Stawka VAT (%)</label>\n                  <Input type=\"number\" defaultValue=\"23\" />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">Domyślna waluta</label>\n                  <Select defaultValue=\"PLN\">\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"PLN\">PLN</SelectItem>\n                      <SelectItem value=\"EUR\">EUR</SelectItem>\n                      <SelectItem value=\"USD\">USD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button className=\"w-full\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Zapisz ustawienia\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Pricing Schemas Management */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle className=\"flex items-center\">\n                    <DollarSign className=\"w-5 h-5 mr-2\" />\n                    Schematy cenowe\n                  </CardTitle>\n                  <Dialog open={isPricingSchemaDialogOpen} onOpenChange={setIsPricingSchemaDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Nowy schemat\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingPricingSchema ? \"Edytuj schemat cenowy\" : \"Dodaj schemat cenowy\"}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <Form {...pricingSchemaForm}>\n                        <form onSubmit={pricingSchemaForm.handleSubmit((data) => {\n                          if (editingPricingSchema) {\n                            updatePricingSchemaMutation.mutate({ id: editingPricingSchema.id, ...data });\n                          } else {\n                            createPricingSchemaMutation.mutate(data);\n                          }\n                        })} className=\"space-y-4\">\n                          <FormField\n                            control={pricingSchemaForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Nazwa schematu</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"np. Standard, Business, Premium\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={pricingSchemaForm.control}\n                            name=\"description\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Opis</FormLabel>\n                                <FormControl>\n                                  <Textarea {...field} placeholder=\"Opis schematu cenowego\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={pricingSchemaForm.control}\n                            name=\"calculationMethod\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Metoda naliczania rabatu</FormLabel>\n                                <FormControl>\n                                  <Select value={field.value} onValueChange={field.onChange}>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Wybierz metodę\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"progressive\">\n                                        <div className=\"flex flex-col\">\n                                          <span>Rabat progowy</span>\n                                          <span className=\"text-xs text-muted-foreground\">\n                                            Rabat naliczany po osiągnięciu progów dni\n                                          </span>\n                                        </div>\n                                      </SelectItem>\n                                      <SelectItem value=\"first_day\">\n                                        <div className=\"flex flex-col\">\n                                          <span>Rabat od pierwszego dnia</span>\n                                          <span className=\"text-xs text-muted-foreground\">\n                                            Rabat naliczany od pierwszego dnia wynajmu\n                                          </span>\n                                        </div>\n                                      </SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={pricingSchemaForm.control}\n                            name=\"isDefault\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                                <div className=\"space-y-0.5\">\n                                  <FormLabel className=\"text-base\">\n                                    Domyślny schemat\n                                  </FormLabel>\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    Automatycznie wybierany przy tworzeniu nowych wycen\n                                  </div>\n                                </div>\n                                <FormControl>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={field.value}\n                                    onChange={field.onChange}\n                                    className=\"w-4 h-4\"\n                                  />\n                                </FormControl>\n                              </FormItem>\n                            )}\n                          />\n                          <div className=\"flex justify-end space-x-2\">\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              onClick={() => {\n                                setIsPricingSchemaDialogOpen(false);\n                                setEditingPricingSchema(null);\n                                pricingSchemaForm.reset();\n                              }}\n                            >\n                              Anuluj\n                            </Button>\n                            <Button \n                              type=\"submit\" \n                              disabled={createPricingSchemaMutation.isPending || updatePricingSchemaMutation.isPending}\n                            >\n                              {editingPricingSchema ? \"Zaktualizuj\" : \"Dodaj\"}\n                            </Button>\n                          </div>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {pricingSchemas.map((schema) => (\n                    <div key={schema.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div>\n                          <div className=\"flex items-center gap-2\">\n                            <h4 className=\"font-medium\">{schema.name}</h4>\n                            {schema.isDefault && (\n                              <Badge variant=\"default\">Domyślny</Badge>\n                            )}\n                            {!schema.isActive && (\n                              <Badge variant=\"destructive\">Nieaktywny</Badge>\n                            )}\n                          </div>\n                          {schema.description && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{schema.description}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingPricingSchema(schema);\n                              pricingSchemaForm.reset({\n                                name: schema.name,\n                                description: schema.description || \"\",\n                                calculationMethod: schema.calculationMethod as \"first_day\" | \"progressive\",\n                                isDefault: schema.isDefault,\n                              });\n                              setIsPricingSchemaDialogOpen(true);\n                            }}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(`Czy na pewno chcesz usunąć schemat \"${schema.name}\"?`)) {\n                                deletePricingSchemaMutation.mutate(schema.id);\n                              }\n                            }}\n                            className=\"text-red-600 hover:text-red-700\"\n                            disabled={deletePricingSchemaMutation.isPending || schema.isDefault}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"mt-3 p-3 bg-muted rounded-lg\">\n                        <h5 className=\"text-sm font-medium mb-1\">Metoda naliczania rabatu:</h5>\n                        <div className=\"text-sm\">\n                          {schema.calculationMethod === \"first_day\" ? (\n                            <span className=\"text-green-600 font-medium\">\n                              ✓ Rabat od pierwszego dnia\n                            </span>\n                          ) : (\n                            <span className=\"text-blue-600 font-medium\">\n                              ✓ Rabat progowy\n                            </span>\n                          )}\n                        </div>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {schema.calculationMethod === \"first_day\" \n                            ? \"Rabaty z indywidualnych ustawień urządzenia są naliczane od pierwszego dnia wynajmu.\"\n                            : \"Rabaty z indywidualnych ustawień urządzenia są naliczane po osiągnięciu określonych progów dni.\"\n                          }\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n\n\n            {/* MaintenanceDefaultsCard removed per user request */}\n\n\n          </div>\n        </div>\n\n        {/* Pricing Tables Section */}\n        <div className=\"mb-8\" data-pricing-section>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                <span>Edycja cenników</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {equipment\n                    .filter((item) => selectedEquipmentCategory === \"all\" || item.category.id.toString() === selectedEquipmentCategory)\n                    .map((item) => (\n                    <Button\n                      key={item.id}\n                      variant={selectedEquipmentForPricing?.id === item.id ? \"default\" : \"outline\"}\n                      onClick={() => {\n                        setSelectedEquipmentForPricing(item);\n                        setLocalPrices({});\n                      }}\n                      className=\"mb-2\"\n                    >\n                      {item.name}\n                    </Button>\n                  ))}\n                </div>\n\n                {selectedEquipmentForPricing && (\n                  <div className=\"border rounded-lg p-4\">\n                    <h3 className=\"text-lg font-semibold mb-4\">\n                      {selectedEquipmentForPricing.name} - zasilane paliwem:\n                    </h3>\n                    \n                    {/* Warning for default pricing */}\n                    {selectedEquipmentForPricing.pricing.some(p => p.pricePerDay === \"100.00\" && p.discountPercent === \"0.00\") && (\n                      <div className=\"mb-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md\">\n                        <div className=\"flex items-start\">\n                          <AlertTriangle className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5 mr-2 flex-shrink-0\" />\n                          <div>\n                            <h4 className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                              Urządzenie wymaga konfiguracji cennika\n                            </h4>\n                            <p className=\"text-sm text-yellow-700 dark:text-yellow-300 mt-1\">\n                              To urządzenie ma domyślne ceny (100 zł/doba, 0% rabat). Zaktualizuj ceny i rabaty zgodnie z rzeczywistymi wartościami przed użyciem w ofertach.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"overflow-x-auto\">\n                      <table className=\"w-full border-collapse\">\n                        <thead>\n                          <tr className=\"bg-gray-100 dark:bg-gray-800\">\n                            <th className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-semibold\">\n                              Okres wynajmu\n                            </th>\n                            <th className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-semibold\">\n                              Cena netto / doba\n                            </th>\n                            <th className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-semibold\">\n                              Obniżka kwotowa\n                            </th>\n                            <th className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-left font-semibold\">\n                              Procent zniżki\n                            </th>\n                            <th className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-center font-semibold\">\n                              Akcje\n                            </th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {selectedEquipmentForPricing.pricing.length === 0 ? (\n                            <tr>\n                              <td colSpan={5} className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-center text-gray-500\">\n                                Brak cennika. Dodaj pierwszy przedział cenowy.\n                              </td>\n                            </tr>\n                          ) : (\n                            selectedEquipmentForPricing.pricing\n                              .sort((a, b) => a.periodStart - b.periodStart)\n                              .map((pricing, index) => {\n                                // Find the base price (first period, usually 1-2 days)\n                                const sortedPricing = selectedEquipmentForPricing.pricing.sort((a, b) => a.periodStart - b.periodStart);\n                                const basePrice = localPrices[sortedPricing[0]?.id] ?? parseFloat(sortedPricing[0]?.pricePerDay || \"0\");\n                                const currentPrice = localPrices[pricing.id] ?? parseFloat(pricing.pricePerDay || \"0\");\n                                const discountAmount = basePrice - currentPrice;\n                                const discountPercent = basePrice > 0 ? ((discountAmount / basePrice) * 100).toFixed(2) : \"0\";\n                                \n                                const getPeriodText = (start: number, end?: number) => {\n                                  if (start === 1 && end === 2) return \"1 - 2 dni\";\n                                  if (start === 3 && end === 7) return \"3 - 7 dni\";\n                                  if (start === 8 && end === 18) return \"8 - 18 dni\";\n                                  if (start === 19 && end === 29) return \"19 - 29 dni\";\n                                  if (start === 30 && !end) return \"30 dni i więcej\";\n                                  return end ? `${start} - ${end} dni` : `${start} dni i więcej`;\n                                };\n                                \n                                const periodText = getPeriodText(pricing.periodStart, pricing.periodEnd);\n\n                              return (\n                                <tr key={pricing.id}>\n                                  <td className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 font-medium\">\n                                    {periodText}\n                                  </td>\n                                  <td className=\"border border-gray-300 dark:border-gray-600 px-4 py-2\">\n                                    <Input\n                                      type=\"number\"\n                                      step=\"0.01\"\n                                      value={localPrices[pricing.id] ?? currentPrice}\n                                      onChange={(e) => {\n                                        const newPrice = parseFloat(e.target.value) || 0;\n                                        // Calculate and update corresponding discount\n                                        const newDiscountPercent = basePrice > 0 ? ((basePrice - newPrice) / basePrice) * 100 : 0;\n                                        setLocalPrices(prev => ({\n                                          ...prev,\n                                          [pricing.id]: newPrice\n                                        }));\n                                        setLocalDiscounts(prev => ({\n                                          ...prev,\n                                          [pricing.id]: Math.max(0, newDiscountPercent)\n                                        }));\n                                      }}\n                                      onBlur={(e) => {\n                                        const newPrice = parseFloat(e.target.value) || 0;\n                                        const originalPrice = parseFloat(pricing.pricePerDay || \"0\");\n                                        if (newPrice !== originalPrice) {\n                                          // Calculate new discount percentage based on price change\n                                          const newDiscountPercent = basePrice > 0 ? ((basePrice - newPrice) / basePrice) * 100 : 0;\n                                          updatePricingMutation.mutate({\n                                            id: pricing.id,\n                                            pricePerDay: newPrice.toString(),\n                                            discountPercent: Math.max(0, newDiscountPercent).toFixed(2)\n                                          });\n                                        }\n                                      }}\n                                      onKeyDown={(e) => {\n                                        if (e.key === 'Enter') {\n                                          const newPrice = parseFloat(e.currentTarget.value) || 0;\n                                          const originalPrice = parseFloat(pricing.pricePerDay || \"0\");\n                                          if (newPrice !== originalPrice) {\n                                            // Calculate new discount percentage based on price change\n                                            const newDiscountPercent = basePrice > 0 ? ((basePrice - newPrice) / basePrice) * 100 : 0;\n                                            updatePricingMutation.mutate({\n                                              id: pricing.id,\n                                              pricePerDay: newPrice.toString(),\n                                              discountPercent: Math.max(0, newDiscountPercent).toFixed(2)\n                                            });\n                                          }\n                                        }\n                                      }}\n                                      className=\"w-20 text-right\"\n                                    />\n                                    <span className=\"ml-1\">zł</span>\n                                  </td>\n                                  <td className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-right\">\n                                    {discountAmount.toFixed(0)} zł\n                                  </td>\n                                  <td className=\"border border-gray-300 dark:border-gray-600 px-4 py-2\">\n                                    <Input\n                                      type=\"number\"\n                                      step=\"0.01\"\n                                      value={localDiscounts[pricing.id] ?? parseFloat(pricing.discountPercent || \"0\")}\n                                      onChange={(e) => {\n                                        const newDiscountPercent = parseFloat(e.target.value) || 0;\n                                        // Calculate and update corresponding price\n                                        const newPrice = basePrice * (1 - newDiscountPercent / 100);\n                                        setLocalDiscounts(prev => ({\n                                          ...prev,\n                                          [pricing.id]: newDiscountPercent\n                                        }));\n                                        setLocalPrices(prev => ({\n                                          ...prev,\n                                          [pricing.id]: newPrice\n                                        }));\n                                      }}\n                                      onBlur={(e) => {\n                                        const newDiscountPercent = parseFloat(e.target.value.replace(',', '.')) || 0;\n                                        const originalDiscountPercent = parseFloat(pricing.discountPercent || \"0\");\n                                        if (Math.abs(newDiscountPercent - originalDiscountPercent) > 0.01) {\n                                          // Calculate new price based on discount\n                                          const newPrice = basePrice * (1 - newDiscountPercent / 100);\n                                          updatePricingMutation.mutate({\n                                            id: pricing.id,\n                                            pricePerDay: newPrice.toFixed(2),\n                                            discountPercent: newDiscountPercent.toFixed(2)\n                                          });\n                                        }\n                                      }}\n                                      onKeyDown={(e) => {\n                                        if (e.key === 'Enter') {\n                                          const newDiscountPercent = parseFloat(e.currentTarget.value.replace(',', '.')) || 0;\n                                          const originalDiscountPercent = parseFloat(pricing.discountPercent || \"0\");\n                                          if (Math.abs(newDiscountPercent - originalDiscountPercent) > 0.01) {\n                                            // Calculate new price based on discount\n                                            const newPrice = basePrice * (1 - newDiscountPercent / 100);\n                                            updatePricingMutation.mutate({\n                                              id: pricing.id,\n                                              pricePerDay: newPrice.toFixed(2),\n                                              discountPercent: newDiscountPercent.toFixed(2)\n                                            });\n                                          }\n                                        }\n                                      }}\n                                      className=\"w-20 text-right\"\n                                    />\n                                    <span className=\"ml-1\">%</span>\n                                  </td>\n                                  <td className=\"border border-gray-300 dark:border-gray-600 px-4 py-2 text-center\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => {\n                                        if (confirm(`Czy na pewno chcesz usunąć przedział \"${periodText}\"?`)) {\n                                          deletePricingMutation.mutate(pricing.id);\n                                        }\n                                      }}\n                                      className=\"text-red-600 hover:text-red-700\"\n                                      disabled={deletePricingMutation.isPending}\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </td>\n                                </tr>\n                              );\n                            })\n                          )}\n                        </tbody>\n                      </table>\n                    </div>\n\n                    <div className=\"mt-4 flex gap-2\">\n                      <Button\n                        onClick={() => {\n                          pricingForm.setValue('equipmentId', selectedEquipmentForPricing.id);\n                          setIsPricingDialogOpen(true);\n                        }}\n                        size=\"sm\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Dodaj przedział\n                      </Button>\n                      \n                      {selectedEquipmentForPricing.pricing.length === 0 && (\n                        <Button\n                          onClick={() => createStandardPricing(selectedEquipmentForPricing.id)}\n                          size=\"sm\"\n                          variant=\"outline\"\n                        >\n                          Utwórz standardowe progi\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Pricing Dialog */}\n        <Dialog open={isPricingDialogOpen} onOpenChange={setIsPricingDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Dodaj cennik</DialogTitle>\n            </DialogHeader>\n            <Form {...pricingForm}>\n              <form onSubmit={pricingForm.handleSubmit(onSubmitPricing)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={pricingForm.control}\n                    name=\"periodStart\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Początek okresu (dni)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            {...field} \n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={pricingForm.control}\n                    name=\"periodEnd\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Koniec okresu (dni)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            {...field} \n                            onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                            placeholder=\"Puste dla 30+\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={pricingForm.control}\n                  name=\"pricePerDay\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Cena za dobę (PLN)</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"350.00\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={pricingForm.control}\n                  name=\"discountPercent\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Procent rabatu (%)</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"0\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsPricingDialogOpen(false)}>\n                    Anuluj\n                  </Button>\n                  <Button type=\"submit\" disabled={createPricingMutation.isPending}>\n                    {createPricingMutation.isPending ? \"Dodawanie...\" : \"Dodaj cennik\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Service Costs Section */}\n      <div className=\"mb-8\" data-service-costs-section>\n        {selectedEquipmentForServiceCosts && (\n          <ServiceCostsManager\n            equipment={selectedEquipmentForServiceCosts as any}\n            onClose={() => setSelectedEquipmentForServiceCosts(null)}\n          />\n        )}\n      </div>\n\n\n\n\n\n      {/* Scroll to Top Button */}\n      <div className=\"flex justify-center mb-8\">\n        <Button\n          variant=\"outline\"\n          onClick={() => {\n            window.scrollTo({ top: 0, behavior: 'smooth' });\n          }}\n          className=\"flex items-center space-x-2 px-6 py-3\"\n        >\n          <ChevronUp className=\"w-4 h-4\" />\n          <span>Do góry</span>\n        </Button>\n      </div>\n\n    </div>\n  );\n}\n\n\n\n// MaintenanceDefaultsCard component removed per user request\n\n","size_bytes":101364},"client/src/pages/create-quote.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Plus, Trash2, Save, FileText, Calculator } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport QuoteItem from \"@/components/quote-item\";\n\nconst clientSchema = z.object({\n  companyName: z.string().optional(),\n  nip: z.string().optional(),\n  contactPerson: z.string().optional(),\n  phone: z.string().optional(),\n  email: z.string().optional().refine((email) => !email || z.string().email().safeParse(email).success, {\n    message: \"Nieprawidłowy format email\",\n  }),\n  address: z.string().optional(),\n}).refine(\n  (data) => {\n    // Require at least one field to be filled\n    return data.companyName || data.contactPerson || data.phone || data.email;\n  },\n  {\n    message: \"Wypełnij przynajmniej jedno pole: nazwę firmy, osobę kontaktową, telefon lub email\",\n    path: [\"companyName\"],\n  }\n);\n\ninterface QuoteItemData {\n  id: string;\n  equipmentId: number;\n  quantity: number;\n  rentalPeriodDays: number;\n  pricePerDay: number;\n  discountPercent: number;\n  totalPrice: number;\n  notes?: string;\n  // Fuel cost fields for generators (motohours-based)\n  fuelConsumptionLH?: number;\n  fuelPricePerLiter?: number;\n  hoursPerDay?: number;\n  totalFuelCost?: number;\n  includeFuelCost?: boolean;\n  \n  // Fuel cost fields for vehicles (kilometers-based)\n  fuelConsumptionPer100km?: number;\n  kilometersPerDay?: number;\n  calculationType?: 'motohours' | 'kilometers';\n\n  // Installation cost fields\n  includeInstallationCost?: boolean;\n  installationDistanceKm?: number;\n  numberOfTechnicians?: number;\n  serviceRatePerTechnician?: number;\n  travelRatePerKm?: number;\n  totalInstallationCost?: number;\n\n  // Disassembly cost fields\n  includeDisassemblyCost?: boolean;\n  disassemblyDistanceKm?: number;\n  disassemblyNumberOfTechnicians?: number;\n  disassemblyServiceRatePerTechnician?: number;\n  disassemblyTravelRatePerKm?: number;\n  totalDisassemblyCost?: number;\n\n  // Travel/Service cost fields\n  includeTravelServiceCost?: boolean;\n  travelServiceDistanceKm?: number;\n  travelServiceNumberOfTechnicians?: number;\n  travelServiceServiceRatePerTechnician?: number;\n  travelServiceTravelRatePerKm?: number;\n  travelServiceNumberOfTrips?: number;\n  totalTravelServiceCost?: number;\n\n  // Additional equipment and accessories\n  selectedAdditional?: number[]; // IDs of selected additional equipment\n  selectedAccessories?: number[]; // IDs of selected accessories\n  additionalCost?: number;\n  accessoriesCost?: number;\n  \n  // Maintenance and service costs\n  includeMaintenanceCost?: boolean;\n  totalMaintenanceCost?: number;\n  includeServiceItems?: boolean;\n  serviceItem1Cost?: number;\n  serviceItem2Cost?: number;\n  serviceItem3Cost?: number;\n  totalServiceItemsCost?: number;\n}\n\ninterface EquipmentAdditional {\n  id: number;\n  equipmentId: number;\n  type: \"additional\" | \"accessories\";\n  name: string;\n  price: string;\n  position: number;\n}\n\ninterface Equipment {\n  id: number;\n  name: string;\n  category: {\n    id: number;\n    name: string;\n  };\n  pricing: Array<{\n    periodStart: number;\n    periodEnd?: number;\n    pricePerDay: string;\n    discountPercent: string;\n  }>;\n  fuelConsumption75?: number; // l/h at 75% load for generators\n  additionalEquipment?: EquipmentAdditional[];\n}\n\ninterface PricingSchema {\n  id: number;\n  name: string;\n  description: string | null;\n  calculationMethod: string; // \"first_day\" or \"progressive\"\n  isDefault: boolean;\n  isActive: boolean;\n}\n\ninterface CreateQuoteProps {\n  editingQuote?: any;\n}\n\nexport default function CreateQuote({ editingQuote }: CreateQuoteProps = {}) {\n  const [quoteItems, setQuoteItems] = useState<QuoteItemData[]>([]);\n  const [selectedPricingSchemaId, setSelectedPricingSchemaId] = useState<number | null>(null);\n  \n  // Initialize quote items when editing\n  useEffect(() => {\n    if (editingQuote && editingQuote.items && quoteItems.length === 0) {\n      const initialItems = editingQuote.items.map((item: any) => ({\n        id: item.id.toString(),\n        equipmentId: item.equipment.id,\n        quantity: item.quantity,\n        rentalPeriodDays: item.rentalPeriodDays,\n        pricePerDay: parseFloat(item.pricePerDay),\n        discountPercent: parseFloat(item.discountPercent),\n        totalPrice: parseFloat(item.totalPrice),\n        notes: item.notes || \"\",\n        fuelConsumptionLH: parseFloat(item.fuelConsumptionLH) || 0,\n        fuelPricePerLiter: parseFloat(item.fuelPricePerLiter) || 6.50,\n        hoursPerDay: item.hoursPerDay || 8,\n        totalFuelCost: parseFloat(item.totalFuelCost) || 0,\n        includeFuelCost: item.includeFuelCost || false,\n        includeInstallationCost: item.includeTravelCost || false,\n        installationDistanceKm: parseFloat(item.travelDistanceKm) || 0,\n        numberOfTechnicians: item.numberOfTechnicians || 1,\n        serviceRatePerTechnician: parseFloat(item.hourlyRatePerTechnician) || 150,\n        travelRatePerKm: parseFloat(item.travelRatePerKm) || 1.15,\n        totalInstallationCost: parseFloat(item.totalTravelCost) || 0,\n        selectedAdditional: (() => {\n          try {\n            if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n              const notesData = JSON.parse(item.notes);\n              return notesData.selectedAdditional || [];\n            }\n          } catch (e) {\n            console.log('Error parsing notes for additional equipment:', e);\n          }\n          return [];\n        })(),\n        selectedAccessories: (() => {\n          try {\n            if (item.notes && item.notes.startsWith('{\"selectedAdditional\"')) {\n              const notesData = JSON.parse(item.notes);\n              return notesData.selectedAccessories || [];\n            }\n          } catch (e) {\n            console.log('Error parsing notes for accessories:', e);\n          }\n          return [];\n        })(),\n        additionalCost: parseFloat(item.additionalCost) || 0,\n        accessoriesCost: parseFloat(item.accessoriesCost) || 0,\n        includeMaintenanceCost: item.includeMaintenanceCost || false,\n        totalMaintenanceCost: parseFloat(item.totalMaintenanceCost) || 0,\n        includeServiceItems: item.includeServiceItems || false,\n        serviceItem1Cost: parseFloat(item.serviceItem1Cost) || 0,\n        serviceItem2Cost: parseFloat(item.serviceItem2Cost) || 0,\n        serviceItem3Cost: parseFloat(item.serviceItem3Cost) || 0,\n        totalServiceItemsCost: parseFloat(item.totalServiceItemsCost) || 0,\n        // Vehicle-specific fields\n        fuelConsumptionPer100km: parseFloat(item.fuelConsumptionPer100km) || 0,\n        kilometersPerDay: parseInt(item.kilometersPerDay) || 0,\n        calculationType: item.calculationType || 'motohours',\n      }));\n      setQuoteItems(initialItems);\n    }\n  }, [editingQuote]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Get equipment ID from URL params\n  const urlParams = new URLSearchParams(window.location.search);\n  const equipmentIdFromUrl = urlParams.get('equipment');\n\n  const { data: equipment = [] } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n  });\n\n  const { data: pricingSchemas = [] } = useQuery<PricingSchema[]>({\n    queryKey: [\"/api/pricing-schemas\"],\n  });\n\n  // Set default pricing schema when data loads\n  useEffect(() => {\n    if (pricingSchemas.length > 0 && selectedPricingSchemaId === null) {\n      const defaultSchema = pricingSchemas.find(schema => schema.isDefault) || pricingSchemas[0];\n      setSelectedPricingSchemaId(defaultSchema.id);\n    }\n  }, [pricingSchemas, selectedPricingSchemaId]);\n  \n  // Auto-add equipment when coming from equipment page\n  useEffect(() => {\n    if (equipmentIdFromUrl && equipment.length > 0 && quoteItems.length === 0) {\n      const selectedEquipment = equipment.find(eq => eq.id === parseInt(equipmentIdFromUrl));\n      if (selectedEquipment) {\n        console.log('Auto-adding equipment:', selectedEquipment.name);\n        const newItem: QuoteItemData = {\n          id: Date.now().toString(),\n          equipmentId: selectedEquipment.id,\n          quantity: 1,\n          rentalPeriodDays: 1,\n          pricePerDay: 0,\n          discountPercent: 0,\n          totalPrice: 0,\n          notes: \"\",\n          fuelConsumptionLH: selectedEquipment.fuelConsumption75 || 0,\n          fuelPricePerLiter: 6.50, // Default fuel price\n          hoursPerDay: selectedEquipment.category.name === 'Klimatyzacje' ? 12 : 8,\n          totalFuelCost: 0,\n          includeFuelCost: selectedEquipment.category.name === 'Agregaty prądotwórcze' || selectedEquipment.category.name === 'Maszty oświetleniowe' || selectedEquipment.category.name === 'Pojazdy' || selectedEquipment.category.name === 'Klimatyzacje',\n          // Vehicle-specific fields\n          fuelConsumptionPer100km: 0,\n          kilometersPerDay: 0,\n          calculationType: selectedEquipment.category.name === 'Pojazdy' ? 'kilometers' : 'motohours',\n          includeInstallationCost: false,\n          installationDistanceKm: 0,\n          numberOfTechnicians: 1,\n          serviceRatePerTechnician: 150,\n          travelRatePerKm: 1.15,\n          totalInstallationCost: 0,\n          selectedAdditional: [],\n          selectedAccessories: [],\n          additionalCost: 0,\n          accessoriesCost: 0\n        };\n        setQuoteItems([newItem]);\n        \n        // Remove equipment param from URL after a delay to ensure state is updated\n        setTimeout(() => {\n          const newUrl = window.location.pathname;\n          window.history.replaceState({}, '', newUrl);\n        }, 100);\n      }\n    }\n  }, [equipmentIdFromUrl, equipment, quoteItems.length]);\n\n  const form = useForm<z.infer<typeof clientSchema>>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      companyName: \"\",\n      nip: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n    },\n  });\n\n  // Update form values when editing quote data is available\n  useEffect(() => {\n    if (editingQuote?.client) {\n      form.reset({\n        companyName: editingQuote.client.companyName || \"\",\n        nip: editingQuote.client.nip || \"\",\n        contactPerson: editingQuote.client.contactPerson || \"\",\n        phone: editingQuote.client.phone || \"\",\n        email: editingQuote.client.email || \"\",\n        address: editingQuote.client.address || \"\",\n      });\n    }\n  }, [editingQuote, form]);\n\n  const createClientMutation = useMutation({\n    mutationFn: async (clientData: z.infer<typeof clientSchema>) => {\n      const response = await apiRequest(\"/api/clients\", \"POST\", clientData);\n      return response.json();\n    },\n  });\n\n  const createQuoteMutation = useMutation({\n    mutationFn: async (quoteData: any) => {\n      const method = editingQuote ? \"PUT\" : \"POST\";\n      const url = editingQuote ? `/api/quotes/${editingQuote.id}` : \"/api/quotes\";\n      const response = await apiRequest(url, method, quoteData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/quotes\"] });\n      toast({\n        title: \"Sukces\",\n        description: editingQuote ? \"Wycena została zaktualizowana pomyślnie\" : \"Wycena została utworzona pomyślnie\",\n      });\n      if (!editingQuote) {\n        // Reset form only for new quotes\n        form.reset();\n        setQuoteItems([]);\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Błąd\",\n        description: editingQuote ? \"Nie udało się zaktualizować wyceny\" : \"Nie udało się utworzyć wyceny\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addQuoteItem = () => {\n    const newItem: QuoteItemData = {\n      id: Date.now().toString(),\n      equipmentId: 0,\n      quantity: 1,\n      rentalPeriodDays: 1,\n      pricePerDay: 0,\n      discountPercent: 0,\n      totalPrice: 0,\n      notes: \"\",\n      fuelConsumptionLH: 0,\n      fuelPricePerLiter: 6.50,\n      hoursPerDay: 8,\n      totalFuelCost: 0,\n      includeFuelCost: false,\n\n      includeInstallationCost: false,\n      installationDistanceKm: 0,\n      numberOfTechnicians: 1,\n      serviceRatePerTechnician: 150,\n      travelRatePerKm: 1.15,\n      totalInstallationCost: 0,\n      selectedAdditional: [],\n      selectedAccessories: [],\n      additionalCost: 0,\n      accessoriesCost: 0\n    };\n    setQuoteItems([...quoteItems, newItem]);\n  };\n\n  const removeQuoteItem = (id: string) => {\n    if (quoteItems.length > 1) {\n      setQuoteItems(quoteItems.filter(item => item.id !== id));\n    }\n  };\n\n  const updateQuoteItem = (id: string, updatedItem: QuoteItemData) => {\n    // Force complete deep copy using JSON serialization to ensure React detects all changes\n    const deepCopy = JSON.parse(JSON.stringify(updatedItem));\n    deepCopy._timestamp = Date.now(); // Add unique identifier to force re-render\n    \n    setQuoteItems(prevItems => {\n      const newItems = prevItems.map(item => \n        item.id === id ? deepCopy : item\n      );\n      return newItems;\n    });\n  };\n\n  const calculateTotals = () => {\n    const totalNet = quoteItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);\n    const vatAmount = totalNet * 0.23;\n    const totalGross = totalNet + vatAmount;\n    \n    return {\n      totalNet,\n      vatAmount,\n      totalGross,\n    };\n  };\n\n  const { totalNet, vatAmount, totalGross } = calculateTotals();\n\n  const onSubmit = async (clientData: z.infer<typeof clientSchema>) => {\n    if (quoteItems.length === 0) {\n      toast({\n        title: \"Błąd\",\n        description: \"Dodaj przynajmniej jedną pozycję do wyceny\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (quoteItems.some(item => item.equipmentId === 0)) {\n      toast({\n        title: \"Błąd\",\n        description: \"Wszystkie pozycje muszą mieć wybrany sprzęt\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      let clientId: number;\n      \n      if (editingQuote) {\n        // Update existing client data\n        const updateClientResponse = await apiRequest(`/api/clients/${editingQuote.client.id}`, \"PUT\", clientData);\n        const updatedClient = await updateClientResponse.json();\n        clientId = updatedClient.id;\n      } else {\n        // Create new client\n        const client = await createClientMutation.mutateAsync(clientData);\n        clientId = client.id;\n      }\n      \n      // Create or update quote\n      const quoteData = {\n        clientId,\n        status: \"draft\",\n        totalNet: totalNet.toString(),\n        vatRate: \"23\",\n        totalGross: totalGross.toString(),\n        notes: \"\",\n      };\n\n      const quote = await createQuoteMutation.mutateAsync(quoteData);\n      \n      if (editingQuote) {\n        // Delete existing quote items first\n        for (const existingItem of editingQuote.items) {\n          await apiRequest(`/api/quote-items/${existingItem.id}`, \"DELETE\", null);\n        }\n      }\n      \n      // Create new quote items\n      for (const item of quoteItems) {\n        console.log(\"Creating quote item:\", item);\n        const itemData = {\n          quoteId: quote.id,\n          equipmentId: item.equipmentId,\n          quantity: item.quantity,\n          rentalPeriodDays: item.rentalPeriodDays,\n          pricePerDay: item.pricePerDay.toString(),\n          discountPercent: item.discountPercent.toString(),\n          totalPrice: item.totalPrice.toString(),\n          notes: item.notes || \"\",\n          includeFuelCost: item.includeFuelCost,\n          fuelConsumptionLH: item.fuelConsumptionLH?.toString() || \"0\",\n          fuelPricePerLiter: item.fuelPricePerLiter?.toString() || \"6.50\",\n          hoursPerDay: item.hoursPerDay || 8,\n          totalFuelCost: (item.totalFuelCost || 0).toString(),\n          // Vehicle-specific fields for kilometers-based calculation\n          fuelConsumptionPer100km: item.fuelConsumptionPer100km?.toString() || \"0\",\n          kilometersPerDay: item.kilometersPerDay || 0,\n          calculationType: item.calculationType || \"motohours\",\n          includeInstallationCost: item.includeInstallationCost,\n          installationDistanceKm: (item.installationDistanceKm || 0).toString(),\n          numberOfTechnicians: item.numberOfTechnicians || 1,\n          serviceRatePerTechnician: (item.serviceRatePerTechnician || 150).toString(),\n          travelRatePerKm: (item.travelRatePerKm || 1.15).toString(),\n          totalInstallationCost: (item.totalInstallationCost || 0).toString(),\n          // Disassembly cost fields\n          includeDisassemblyCost: item.includeDisassemblyCost,\n          disassemblyDistanceKm: (item.disassemblyDistanceKm || 0).toString(),\n          disassemblyNumberOfTechnicians: item.disassemblyNumberOfTechnicians || 1,\n          disassemblyServiceRatePerTechnician: (item.disassemblyServiceRatePerTechnician || 150).toString(),\n          disassemblyTravelRatePerKm: (item.disassemblyTravelRatePerKm || 1.15).toString(),\n          totalDisassemblyCost: (item.totalDisassemblyCost || 0).toString(),\n          // Travel/Service cost fields\n          includeTravelServiceCost: item.includeTravelServiceCost,\n          travelServiceDistanceKm: (item.travelServiceDistanceKm || 0).toString(),\n          travelServiceNumberOfTechnicians: item.travelServiceNumberOfTechnicians || 1,\n          travelServiceServiceRatePerTechnician: (item.travelServiceServiceRatePerTechnician || 150).toString(),\n          travelServiceTravelRatePerKm: (item.travelServiceTravelRatePerKm || 1.15).toString(),\n          travelServiceNumberOfTrips: item.travelServiceNumberOfTrips || 1,\n          totalTravelServiceCost: (item.totalTravelServiceCost || 0).toString(),\n          includeMaintenanceCost: item.includeMaintenanceCost || false,\n          totalMaintenanceCost: (item.totalMaintenanceCost || 0).toString(),\n          includeServiceItems: item.includeServiceItems || false,\n          serviceItem1Cost: (item.serviceItem1Cost || 0).toString(),\n          serviceItem2Cost: (item.serviceItem2Cost || 0).toString(),\n          serviceItem3Cost: (item.serviceItem3Cost || 0).toString(),\n          totalServiceItemsCost: (item.totalServiceItemsCost || 0).toString(),\n          // Additional equipment and accessories costs\n          additionalCost: (item.additionalCost || 0).toString(),\n          accessoriesCost: (item.accessoriesCost || 0).toString(),\n        };\n        \n        console.log(\"Item data being sent:\", itemData);\n        const response = await apiRequest(\"/api/quote-items\", \"POST\", itemData);\n        console.log(\"Quote item created successfully:\", response);\n      }\n      \n      toast({\n        title: \"Sukces\",\n        description: editingQuote ? \"Wycena została zaktualizowana pomyślnie\" : \"Wycena została utworzona pomyślnie\",\n        variant: \"default\",\n      });\n      \n      // Navigate to the quote\n      window.location.href = `/quotes/${quote.id}`;\n      \n    } catch (error) {\n      console.error(\"Error saving quote:\", error);\n      toast({\n        title: \"Błąd\",\n        description: editingQuote ? \"Nie udało się zaktualizować wyceny\" : \"Nie udało się utworzyć wyceny\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    if (isNaN(amount)) {\n      return \"0,00 zł\";\n    }\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            {editingQuote ? \"Edycja Wyceny\" : \"Tworzenie Nowej Wyceny\"}\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            {editingQuote \n              ? \"Edytuj poniższe informacje, aby zaktualizować wycenę\"\n              : \"Wypełnij poniższe informacje, aby utworzyć nową wycenę dla klienta\"\n            }\n          </p>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Pricing Schema Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5\" />\n                  Schemat cenowy\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  Wybierz schemat cenowy, który zostanie użyty do kalkulacji rabatów\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Schemat rabatowy</label>\n                    <Select\n                      value={selectedPricingSchemaId?.toString() || \"\"}\n                      onValueChange={(value) => setSelectedPricingSchemaId(parseInt(value))}\n                    >\n                      <SelectTrigger className=\"w-full mt-1\">\n                        <SelectValue placeholder=\"Wybierz schemat cenowy\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {pricingSchemas.map((schema) => (\n                          <SelectItem key={schema.id} value={schema.id.toString()}>\n                            <div className=\"flex flex-col\">\n                              <span className=\"font-medium\">{schema.name}</span>\n                              {schema.description && (\n                                <span className=\"text-sm text-muted-foreground\">{schema.description}</span>\n                              )}\n                            </div>\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  {selectedPricingSchemaId && pricingSchemas.length > 0 && (\n                    <div className=\"mt-3 p-3 bg-muted rounded-lg\">\n                      <h4 className=\"text-sm font-medium mb-2\">Metoda naliczania rabatu:</h4>\n                      <div className=\"text-sm\">\n                        {(() => {\n                          const selectedSchema = pricingSchemas.find(schema => schema.id === selectedPricingSchemaId);\n                          if (selectedSchema?.calculationMethod === \"first_day\") {\n                            return (\n                              <div className=\"space-y-1\">\n                                <p className=\"font-medium text-green-600\">✓ Rabat od pierwszego dnia</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Rabat jest naliczany od pierwszego dnia wynajmu zgodnie z indywidualnymi ustawieniami rabatu każdego urządzenia.\n                                </p>\n                              </div>\n                            );\n                          } else {\n                            return (\n                              <div className=\"space-y-1\">\n                                <p className=\"font-medium text-blue-600\">✓ Rabat progowy</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Rabat jest naliczany po osiągnięciu określonych progów dni zgodnie z indywidualnymi ustawieniami każdego urządzenia.\n                                </p>\n                              </div>\n                            );\n                          }\n                        })()}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Client Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Informacje o kliencie</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">Wypełnij przynajmniej jedno pole</p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"companyName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nazwa firmy</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Wprowadź nazwę firmy\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"nip\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>NIP</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"123-456-78-90\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"contactPerson\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Osoba kontaktowa</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Imię i nazwisko\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Telefon</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+48 123 456 789\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"email@firma.pl\" type=\"email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Adres</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Ulica, miasto, kod pocztowy\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quote Items */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Pozycje wyceny</CardTitle>\n                  <Button type=\"button\" onClick={addQuoteItem}>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Dodaj pozycję\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {quoteItems.length === 0 ? (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <p>Brak pozycji w wycenie</p>\n                      <Button type=\"button\" onClick={addQuoteItem} className=\"mt-4\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Dodaj pierwszą pozycję\n                      </Button>\n                    </div>\n                  ) : (\n                    quoteItems.map((item) => (\n                      <QuoteItem\n                        key={item.id}\n                        item={item}\n                        equipment={equipment}\n                        pricingSchema={pricingSchemas.find(schema => schema.id === selectedPricingSchemaId)}\n                        onUpdate={(updatedItem) => updateQuoteItem(item.id, updatedItem)}\n                        onRemove={() => removeQuoteItem(item.id)}\n                        canRemove={quoteItems.length > 1}\n                      />\n                    ))\n                  )}\n                </div>\n\n                {/* Summary */}\n                {quoteItems.length > 0 && (\n                  <div className=\"border-t border-gray-200 pt-4 mt-6\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-lg font-medium text-gray-900\">Wartość netto:</span>\n                        <span className=\"text-xl font-bold text-primary\">{formatCurrency(totalNet)}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-gray-600\">VAT (23%):</span>\n                        <span className=\"text-sm text-gray-600\">{formatCurrency(vatAmount)}</span>\n                      </div>\n                      <div className=\"flex justify-between items-center pt-2 border-t border-gray-200\">\n                        <span className=\"text-lg font-bold text-gray-900\">Wartość brutto:</span>\n                        <span className=\"text-xl font-bold text-gray-900\">{formatCurrency(totalGross)}</span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Actions */}\n            <div className=\"flex justify-end space-x-4\">\n              <Button type=\"button\" variant=\"outline\">\n                Anuluj\n              </Button>\n              <Button type=\"button\" variant=\"secondary\">\n                <Save className=\"w-4 h-4 mr-2\" />\n                Zapisz jako wersję roboczą\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createClientMutation.isPending || createQuoteMutation.isPending}\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                {createClientMutation.isPending || createQuoteMutation.isPending \n                  ? (editingQuote ? \"Zapisywanie...\" : \"Tworzenie...\") \n                  : (editingQuote ? \"Zapisz zmiany\" : \"Utwórz wycenę\")\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":31659},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { \n  Package, \n  FileText, \n  PlusCircle, \n  Settings, \n  TrendingUp, \n  Users,\n  Snowflake,\n  Flame,\n  Lightbulb,\n  Zap,\n  Calendar,\n  ArrowRight,\n  ClipboardList,\n  Search\n} from \"lucide-react\";\n\ninterface Quote {\n  id: number;\n  quoteNumber: string;\n  client: {\n    companyName: string;\n  };\n  createdAt: string;\n  totalNet: string;\n  status: string;\n}\n\ninterface Equipment {\n  id: number;\n  name: string;\n  category: {\n    name: string;\n  };\n  quantity: number;\n  availableQuantity: number;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n\n  const { data: quotes = [], isLoading: quotesLoading } = useQuery<Quote[]>({\n    queryKey: [\"/api/quotes\"],\n    enabled: !!user && (user as any)?.role === 'admin', // Only fetch quotes for logged-in admins\n  });\n\n  const { data: equipment = [], isLoading: equipmentLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n  });\n\n  const recentQuotes = quotes.slice(0, 3);\n  \n  // Calculate statistics\n  const totalEquipment = equipment.reduce((sum, item) => sum + item.quantity, 0);\n  const availableEquipment = equipment.reduce((sum, item) => sum + item.availableQuantity, 0);\n  const categoryCounts = equipment.reduce((acc, item) => {\n    const categoryName = item.category.name;\n    acc[categoryName] = (acc[categoryName] || 0) + item.quantity;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(num);\n  };\n\n  const quickActions = [\n    {\n      title: \"Badanie Potrzeb\",\n      description: \"Przeprowadź analizę potrzeb klienta\",\n      icon: ClipboardList,\n      color: \"bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700\",\n      path: \"/needs-assessment\"\n    },\n    {\n      title: \"Nowa Wycena\",\n      description: \"Utwórz wycenę dla klienta\",\n      icon: PlusCircle,\n      color: \"bg-blue-500 hover:bg-blue-600\",\n      path: \"/create-quote\"\n    },\n    {\n      title: \"Katalog sprzętu\",\n      description: \"Przeglądaj dostępny sprzęt\",\n      icon: Package,\n      color: \"bg-green-500 hover:bg-green-600\", \n      path: \"/equipment\"\n    }\n  ];\n\n  if ((user as any)?.role === 'admin') {\n    quickActions.push({\n      title: \"Zapisane Wyceny\",\n      description: \"Zarządzaj utworzonymi wycenami\",\n      icon: FileText,\n      color: \"bg-purple-500 hover:bg-purple-600\",\n      path: \"/quotes\"\n    });\n  }\n\n  // Add \"Zapisane Badania\" for all authenticated users\n  quickActions.push({\n    title: \"Zapisane Badania\",\n    description: \"Przeglądaj przeprowadzone badania potrzeb\",\n    icon: FileText,\n    color: \"bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700\",\n    path: \"/needs-assessment-list\"\n  });\n\n  if ((user as any)?.role === 'admin' || (user as any)?.role === 'kierownik') {\n    quickActions.push({\n      title: \"Zarządzanie sprzętem wypożyczalni\",\n      description: \"Zarządzaj sprzętem i kategoriami\",\n      icon: Settings,\n      color: \"bg-orange-500 hover:bg-orange-600\",\n      path: \"/admin\"\n    });\n  }\n\n  const categoryIcons = {\n    'Klimatyzacje': Snowflake,\n    'Nagrzewnice': Flame,\n    'Maszty oświetleniowe': Lightbulb,\n    'Agregaty prądotwórcze': Zap,\n  };\n\n  const categoryColors = {\n    'Klimatyzacje': 'bg-blue-100 text-blue-800',\n    'Nagrzewnice': 'bg-red-100 text-red-800',\n    'Maszty oświetleniowe': 'bg-yellow-100 text-yellow-800',\n    'Agregaty prądotwórcze': 'bg-green-100 text-green-800',\n  };\n\n  if (quotesLoading || equipmentLoading) {\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            Witaj{(user as any)?.firstName || (user as any)?.email ? `, ${(user as any)?.firstName || (user as any)?.email}` : ''}!\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Zarządzaj ofertami i sprzętem\n          </p>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4\">Szybkie akcje</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {quickActions.map((action) => {\n              const IconComponent = action.icon;\n              return (\n                <Card \n                  key={action.title}\n                  className=\"cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-primary/20\"\n                  onClick={() => navigate(action.path)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className={`p-3 rounded-lg ${action.color} text-white`}>\n                        <IconComponent className=\"w-6 h-6\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-lg\">{action.title}</h3>\n                        <p className=\"text-muted-foreground text-sm\">{action.description}</p>\n                        <ArrowRight className=\"w-4 h-4 mt-2 text-muted-foreground\" />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n\n\n        <div className={`grid grid-cols-1 ${user && (user as any)?.role === 'admin' ? 'lg:grid-cols-2' : ''} gap-8`}>\n          {/* Recent Quotes - Only for logged-in admins */}\n          {user && (user as any)?.role === 'admin' ? (\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Ostatnie oferty</CardTitle>\n                <Button variant=\"outline\" size=\"sm\" onClick={() => navigate(\"/quotes\")}>\n                  Zobacz wszystkie\n                </Button>\n              </CardHeader>\n              <CardContent>\n                {recentQuotes.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <FileText className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Brak utworzonych ofert</p>\n                    <Button \n                      className=\"mt-4\" \n                      onClick={() => navigate(\"/create-quote\")}\n                    >\n                      Utwórz pierwszą ofertę\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentQuotes.map((quote) => (\n                      <div \n                        key={quote.id}\n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                        onClick={() => navigate(`/quotes/${quote.id}`)}\n                      >\n                        <div>\n                          <p className=\"font-medium\">{quote.quoteNumber}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {quote.client.companyName}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-medium\">{formatCurrency(quote.totalNet)}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(quote.createdAt).toLocaleDateString('pl-PL')}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ) : null}\n\n          {/* Equipment Categories */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Kategorie sprzętu</CardTitle>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => navigate(\"/equipment\")}>\n                Zobacz katalog\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Object.entries(categoryCounts).map(([categoryName, count]) => {\n                  const IconComponent = categoryIcons[categoryName as keyof typeof categoryIcons] || Package;\n                  const colorClass = categoryColors[categoryName as keyof typeof categoryColors] || 'bg-gray-100 text-gray-800';\n                  \n                  return (\n                    <div \n                      key={categoryName}\n                      className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 cursor-pointer\"\n                      onClick={() => {\n                        navigate(\"/equipment\");\n                        // Scroll to category after navigation\n                        setTimeout(() => {\n                          const element = document.getElementById(`category-${categoryName}`);\n                          if (element) {\n                            element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                          }\n                        }, 100);\n                      }}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`p-2 rounded-full ${colorClass} bg-opacity-20`}>\n                          <IconComponent className=\"w-4 h-4\" />\n                        </div>\n                        <span className=\"font-medium\">{categoryName}</span>\n                      </div>\n                      <Badge variant=\"secondary\">{count} szt.</Badge>\n                    </div>\n                  );\n                })}\n                \n                {Object.keys(categoryCounts).length === 0 && (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Package className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>Brak sprzętu w systemie</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11204},"client/src/pages/equipment.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Snowflake, Flame, Lightbulb, Zap } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\n\ninterface EquipmentCategory {\n  id: number;\n  name: string;\n  description?: string;\n}\n\ninterface Equipment {\n  id: number;\n  name: string;\n  description?: string;\n  model?: string;\n  power?: string;\n  quantity: number;\n  availableQuantity: number;\n  category: EquipmentCategory;\n  pricing: Array<{\n    periodStart: number;\n    periodEnd?: number;\n    pricePerDay: string;\n    discountPercent: string;\n  }>;\n}\n\nconst getCategoryColor = (categoryName: string) => {\n  const colors = {\n    'Klimatyzacje': 'bg-blue-100 text-blue-800',\n    'Nagrzewnice': 'bg-red-100 text-red-800',\n    'Maszty oświetleniowe': 'bg-yellow-100 text-yellow-800',\n    'Agregaty prądotwórcze': 'bg-green-100 text-green-800',\n    'Kurtyny powietrzne': 'bg-purple-100 text-purple-800',\n    'Wyciągi spalin': 'bg-indigo-100 text-indigo-800',\n  };\n  return colors[categoryName as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n};\n\nconst getCategoryIcon = (categoryName: string) => {\n  const icons = {\n    'Klimatyzacje': Snowflake,\n    'Nagrzewnice': Flame,\n    'Maszty oświetleniowe': Lightbulb,\n    'Agregaty prądotwórcze': Zap,\n  };\n  return icons[categoryName as keyof typeof icons] || Search;\n};\n\nconst scrollToCategory = (categoryName: string) => {\n  const element = document.getElementById(`category-${categoryName}`);\n  if (element) {\n    element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n  }\n};\n\nexport default function Equipment() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"all\");\n  const [, navigate] = useLocation();\n\n  const { data: equipment = [], isLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n  });\n\n  const { data: categories = [] } = useQuery<EquipmentCategory[]>({\n    queryKey: [\"/api/equipment-categories\"],\n  });\n\n  const filteredEquipment = equipment.filter((item) => {\n    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         item.model?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || item.category.id.toString() === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const groupedEquipment = filteredEquipment.reduce((acc, item) => {\n    const categoryName = item.category.name;\n    if (!acc[categoryName]) {\n      acc[categoryName] = [];\n    }\n    acc[categoryName].push(item);\n    return acc;\n  }, {} as Record<string, Equipment[]>);\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(parseFloat(price));\n  };\n\n  const getPriceDisplay = (pricing: Equipment['pricing']) => {\n    if (pricing.length === 0) return \"Brak ceny\";\n    const basePrice = pricing.find(p => p.periodStart === 1);\n    return basePrice ? `od ${formatPrice(basePrice.pricePerDay)}/doba` : \"Brak ceny\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 mb-8\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-64 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Katalog Sprzętu</h1>\n            <p className=\"text-muted-foreground mt-2\">Przeglądaj dostępny sprzęt wypożyczalni</p>\n          </div>\n        </div>\n\n\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-8\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Szukaj sprzętu...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n            <SelectTrigger className=\"w-full sm:w-64\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Wszystkie kategorie\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">Wszystkie kategorie</SelectItem>\n              {categories.map((category) => (\n                <SelectItem key={category.id} value={category.id.toString()}>\n                  {category.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Equipment Grid */}\n        <div className=\"space-y-8\">\n          {Object.entries(groupedEquipment).map(([categoryName, items]) => (\n            <div key={categoryName} id={`category-${categoryName}`}>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-semibold text-foreground\">{categoryName}</h2>\n                <Badge className={getCategoryColor(categoryName)}>\n                  {items.reduce((sum, item) => sum + item.quantity, 0)} szt.\n                </Badge>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {items.map((item) => (\n                  <Card key={item.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardHeader>\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <CardTitle className=\"text-lg\">{item.name}</CardTitle>\n                          {item.model && (\n                            <p className=\"text-sm text-muted-foreground mt-1\">{item.model}</p>\n                          )}\n                          {item.power && (\n                            <p className=\"text-sm text-muted-foreground\">{item.power}</p>\n                          )}\n                        </div>\n                        <Badge variant=\"outline\">\n                          {item.availableQuantity}/{item.quantity}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {item.description && (\n                        <p className=\"text-sm text-muted-foreground mb-4\">{item.description}</p>\n                      )}\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium text-foreground\">Dostępne:</span>\n                          <span className=\"text-sm font-medium text-green-600\">\n                            {item.availableQuantity} szt.\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm font-medium text-foreground\">Cena:</span>\n                          <span className=\"text-sm font-medium text-primary\">\n                            {getPriceDisplay(item.pricing)}\n                          </span>\n                        </div>\n                      </div>\n\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full mt-4\"\n                        disabled={item.availableQuantity === 0}\n                        onClick={() => navigate(`/create-quote?equipment=${item.id}`)}\n                      >\n                        {item.availableQuantity === 0 ? 'Niedostępny' : 'Dodaj do wyceny'}\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredEquipment.length === 0 && (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <p className=\"text-gray-500 text-lg\">\n                Nie znaleziono sprzętu pasującego do kryteriów wyszukiwania\n              </p>\n              <Button \n                variant=\"outline\" \n                className=\"mt-4\"\n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setSelectedCategory(\"all\");\n                }}\n              >\n                Wyczyść filtry\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9499},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Settings, Calculator, UserPlus, Info } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-blue-600\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto text-center text-white mb-16\">\n          <div className=\"mb-8\">\n            <div className=\"bg-white/20 backdrop-blur-sm rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6\">\n              <Settings className=\"w-12 h-12 text-white\" />\n            </div>\n            <h1 className=\"text-5xl font-bold mb-4\">PPP :: Program</h1>\n            <p className=\"text-xl opacity-90\">system wycen</p>\n          </div>\n          \n\n\n          <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 mb-8 max-w-2xl mx-auto\">\n            <h2 className=\"text-xl font-semibold text-white mb-2\">\n              Dostęp wymaga logowania\n            </h2>\n            <p className=\"text-white/80 mb-4\">\n              Aby uzyskać dostęp do systemu zarządzania wynajmem sprzętu, konieczne jest zalogowanie się przez Replit.\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n            <Button \n              size=\"lg\" \n              className=\"bg-white text-primary hover:bg-gray-100 font-semibold px-8 py-3 text-lg\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              Zaloguj się do systemu\n            </Button>\n            \n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              className=\"bg-white/10 text-white border-white/20 hover:bg-white/20 font-semibold px-8 py-3 text-lg backdrop-blur-sm\"\n              onClick={() => window.location.href = '/api/login'}\n            >\n              <UserPlus className=\"w-5 h-5 mr-2\" />\n              Nowy użytkownik\n            </Button>\n          </div>\n\n          <div className=\"mt-6 bg-blue-500/20 backdrop-blur-sm rounded-lg p-4 max-w-2xl mx-auto\">\n            <div className=\"flex items-start space-x-3\">\n              <Info className=\"w-5 h-5 text-blue-200 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold text-white mb-1\">Informacja dla nowych użytkowników</h3>\n                <p className=\"text-blue-100 text-sm\">\n                  Po pierwszym logowaniu Twoje konto wymaga zatwierdzenia przez administratora. \n                  Po akceptacji otrzymasz pełen dostęp do systemu wycen sprzętu.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-16 text-center text-white/80\">\n          <p className=\"text-sm\">\n            Bezpieczny system logowania przez Replit Auth\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2904},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { User, Mail, Shield, Calendar } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const [isEditing, setIsEditing] = useState(false);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  const getRoleBadge = (role: string) => {\n    return role === 'admin' ? (\n      <Badge className=\"bg-red-100 text-red-800\">\n        <Shield className=\"w-3 h-3 mr-1\" />\n        Administrator\n      </Badge>\n    ) : (\n      <Badge className=\"bg-blue-100 text-blue-800\">\n        <User className=\"w-3 h-3 mr-1\" />\n        Pracownik\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Profil użytkownika</h1>\n          <p className=\"text-gray-600 mt-2\">Zarządzaj swoimi danymi osobowymi i ustawieniami konta</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* Profile Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Informacje osobowe\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-start gap-6\">\n                <Avatar className=\"w-24 h-24\">\n                  <AvatarImage src={user.profileImageUrl || undefined} />\n                  <AvatarFallback className=\"bg-primary text-white text-xl\">\n                    <User className=\"w-12 h-12\" />\n                  </AvatarFallback>\n                </Avatar>\n                \n                <div className=\"flex-1 space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">Imię</Label>\n                      <Input\n                        id=\"firstName\"\n                        value={user.firstName || ''}\n                        disabled={!isEditing}\n                        className=\"mt-1\"\n                        placeholder=\"Nie podano\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Nazwisko</Label>\n                      <Input\n                        id=\"lastName\"\n                        value={user.lastName || ''}\n                        disabled={!isEditing}\n                        className=\"mt-1\"\n                        placeholder=\"Nie podano\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Mail className=\"w-4 h-4 text-gray-400\" />\n                      <Input\n                        id=\"email\"\n                        value={user.email || ''}\n                        disabled\n                        className=\"flex-1\"\n                        placeholder=\"Nie podano\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label>Rola w systemie</Label>\n                    <div className=\"mt-1\">\n                      {getRoleBadge(user.role)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end gap-2 mt-6\">\n                {isEditing ? (\n                  <>\n                    <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                      Anuluj\n                    </Button>\n                    <Button onClick={() => setIsEditing(false)}>\n                      Zapisz zmiany\n                    </Button>\n                  </>\n                ) : (\n                  <Button onClick={() => setIsEditing(true)}>\n                    Edytuj profil\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Account Info Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5\" />\n                Informacje o koncie\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Data utworzenia konta</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {user.createdAt ? formatDate(user.createdAt) : 'Nie podano'}\n                  </p>\n                </div>\n                <div>\n                  <Label>Ostatnia aktualizacja</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    {user.updatedAt ? formatDate(user.updatedAt) : 'Nie podano'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Bezpieczeństwo\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Sposób logowania</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Replit Authentication (OpenID Connect)\n                  </p>\n                </div>\n                <div>\n                  <Label>Identyfikator użytkownika</Label>\n                  <p className=\"text-sm text-gray-600 mt-1 font-mono\">\n                    {user.id}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6735},"client/src/pages/quotes.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Eye, \n  Edit, \n  Trash2, \n  Plus, \n  Search, \n  Filter,\n  Download,\n  Printer\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface Quote {\n  id: number;\n  quoteNumber: string;\n  client: {\n    id: number;\n    companyName: string;\n  };\n  createdBy: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n  status: string;\n  totalNet: string;\n  totalGross: string;\n  createdAt: string;\n  updatedAt: string;\n  items: Array<{\n    id: number;\n    quantity: number;\n    rentalPeriodDays: number;\n    equipment: {\n      name: string;\n    };\n  }>;\n}\n\nexport default function Quotes() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  // Redirect non-admin users\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || ((user as any)?.role !== 'admin' && (user as any)?.role !== 'employee'))) {\n      toast({\n        title: \"Brak uprawnień\",\n        description: \"Dostęp do wycen jest dostępny tylko dla pracowników i administratorów.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n    }\n  }, [isAuthenticated, user, authLoading, toast]);\n\n  const { data: quotes = [], isLoading } = useQuery<Quote[]>({\n    queryKey: [\"/api/quotes\"],\n    enabled: isAuthenticated && (user as any)?.role === 'admin',\n  });\n\n  const deleteQuoteMutation = useMutation({\n    mutationFn: async (quoteId: number) => {\n      const response = await apiRequest(`/api/quotes/${quoteId}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/quotes\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Wycena została usunięta pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Brak autoryzacji\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć wyceny\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteQuote = (quoteId: number, quoteNumber: string) => {\n    if (confirm(`Czy na pewno chcesz usunąć wycenę ${quoteNumber}? Ta operacja jest nieodwracalna.`)) {\n      deleteQuoteMutation.mutate(quoteId);\n    }\n  };\n\n  // Show loading while checking authentication\n  if (authLoading) {\n    return <div className=\"flex justify-center items-center h-64\">Sprawdzanie uprawnień...</div>;\n  }\n\n  // Don't render if user is not admin\n  if (!isAuthenticated || (user as any)?.role !== 'admin') {\n    return null;\n  }\n\n  const filteredQuotes = quotes.filter((quote) => {\n    const matchesSearch = \n      quote.quoteNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      quote.client.companyName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || quote.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(parseFloat(amount));\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      draft: { label: 'Wersja robocza', className: 'bg-gray-500 text-white' },\n      pending: { label: 'Oczekująca', className: 'bg-warning text-warning-foreground' },\n      approved: { label: 'Zatwierdzona', className: 'bg-success text-success-foreground' },\n      rejected: { label: 'Odrzucona', className: 'bg-destructive text-destructive-foreground' },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft;\n    \n    return (\n      <Badge className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getRentalPeriodText = (days: number) => {\n    if (days <= 2) return `${days} dni`;\n    if (days <= 7) return `${days} dni`;\n    if (days <= 18) return `${days} dni`;\n    if (days <= 29) return `${days} dni`;\n    return `${days}+ dni`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/4 mb-8\"></div>\n            <div className=\"h-96 bg-muted rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Zarządzanie Wycenami</h1>\n            <p className=\"text-muted-foreground mt-2\">Przeglądaj i zarządzaj wycenami</p>\n          </div>\n          <Link href=\"/create-quote\">\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nowa Wycena\n            </Button>\n          </Link>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n              <CardTitle>Lista Wycen</CardTitle>\n              <div className=\"flex flex-col sm:flex-row gap-2 w-full sm:w-auto\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-full sm:w-48\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    <SelectValue placeholder=\"Wszystkie statusy\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Wszystkie statusy</SelectItem>\n                    <SelectItem value=\"draft\">Wersja robocza</SelectItem>\n                    <SelectItem value=\"pending\">Oczekująca</SelectItem>\n                    <SelectItem value=\"approved\">Zatwierdzona</SelectItem>\n                    <SelectItem value=\"rejected\">Odrzucona</SelectItem>\n                  </SelectContent>\n                </Select>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    placeholder=\"Szukaj wyceny...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-full sm:w-64\"\n                  />\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nr wyceny</TableHead>\n                    <TableHead>Klient</TableHead>\n                    <TableHead>Data utworzenia</TableHead>\n                    <TableHead>Okres wynajmu</TableHead>\n                    <TableHead>Wartość netto</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Akcje</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredQuotes.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\n                        {quotes.length === 0 \n                          ? \"Brak wycen do wyświetlenia\"\n                          : \"Brak wycen pasujących do filtrów\"\n                        }\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredQuotes.map((quote) => {\n                      const maxPeriod = Math.max(...quote.items.map(item => item.rentalPeriodDays));\n                      \n                      return (\n                        <TableRow key={quote.id}>\n                          <TableCell className=\"font-medium\">{quote.quoteNumber}</TableCell>\n                          <TableCell>{quote.client.companyName}</TableCell>\n                          <TableCell>\n                            {new Date(quote.createdAt).toLocaleDateString('pl-PL')}\n                          </TableCell>\n                          <TableCell>{getRentalPeriodText(maxPeriod)}</TableCell>\n                          <TableCell>{formatCurrency(quote.totalNet)}</TableCell>\n                          <TableCell>{getStatusBadge(quote.status)}</TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Link href={`/quotes/${quote.id}`}>\n                                <Button variant=\"ghost\" size=\"sm\" title=\"Podgląd\">\n                                  <Eye className=\"w-4 h-4\" />\n                                </Button>\n                              </Link>\n                              <Link href={`/quotes/${quote.id}/edit`}>\n                                <Button variant=\"ghost\" size=\"sm\" title=\"Edytuj\">\n                                  <Edit className=\"w-4 h-4\" />\n                                </Button>\n                              </Link>\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                title=\"Drukuj wycenę\"\n                                className=\"bg-green-50 hover:bg-green-100 border-green-200\"\n                                onClick={() => window.open(`/api/quotes/${quote.id}/print`, '_blank')}\n                              >\n                                <Printer className=\"w-4 h-4 text-green-600\" />\n                              </Button>\n                              {(user as any)?.role === 'admin' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\" \n                                  className=\"text-red-600 hover:text-red-700\"\n                                  title=\"Usuń\"\n                                  disabled={deleteQuoteMutation.isPending}\n                                  onClick={() => handleDeleteQuote(quote.id, quote.quoteNumber)}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {quotes.length === 0 && (\n          <Card className=\"mt-8 text-center py-12\">\n            <CardContent>\n              <p className=\"text-gray-500 text-lg mb-4\">\n                Nie masz jeszcze żadnych wycen\n              </p>\n              <Link href=\"/create-quote\">\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Utwórz pierwszą wycenę\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12291},"client/src/pages/settings.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Settings as SettingsIcon, \n  Bell, \n  Shield, \n  Palette, \n  Globe,\n  Database,\n  AlertTriangle\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [notifications, setNotifications] = useState(true);\n  const [autoSave, setAutoSave] = useState(true);\n  \n  const isDarkMode = theme === \"dark\";\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Ustawienia</h1>\n          <p className=\"text-gray-600 mt-2\">Zarządzaj preferencjami aplikacji i ustawieniami konta</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {/* General Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <SettingsIcon className=\"w-5 h-5\" />\n                Ustawienia ogólne\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Powiadomienia</Label>\n                  <p className=\"text-sm text-gray-600\">\n                    Otrzymuj powiadomienia o nowych wycenach i aktualizacjach\n                  </p>\n                </div>\n                <Switch\n                  checked={notifications}\n                  onCheckedChange={setNotifications}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Automatyczne zapisywanie</Label>\n                  <p className=\"text-sm text-gray-600\">\n                    Automatycznie zapisuj zmiany w wycenach podczas pracy\n                  </p>\n                </div>\n                <Switch\n                  checked={autoSave}\n                  onCheckedChange={setAutoSave}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label>Tryb ciemny</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Przełącz na ciemny motyw interfejsu\n                  </p>\n                </div>\n                <Switch\n                  checked={isDarkMode}\n                  onCheckedChange={(checked) => setTheme(checked ? \"dark\" : \"light\")}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Language and Region */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Globe className=\"w-5 h-5\" />\n                Język i region\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Język interfejsu</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Polski (PL) - domyślny\n                  </p>\n                </div>\n                <div>\n                  <Label>Format daty</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    DD.MM.YYYY (europejski)\n                  </p>\n                </div>\n                <div>\n                  <Label>Waluta</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    PLN (Polski złoty)\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Permissions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Uprawnienia\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Rola w systemie</Label>\n                  <div className=\"mt-1\">\n                    {user.role === 'admin' ? (\n                      <Badge className=\"bg-red-100 text-red-800\">\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Administrator\n                      </Badge>\n                    ) : (\n                      <Badge className=\"bg-blue-100 text-blue-800\">\n                        Pracownik\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n                \n                <div>\n                  <Label>Dostępne funkcje</Label>\n                  <div className=\"mt-2 space-y-2\">\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      Tworzenie i edycja wycen\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      Przeglądanie katalogu sprzętu\n                    </div>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                      Zarządzanie klientami\n                    </div>\n                    {user.role === 'admin' && (\n                      <>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          Panel administratora\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          Zarządzanie sprzętem i cenami\n                        </div>\n                        <div className=\"flex items-center gap-2 text-sm\">\n                          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                          Zarządzanie użytkownikami\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"w-5 h-5\" />\n                Informacje systemowe\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Wersja aplikacji</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Sebastian Popiel :: PPP :: Program v1.0.0\n                  </p>\n                </div>\n                <div>\n                  <Label>Ostatnia aktualizacja</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    15 stycznia 2025\n                  </p>\n                </div>\n                <div>\n                  <Label>Status systemu</Label>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"text-sm text-green-600\">Działa poprawnie</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Danger Zone */}\n          <Card className=\"border-red-200\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-red-700\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                Strefa niebezpieczna\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-red-700\">Wyloguj się</Label>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Zostaniesz wylogowany ze wszystkich sesji\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    className=\"mt-2 border-red-200 text-red-700 hover:bg-red-50\"\n                    onClick={() => window.location.href = '/api/logout'}\n                  >\n                    Wyloguj się\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9304},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/quote-detail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ArrowLeft, \n  Download, \n  Edit, \n  Building2, \n  Calendar, \n  DollarSign,\n  Package,\n  User,\n  Phone,\n  Mail,\n  MapPin,\n  Plus\n} from \"lucide-react\";\nimport { Link, useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface QuoteDetail {\n  id: number;\n  quoteNumber: string;\n  client: {\n    id: number;\n    companyName: string;\n    contactPerson?: string;\n    email?: string;\n    phone?: string;\n    address?: string;\n    nip?: string;\n  };\n  createdBy?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n  status: string;\n  totalNet: string;\n  totalGross: string;\n  createdAt: string;\n  updatedAt: string;\n  validUntil?: string;\n  items: Array<{\n    id: number;\n    quantity: number;\n    rentalPeriodDays: number;\n    pricePerDay: number;\n    discountPercent: number;\n    totalPrice: number;\n    notes?: string;\n    equipment: {\n      id: number;\n      name: string;\n      category: {\n        name: string;\n      };\n    };\n    // Fuel costs\n    includeFuelCost?: boolean;\n    fuelConsumptionLH?: number;\n    fuelPricePerLiter?: number;\n    hoursPerDay?: number;\n    totalFuelCost?: number;\n    \n    // Installation costs\n    includeInstallationCost?: boolean;\n    installationDistanceKm?: number;\n    numberOfTechnicians?: number;\n    serviceRatePerTechnician?: number;\n    travelRatePerKm?: number;\n    totalInstallationCost?: number;\n    \n    // Maintenance costs\n    includeMaintenanceCost?: boolean;\n    totalMaintenanceCost?: number;\n    \n    // Service items (heaters)\n    includeServiceItems?: boolean;\n    serviceItem1Cost?: number;\n    serviceItem2Cost?: number;\n    serviceItem3Cost?: number;\n    totalServiceItemsCost?: number;\n  }>;\n}\n\nexport default function QuoteDetail() {\n  const { id } = useParams();\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n\n  // Redirect if not authenticated or not admin/employee\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated && process.env.NODE_ENV === 'production') {\n      toast({\n        title: \"Brak uprawnień\",\n        description: \"Dostęp do wycen jest dostępny tylko dla pracowników i administratorów.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, user, authLoading, toast]);\n\n  const { data: quote, isLoading, error } = useQuery<QuoteDetail>({\n    queryKey: [\"/api/quotes\", id],\n    enabled: !!id,\n    retry: false,\n  });\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Ładowanie wyceny...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return null;\n    }\n    \n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Błąd ładowania wyceny</h1>\n          <p className=\"text-muted-foreground mb-4\">Nie udało się załadować danych wyceny.</p>\n          <Link href=\"/quotes\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Powrót do listy wycen\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  if (!quote) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-muted-foreground mb-4\">Wycena nie znaleziona</h1>\n          <p className=\"text-muted-foreground mb-4\">Nie można znaleźć wyceny o podanym ID.</p>\n          <Link href=\"/quotes\">\n            <Button>\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Powrót do listy wycen\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: string | number) => {\n    const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return new Intl.NumberFormat('pl-PL', {\n      style: 'currency',\n      currency: 'PLN',\n    }).format(numAmount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      draft: { label: \"Wersja robocza\", variant: \"secondary\" as const },\n      pending: { label: \"Oczekująca\", variant: \"default\" as const },\n      approved: { label: \"Zatwierdzona\", variant: \"default\" as const },\n      rejected: { label: \"Odrzucona\", variant: \"destructive\" as const },\n    };\n    \n    const statusInfo = statusMap[status as keyof typeof statusMap] || { label: status, variant: \"default\" as const };\n    return <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>;\n  };\n\n  const getRentalPeriodText = (days: number) => {\n    if (days === 1) return \"1 dzień\";\n    if (days < 5) return `${days} dni`;\n    return `${days} dni`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/quotes\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Powrót do listy\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Wycena {quote.quoteNumber}</h1>\n              <p className=\"text-muted-foreground\">Szczegóły wyceny</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => window.open(`/api/quotes/${quote.id}/print`, '_blank')}\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Drukuj\n            </Button>\n            <Link href={`/quotes/${quote.id}/edit`}>\n              <Button>\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edytuj\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Quote Information */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Quote Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <DollarSign className=\"w-5 h-5 mr-2\" />\n                  Szczegóły wyceny\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Numer wyceny</label>\n                    <p className=\"text-lg font-semibold\">{quote.quoteNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                    <div className=\"mt-1\">{getStatusBadge(quote.status)}</div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Data utworzenia</label>\n                    <p className=\"text-lg\">{formatDate(quote.createdAt)}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Utworzył</label>\n                    <p className=\"text-lg\">\n                      {quote.createdBy \n                        ? (quote.createdBy.firstName && quote.createdBy.lastName \n                            ? `${quote.createdBy.firstName} ${quote.createdBy.lastName}`\n                            : quote.createdBy.email || 'Nieznany użytkownik')\n                        : 'Wycena gościnna'\n                      }\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quote Items */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"w-5 h-5 mr-2\" />\n                  Pozycje wyceny\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {quote.items.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Package className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n                      <p className=\"text-lg mb-2\">Brak pozycji w wycenie</p>\n                      <p className=\"text-sm mb-4\">Dodaj sprzęt do wyceny, aby rozpocząć kalkulację kosztów.</p>\n                      <Link href={`/quotes/${quote.id}/edit`}>\n                        <Button>\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Dodaj pierwszą pozycję\n                        </Button>\n                      </Link>\n                    </div>\n                  ) : (\n                    quote.items.map((item, index) => (\n                      <div key={item.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-3\">\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{item.equipment.name}</h3>\n                            <p className=\"text-sm text-muted-foreground\">{item.equipment.category.name}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold\">{formatCurrency(item.totalPrice)}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {item.quantity} szt. × {getRentalPeriodText(item.rentalPeriodDays)}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Cena za dzień:</span>\n                            <p>{formatCurrency(item.pricePerDay)}</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Rabat:</span>\n                            <p>{item.discountPercent}%</p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">Okres wynajmu:</span>\n                            <p>{getRentalPeriodText(item.rentalPeriodDays)}</p>\n                          </div>\n                        </div>\n\n                        {/* Additional costs */}\n                        <div className=\"mt-3 space-y-2\">\n                          {item.includeFuelCost && item.totalFuelCost && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Koszt paliwa:</span>\n                              <span>{formatCurrency(item.totalFuelCost)}</span>\n                            </div>\n                          )}\n                          {item.includeInstallationCost && item.totalInstallationCost && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Koszt montażu:</span>\n                              <span>{formatCurrency(item.totalInstallationCost)}</span>\n                            </div>\n                          )}\n                          {item.includeMaintenanceCost && item.totalMaintenanceCost && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Koszt eksploatacji:</span>\n                              <span>{formatCurrency(item.totalMaintenanceCost)}</span>\n                            </div>\n                          )}\n                          {item.includeServiceItems && item.totalServiceItemsCost && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span>Koszty serwisowe:</span>\n                              <span>{formatCurrency(item.totalServiceItemsCost)}</span>\n                            </div>\n                          )}\n                        </div>\n\n                        {item.notes && (\n                          <div className=\"mt-3 p-3 bg-muted rounded\">\n                            <p className=\"text-sm\"><strong>Uwagi:</strong> {item.notes}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Client Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Building2 className=\"w-5 h-5 mr-2\" />\n                  Dane klienta\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-lg font-semibold\">{quote.client.companyName}</p>\n                  {quote.client.nip && (\n                    <p className=\"text-sm text-muted-foreground\">NIP: {quote.client.nip}</p>\n                  )}\n                </div>\n                \n                {quote.client.contactPerson && (\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">{quote.client.contactPerson}</span>\n                  </div>\n                )}\n                \n                {quote.client.email && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">{quote.client.email}</span>\n                  </div>\n                )}\n                \n                {quote.client.phone && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">{quote.client.phone}</span>\n                  </div>\n                )}\n                \n                {quote.client.address && (\n                  <div className=\"flex items-center space-x-2\">\n                    <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-sm\">{quote.client.address}</span>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Quote Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"w-5 h-5 mr-2\" />\n                  Podsumowanie\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Wartość netto:</span>\n                  <span className=\"font-medium\">{formatCurrency(quote.totalNet)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Wartość brutto:</span>\n                  <span className=\"font-medium\">{formatCurrency(quote.totalGross)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Liczba pozycji:</span>\n                  <span className=\"font-medium\">{quote.items.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-muted-foreground\">Ostatnia modyfikacja:</span>\n                  <span className=\"font-medium\">{formatDate(quote.updatedAt)}</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17333},"client/src/pages/edit-quote.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport CreateQuote from \"./create-quote\";\n\nexport default function EditQuote() {\n  const { id } = useParams();\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n\n  // Redirect if not authenticated or not admin/employee\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'employee'))) {\n      toast({\n        title: \"Brak uprawnień\",\n        description: \"Dostęp do edycji wycen jest dostępny tylko dla pracowników i administratorów.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, user, authLoading, toast]);\n\n  const { data: quote, isLoading, error } = useQuery({\n    queryKey: [\"/api/quotes\", id],\n    enabled: !!id && isAuthenticated,\n    retry: false,\n  });\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Ładowanie wyceny...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    if (isUnauthorizedError(error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return null;\n    }\n    \n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Błąd ładowania wyceny</h1>\n          <p className=\"text-muted-foreground mb-4\">Nie udało się załadować danych wyceny.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!quote) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-muted-foreground mb-4\">Wycena nie znaleziona</h1>\n          <p className=\"text-muted-foreground mb-4\">Nie można znaleźć wyceny o podanym ID.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Pass the quote data to CreateQuote component for editing\n  return <CreateQuote editingQuote={quote} />;\n}","size_bytes":2691},"client/src/pages/guest-quote.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Trash2, \n  Calculator, \n  FileText, \n  Mail,\n  Building,\n  User,\n  Phone,\n  MapPin\n} from \"lucide-react\";\n\ninterface Equipment {\n  id: number;\n  name: string;\n  description?: string;\n  model?: string;\n  power?: string;\n  category: {\n    id: number;\n    name: string;\n  };\n  pricing: Array<{\n    id: number;\n    periodStart: number;\n    periodEnd?: number;\n    pricePerDay: string;\n    discountPercent: string;\n  }>;\n}\n\ninterface QuoteItem {\n  equipmentId: number;\n  equipment?: Equipment;\n  quantity: number;\n  rentalPeriodDays: number;\n  pricePerDay: number;\n  totalPrice: number;\n  notes?: string;\n}\n\ninterface ClientData {\n  companyName: string;\n  contactPerson: string;\n  email: string;\n  phone: string;\n  address: string;\n  nip?: string;\n}\n\nexport default function GuestQuote() {\n  const { toast } = useToast();\n  const [quoteItems, setQuoteItems] = useState<QuoteItem[]>([]);\n  const [clientData, setClientData] = useState<ClientData>({\n    companyName: \"\",\n    contactPerson: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    nip: \"\"\n  });\n  const [notes, setNotes] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [guestEmail, setGuestEmail] = useState(\"\");\n\n  const { data: equipment = [] } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n  });\n\n  const createGuestQuoteMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/quotes/guest\", data);\n      return response.json();\n    },\n    onSuccess: (quote) => {\n      toast({\n        title: \"Sukces\",\n        description: \"Wycena została utworzona pomyślnie\",\n      });\n      \n      // Reset form\n      setQuoteItems([]);\n      setClientData({\n        companyName: \"\",\n        contactPerson: \"\",\n        email: \"\",\n        phone: \"\",\n        address: \"\",\n        nip: \"\"\n      });\n      setNotes(\"\");\n      setGuestEmail(\"\");\n      \n      // Show quote number\n      toast({\n        title: \"Numer wyceny\",\n        description: `Twoja wycena: ${quote.quoteNumber}`,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się utworzyć wyceny\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addQuoteItem = () => {\n    setQuoteItems([...quoteItems, {\n      equipmentId: 0,\n      quantity: 1,\n      rentalPeriodDays: 1,\n      pricePerDay: 0,\n      totalPrice: 0,\n      notes: \"\"\n    }]);\n  };\n\n  const removeQuoteItem = (index: number) => {\n    setQuoteItems(quoteItems.filter((_, i) => i !== index));\n  };\n\n  const updateQuoteItem = (index: number, field: string, value: any) => {\n    const updatedItems = [...quoteItems];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n\n    if (field === 'equipmentId') {\n      const selectedEquipment = equipment.find(e => e.id === value);\n      if (selectedEquipment) {\n        updatedItems[index].equipment = selectedEquipment;\n        // Set default price from first pricing tier\n        if (selectedEquipment.pricing.length > 0) {\n          updatedItems[index].pricePerDay = parseFloat(selectedEquipment.pricing[0].pricePerDay);\n        }\n      }\n    }\n\n    // Recalculate total price\n    if (field === 'quantity' || field === 'rentalPeriodDays' || field === 'pricePerDay') {\n      const item = updatedItems[index];\n      item.totalPrice = item.quantity * item.rentalPeriodDays * item.pricePerDay;\n    }\n\n    setQuoteItems(updatedItems);\n  };\n\n  const calculateTotalNet = () => {\n    return quoteItems.reduce((sum, item) => sum + item.totalPrice, 0);\n  };\n\n  const calculateTotalGross = () => {\n    const net = calculateTotalNet();\n    return net * 1.23; // 23% VAT\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    if (!guestEmail || !clientData.companyName || quoteItems.length === 0) {\n      toast({\n        title: \"Błąd\",\n        description: \"Wypełnij wszystkie wymagane pola\",\n        variant: \"destructive\",\n      });\n      setIsSubmitting(false);\n      return;\n    }\n\n    const totalNet = calculateTotalNet();\n    const totalGross = calculateTotalGross();\n\n    const quoteData = {\n      guestEmail,\n      clientData,\n      totalNet: totalNet.toFixed(2),\n      totalGross: totalGross.toFixed(2),\n      notes,\n      items: quoteItems.map(item => ({\n        equipmentId: item.equipmentId,\n        quantity: item.quantity,\n        rentalPeriodDays: item.rentalPeriodDays,\n        pricePerDay: item.pricePerDay.toFixed(2),\n        totalPrice: item.totalPrice.toFixed(2),\n        notes: item.notes\n      }))\n    };\n\n    try {\n      await createGuestQuoteMutation.mutateAsync(quoteData);\n    } catch (error) {\n      console.error(\"Error creating guest quote:\", error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Kalkulator Wyceny</h1>\n          <p className=\"text-gray-600 mt-2\">Utwórz wycenę na wynajem sprzętu</p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Guest Contact */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Mail className=\"w-5 h-5 mr-2\" />\n                Twoje dane kontaktowe\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"guestEmail\">Email do kontaktu *</Label>\n                  <Input\n                    id=\"guestEmail\"\n                    type=\"email\"\n                    value={guestEmail}\n                    onChange={(e) => setGuestEmail(e.target.value)}\n                    placeholder=\"twoj@email.com\"\n                    required\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Client Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Building className=\"w-5 h-5 mr-2\" />\n                Dane klienta\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"companyName\">Nazwa firmy *</Label>\n                  <Input\n                    id=\"companyName\"\n                    value={clientData.companyName}\n                    onChange={(e) => setClientData({...clientData, companyName: e.target.value})}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"contactPerson\">Osoba kontaktowa</Label>\n                  <Input\n                    id=\"contactPerson\"\n                    value={clientData.contactPerson}\n                    onChange={(e) => setClientData({...clientData, contactPerson: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={clientData.email}\n                    onChange={(e) => setClientData({...clientData, email: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Telefon</Label>\n                  <Input\n                    id=\"phone\"\n                    value={clientData.phone}\n                    onChange={(e) => setClientData({...clientData, phone: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"nip\">NIP</Label>\n                  <Input\n                    id=\"nip\"\n                    value={clientData.nip}\n                    onChange={(e) => setClientData({...clientData, nip: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"address\">Adres</Label>\n                  <Input\n                    id=\"address\"\n                    value={clientData.address}\n                    onChange={(e) => setClientData({...clientData, address: e.target.value})}\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Equipment Selection */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <CardTitle className=\"flex items-center\">\n                  <Calculator className=\"w-5 h-5 mr-2\" />\n                  Wybór sprzętu\n                </CardTitle>\n                <Button type=\"button\" onClick={addQuoteItem} variant=\"outline\" size=\"sm\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Dodaj sprzęt\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {quoteItems.map((item, index) => (\n                  <div key={index} className=\"border rounded-lg p-4 space-y-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <h4 className=\"font-medium\">Pozycja {index + 1}</h4>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeQuoteItem(index)}\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div>\n                        <Label>Sprzęt</Label>\n                        <Select\n                          value={item.equipmentId.toString()}\n                          onValueChange={(value) => updateQuoteItem(index, 'equipmentId', parseInt(value))}\n                        >\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Wybierz sprzęt\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {equipment.map((eq) => (\n                              <SelectItem key={eq.id} value={eq.id.toString()}>\n                                {eq.name} {eq.model && `(${eq.model})`}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      \n                      <div>\n                        <Label>Ilość</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={item.quantity}\n                          onChange={(e) => updateQuoteItem(index, 'quantity', parseInt(e.target.value))}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label>Okres wynajmu (dni)</Label>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={item.rentalPeriodDays}\n                          onChange={(e) => updateQuoteItem(index, 'rentalPeriodDays', parseInt(e.target.value))}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Cena za dzień (PLN)</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={item.pricePerDay}\n                          onChange={(e) => updateQuoteItem(index, 'pricePerDay', parseFloat(e.target.value))}\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label>Łączna cena (PLN)</Label>\n                        <Input\n                          type=\"number\"\n                          value={item.totalPrice.toFixed(2)}\n                          readOnly\n                          className=\"bg-gray-100\"\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label>Uwagi</Label>\n                      <Textarea\n                        value={item.notes}\n                        onChange={(e) => updateQuoteItem(index, 'notes', e.target.value)}\n                        placeholder=\"Dodatkowe uwagi do tej pozycji...\"\n                      />\n                    </div>\n                  </div>\n                ))}\n                \n                {quoteItems.length === 0 && (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Calculator className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                    <p>Dodaj sprzęt do wyceny</p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Notes */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"w-5 h-5 mr-2\" />\n                Dodatkowe uwagi\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Textarea\n                value={notes}\n                onChange={(e) => setNotes(e.target.value)}\n                placeholder=\"Dodatkowe uwagi do całej wyceny...\"\n                rows={4}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Summary */}\n          {quoteItems.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Podsumowanie</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Wartość netto:</span>\n                    <span className=\"font-medium\">{calculateTotalNet().toFixed(2)} PLN</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>VAT (23%):</span>\n                    <span className=\"font-medium\">{(calculateTotalGross() - calculateTotalNet()).toFixed(2)} PLN</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-bold border-t pt-2\">\n                    <span>Wartość brutto:</span>\n                    <span>{calculateTotalGross().toFixed(2)} PLN</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Submit Button */}\n          <div className=\"flex justify-center\">\n            <Button \n              type=\"submit\" \n              size=\"lg\" \n              disabled={isSubmitting || quoteItems.length === 0}\n              className=\"min-w-48\"\n            >\n              {isSubmitting ? \"Tworzenie wyceny...\" : \"Utwórz wycenę\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":16010},"server/add-v20-pro.js":{"content":"import { db } from './db.ts';\nimport { equipment, equipmentPricing } from '../shared/schema.ts';\n\nasync function addV20Pro() {\n  console.log('Adding Generac V20 PRO...');\n\n  try {\n    // Insert the equipment\n    const [insertedEquipment] = await db\n      .insert(equipment)\n      .values({\n        name: 'Generac V20 PRO',\n        description: 'Maszt hybrydowy Generac V20 PRO z wieloma opcjami mocy',\n        model: 'V20 PRO',\n        power: '4x60W / 4x120W / 4x180W / 4x240W',\n        categoryId: 25, // Maszty oświetleniowe\n        quantity: 1,\n        availableQuantity: 1,\n        fuelConsumption75: 0.6,\n        dimensions: '3390 x 1714 x 8200 mm',\n        weight: '1146 kg',\n        engine: 'Hybrydowy - generator + baterie',\n        alternator: 'Powierzchnia oświetlona: 1500/2200/2700/3100 m²',\n        fuelTankCapacity: 100\n      })\n      .returning();\n\n    console.log(`Inserted equipment: ${insertedEquipment.name}`);\n\n    // Add pricing tiers (380 PLN base price for hybrid lighting tower)\n    const pricingTiers = [\n      { periodStart: 1, periodEnd: 2, pricePerDay: 380, discountPercent: 0 },    // 1-2 dni\n      { periodStart: 3, periodEnd: 7, pricePerDay: 342, discountPercent: 10.00 }, // 3-7 dni\n      { periodStart: 8, periodEnd: 18, pricePerDay: 304, discountPercent: 20.00 }, // 8-18 dni\n      { periodStart: 19, periodEnd: 29, pricePerDay: 266, discountPercent: 30.00 }, // 19-29 dni\n      { periodStart: 30, periodEnd: null, pricePerDay: 228, discountPercent: 40.00 } // 30+ dni\n    ];\n\n    for (const tier of pricingTiers) {\n      await db.insert(equipmentPricing).values({\n        equipmentId: insertedEquipment.id,\n        periodStart: tier.periodStart,\n        periodEnd: tier.periodEnd,\n        pricePerDay: tier.pricePerDay.toString(),\n        discountPercent: tier.discountPercent.toString(),\n      });\n    }\n\n    console.log(`Added pricing tiers for: ${insertedEquipment.name}`);\n    console.log('V20 PRO addition completed!');\n  } catch (error) {\n    console.error('Error adding V20 PRO:', error);\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  addV20Pro().then(() => process.exit(0));\n}\n\nexport { addV20Pro };","size_bytes":2189},"server/seed-heaters.js":{"content":"import { db } from './db.ts';\nimport { equipment, equipmentPricing } from '../shared/schema.ts';\n\nexport async function seedHeaters() {\n  console.log('Seeding heaters...');\n\n  const heaters = [\n    {\n      name: \"Arcotherm EC55 Master BV170E\",\n      description: \"Nagrzewnica olejowa EC55/BV170E z wentylatorem\",\n      model: \"EC55 / BV170E\",\n      power: \"55,0 kW / 49,0 kW\",\n      categoryId: 24, // Nagrzewnice\n      quantity: 2,\n      availableQuantity: 2,\n      fuelConsumption75: 4.6, // średnie zużycie paliwa l/h\n      dimensions: \"1750 x 540 x 1170 mm\",\n      weight: \"80 kg / 70 kg\",\n      engine: \"Pobór prądu: 850 W / 0,8 A\",\n      alternator: \"Nawiew: 1x rękaw VENT COMBO Ø500\",\n      fuelTankCapacity: 65\n    },\n    {\n      name: \"Arcotherm EC85 Master BV290E\", \n      description: \"Nagrzewnica olejowa EC85/BV290E z wentylatorem\",\n      model: \"EC85 / BV290E\",\n      power: \"85 kW\",\n      categoryId: 24, // Nagrzewnice\n      quantity: 1,\n      availableQuantity: 1,\n      fuelConsumption75: 7.17, // średnie zużycie paliwa l/h\n      dimensions: \"1750 x 540 x 1170 mm\",\n      weight: \"110 kg\",\n      engine: \"Pobór prądu: 1140 W / 4,6 A\",\n      alternator: \"Nawiew: 2x rękawy VENT COMBO Ø500\",\n      fuelTankCapacity: 105\n    },\n    {\n      name: \"Master BV 691 S\",\n      description: \"Nagrzewnica olejowa Master BV691S z wentylatorem\",\n      model: \"BV 691 S\",\n      power: \"do 225 kW\",\n      categoryId: 24, // Nagrzewnice\n      quantity: 1,\n      availableQuantity: 1,\n      fuelConsumption75: 21.44, // zużycie paliwa l/h\n      dimensions: \"2300 x 1000 x 2000 mm\",\n      weight: \"380 kg\",\n      engine: \"Pobór prądu: 12,6 A\",\n      alternator: \"Nawiew: 2x rękawy VENT COMBO Ø500\",\n      fuelTankCapacity: null // brak informacji o zbiorniku\n    },\n    {\n      name: \"Thermobile IMA 200\",\n      description: \"Nagrzewnica olejowa Thermobile IMA 200\",\n      model: \"IMA 200\",\n      power: \"200,0 kW\",\n      categoryId: 24, // Nagrzewnice\n      quantity: 1,\n      availableQuantity: 1,\n      fuelConsumption75: 19.4, // zużycie paliwa l/h\n      dimensions: \"3510 x 1150 x 1500 mm\",\n      weight: \"450 kg + waga kosza\",\n      engine: \"Pobór prądu: 15 A\",\n      alternator: \"Nawiew: 2x rękawy VENT COMBO Ø500\",\n      fuelTankCapacity: null // brak informacji o zbiorniku\n    },\n    {\n      name: \"Biemmedue Jumbo 235\",\n      description: \"Nagrzewnica olejowa Biemmedue Jumbo 235\",\n      model: \"Jumbo 235\",\n      power: \"235,0 kW\",\n      categoryId: 24, // Nagrzewnice\n      quantity: 1,\n      availableQuantity: 1,\n      fuelConsumption75: 18.65, // zużycie paliwa l/h\n      dimensions: \"1000 x 2240 x 1580 mm\",\n      weight: \"351 kg\",\n      engine: \"Pobór prądu: 1,86 kW\",\n      alternator: \"Nawiew: 2x rękawy VENT COMBO Ø500\",\n      fuelTankCapacity: null // brak informacji o zbiorniku\n    }\n  ];\n\n  // Standard pricing tiers for heaters (higher pricing for powerful equipment)\n  const standardPricingTiers = [\n    { periodStart: 1, periodEnd: 2, pricePerDay: 450, discountPercent: 0 },    // 1-2 dni\n    { periodStart: 3, periodEnd: 7, pricePerDay: 405, discountPercent: 10.00 }, // 3-7 dni\n    { periodStart: 8, periodEnd: 18, pricePerDay: 360, discountPercent: 20.00 }, // 8-18 dni\n    { periodStart: 19, periodEnd: 29, pricePerDay: 315, discountPercent: 30.00 }, // 19-29 dni\n    { periodStart: 30, periodEnd: null, pricePerDay: 270, discountPercent: 40.00 } // 30+ dni\n  ];\n\n  for (const heater of heaters) {\n    try {\n      // Insert heater\n      const [insertedHeater] = await db\n        .insert(equipment)\n        .values(heater)\n        .returning();\n\n      console.log(`Inserted heater: ${insertedHeater.name}`);\n\n      // Add standard pricing tiers\n      for (const tier of standardPricingTiers) {\n        await db.insert(equipmentPricing).values({\n          equipmentId: insertedHeater.id,\n          periodStart: tier.periodStart,\n          periodEnd: tier.periodEnd,\n          pricePerDay: tier.pricePerDay.toString(),\n          discountPercent: tier.discountPercent.toString(),\n        });\n      }\n\n      console.log(`Added pricing tiers for: ${insertedHeater.name}`);\n    } catch (error) {\n      console.error(`Error inserting heater ${heater.name}:`, error);\n    }\n  }\n\n  console.log('Heaters seeding completed!');\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedHeaters().then(() => process.exit(0));\n}","size_bytes":4405},"server/seed-lighting-towers.js":{"content":"import { db } from './db.js';\nimport { equipment, equipmentPricing } from '../shared/schema.js';\n\nconst lightingTowers = [\n  {\n    name: \"Maszt oświetleniowy Generac VT1\",\n    model: \"VT1\",\n    description: \"Maszt oświetleniowy Generac z 4 reflektorami LED o mocy 1000W każdy\",\n    categoryId: 25, // Maszty oświetleniowe\n    power: \"4x1000 W\",\n    quantity: 2,\n    availableQuantity: 2,\n    // Technical specifications\n    fuelConsumption75: 0.6, // 0.6l/h\n    dimensions: \"3400x1850x9000\", // DxSxW mm\n    weight: \"1200\",\n    engine: \"Generac\",\n    fuelTankCapacity: 100,\n    // Service costs (similar to generators)\n    oilFilterCost: 85.00,\n    airFilterCost: 45.00,\n    fuelFilterCost: 35.00,\n    maintenanceIntervalHours: 200,\n    isActive: true\n  },\n  {\n    name: \"Maszt oświetleniowy Generac V20\",\n    model: \"V20\", \n    description: \"Maszt oświetleniowy Generac z 4 reflektorami LED o mocy 320W każdy\",\n    categoryId: 25,\n    power: \"4x320 W\",\n    quantity: 3,\n    availableQuantity: 3,\n    fuelConsumption75: 0.6,\n    dimensions: \"2640x1900x8500\",\n    weight: \"1030\",\n    engine: \"Generac\",\n    fuelTankCapacity: 100,\n    oilFilterCost: 85.00,\n    airFilterCost: 45.00,\n    fuelFilterCost: 35.00,\n    maintenanceIntervalHours: 200,\n    isActive: true\n  },\n  {\n    name: \"Maszt oświetleniowy Atlas Copco H6+\",\n    model: \"H6+\",\n    description: \"Maszt oświetleniowy Atlas Copco z 4 reflektorami LED o mocy 350W każdy, zasięg do 6000m²\",\n    categoryId: 25,\n    power: \"4x350 W\",\n    quantity: 2,\n    availableQuantity: 2,\n    fuelConsumption75: 0.5,\n    dimensions: \"2090x1290x2500\",\n    weight: \"1020\",\n    engine: \"Atlas Copco\",\n    fuelTankCapacity: 110,\n    oilFilterCost: 90.00,\n    airFilterCost: 50.00,\n    fuelFilterCost: 40.00,\n    maintenanceIntervalHours: 200,\n    isActive: true\n  },\n  {\n    name: \"Maszt oświetleniowy Atlas Copco H5+\",\n    model: \"H5+\",\n    description: \"Maszt oświetleniowy Atlas Copco z 4 reflektorami LED o mocy 350W każy, zasięg 5000m²\",\n    categoryId: 25,\n    power: \"4x350 W\", \n    quantity: 2,\n    availableQuantity: 2,\n    fuelConsumption75: 0.5,\n    dimensions: \"2300x1280x2485\",\n    weight: \"1050\",\n    engine: \"Atlas Copco\",\n    fuelTankCapacity: 110,\n    oilFilterCost: 90.00,\n    airFilterCost: 50.00,\n    fuelFilterCost: 40.00,\n    maintenanceIntervalHours: 200,\n    isActive: true\n  }\n];\n\nconst lightingTowerPricing = [\n  // Generac VT1 - 350 zł/dzień\n  { equipmentId: null, periodStart: 1, periodEnd: 2, pricePerDay: \"350.00\", discountPercent: \"0.00\" },\n  { equipmentId: null, periodStart: 3, periodEnd: 7, pricePerDay: \"315.00\", discountPercent: \"10.00\" },\n  { equipmentId: null, periodStart: 8, periodEnd: 18, pricePerDay: \"280.00\", discountPercent: \"20.00\" },\n  { equipmentId: null, periodStart: 19, periodEnd: 29, pricePerDay: \"245.00\", discountPercent: \"30.00\" },\n  { equipmentId: null, periodStart: 30, periodEnd: null, pricePerDay: \"210.00\", discountPercent: \"40.00\" },\n\n  // Generac V20 - 320 zł/dzień  \n  { equipmentId: null, periodStart: 1, periodEnd: 2, pricePerDay: \"320.00\", discountPercent: \"0.00\" },\n  { equipmentId: null, periodStart: 3, periodEnd: 7, pricePerDay: \"288.00\", discountPercent: \"10.00\" },\n  { equipmentId: null, periodStart: 8, periodEnd: 18, pricePerDay: \"256.00\", discountPercent: \"20.00\" },\n  { equipmentId: null, periodStart: 19, periodEnd: 29, pricePerDay: \"224.00\", discountPercent: \"30.00\" },\n  { equipmentId: null, periodStart: 30, periodEnd: null, pricePerDay: \"192.00\", discountPercent: \"40.00\" },\n\n  // Atlas Copco H6+ - 380 zł/dzień\n  { equipmentId: null, periodStart: 1, periodEnd: 2, pricePerDay: \"380.00\", discountPercent: \"0.00\" },\n  { equipmentId: null, periodStart: 3, periodEnd: 7, pricePerDay: \"342.00\", discountPercent: \"10.00\" },\n  { equipmentId: null, periodStart: 8, periodEnd: 18, pricePerDay: \"304.00\", discountPercent: \"20.00\" },\n  { equipmentId: null, periodStart: 19, periodEnd: 29, pricePerDay: \"266.00\", discountPercent: \"30.00\" },\n  { equipmentId: null, periodStart: 30, periodEnd: null, pricePerDay: \"228.00\", discountPercent: \"40.00\" },\n\n  // Atlas Copco H5+ - 360 zł/dzień\n  { equipmentId: null, periodStart: 1, periodEnd: 2, pricePerDay: \"360.00\", discountPercent: \"0.00\" },\n  { equipmentId: null, periodStart: 3, periodEnd: 7, pricePerDay: \"324.00\", discountPercent: \"10.00\" },\n  { equipmentId: null, periodStart: 8, periodEnd: 18, pricePerDay: \"288.00\", discountPercent: \"20.00\" },\n  { equipmentId: null, periodStart: 19, periodEnd: 29, pricePerDay: \"252.00\", discountPercent: \"30.00\" },\n  { equipmentId: null, periodStart: 30, periodEnd: null, pricePerDay: \"216.00\", discountPercent: \"40.00\" }\n];\n\nexport async function seedLightingTowers() {\n  console.log('Adding lighting towers...');\n  \n  for (let i = 0; i < lightingTowers.length; i++) {\n    const tower = lightingTowers[i];\n    \n    const [insertedTower] = await db\n      .insert(equipment)\n      .values(tower)\n      .returning();\n    \n    console.log(`Added: ${tower.name}`);\n    \n    // Add pricing for this tower (5 pricing tiers per tower)\n    const towerPricing = lightingTowerPricing.slice(i * 5, (i + 1) * 5);\n    for (const pricing of towerPricing) {\n      await db\n        .insert(equipmentPricing)\n        .values({\n          ...pricing,\n          equipmentId: insertedTower.id\n        });\n    }\n  }\n  \n  console.log('Lighting towers seeded successfully!');\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedLightingTowers()\n    .then(() => process.exit(0))\n    .catch((error) => {\n      console.error('Error seeding lighting towers:', error);\n      process.exit(1);\n    });\n}\n","size_bytes":5634},"server/seed-generators.js":{"content":"import { db } from './db.ts';\nimport { equipment, equipmentPricing } from '../shared/schema.ts';\n\n// Script to add SDMO generators from the provided specification table\nconst generators = [\n  {\n    name: \"SDMO J33\",\n    model: \"J33\",\n    power: \"24/30 kW\",\n    description: \"Agregat prądotwórczy SDMO J33, moc 24kW ciągła / 30kW zapasowa\",\n    fuelConsumption75: 5.5, // l/h at 75% load\n    dimensions: \"2100x938x1385mm\",\n    weight: \"817kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 100\n  },\n  {\n    name: \"SDMO J44\",\n    model: \"J44\", \n    power: \"32/40 kW\",\n    description: \"Agregat prądotwórczy SDMO J44, moc 32kW ciągła / 40kW zapasowa\",\n    fuelConsumption75: 7.7,\n    dimensions: \"2100x938x1076mm\",\n    weight: \"868kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 240\n  },\n  {\n    name: \"SDMO J44 DW\",\n    model: \"J44 DW\",\n    power: \"32/40 kW\", \n    description: \"Agregat prądotwórczy SDMO J44 DW, wersja wyciszona\",\n    fuelConsumption75: 7.7,\n    dimensions: \"2100x940x1088mm\",\n    weight: \"1088kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 470\n  },\n  {\n    name: \"SDMO R44 C3\",\n    model: \"R44 C3\",\n    power: \"40/50 kW\",\n    description: \"Agregat prądotwórczy SDMO R44 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 8.1,\n    dimensions: \"2200x1000x1530mm\", \n    weight: \"1112kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 220\n  },\n  {\n    name: \"SDMO R66\",\n    model: \"R66\",\n    power: \"48/60 kW\",\n    description: \"Agregat prądotwórczy SDMO R66, moc 48kW ciągła / 60kW zapasowa\",\n    fuelConsumption75: 11.9,\n    dimensions: \"2545x1150x1840mm\",\n    weight: \"1654kg\", \n    engine: \"SDMO\",\n    fuelTankCapacity: 390\n  },\n  {\n    name: \"SDMO R66 C3\",\n    model: \"R66 C3\",\n    power: \"48/60 kW\",\n    description: \"Agregat prądotwórczy SDMO R66 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 11.9,\n    dimensions: \"2545x1150x1840mm\",\n    weight: \"1654kg\",\n    engine: \"SDMO\", \n    fuelTankCapacity: 390\n  },\n  {\n    name: \"SDMO R110\",\n    model: \"R110\",\n    power: \"80/100 kW\",\n    description: \"Agregat prądotwórczy SDMO R110, moc 80kW ciągła / 100kW zapasowa\",\n    fuelConsumption75: 18.4,\n    dimensions: \"2860x1190x2000mm\",\n    weight: \"2087kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 527\n  },\n  {\n    name: \"SDMO R110 C3\",\n    model: \"R110 C3\", \n    power: \"80/100 kW\",\n    description: \"Agregat prądotwórczy SDMO R110 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 18.4,\n    dimensions: \"2860x1190x2000mm\",\n    weight: \"2087kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 527\n  },\n  {\n    name: \"SDMO R110 C5\",\n    model: \"R110 C5\",\n    power: \"80/100 kW\", \n    description: \"Agregat prądotwórczy SDMO R110 C5, automatyka 5. stopnia\",\n    fuelConsumption75: 24.5,\n    dimensions: \"3160x1190x2230mm\",\n    weight: \"2460kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 475\n  },\n  {\n    name: \"SDMO R165\",\n    model: \"R165\",\n    power: \"120/150 kW\",\n    description: \"Agregat prądotwórczy SDMO R165, moc 120kW ciągła / 150kW zapasowa\", \n    fuelConsumption75: 24.5,\n    dimensions: \"3520x1190x2120mm\",\n    weight: \"2618kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 860\n  },\n  {\n    name: \"SDMO R165 C3\",\n    model: \"R165 C3\",\n    power: \"120/150 kW\",\n    description: \"Agregat prądotwórczy SDMO R165 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 24.5,\n    dimensions: \"3520x1190x2120mm\", \n    weight: \"2618kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 860\n  },\n  {\n    name: \"SDMO J165\",\n    model: \"J165\",\n    power: \"120/150 kW\",\n    description: \"Agregat prądotwórczy SDMO J165, seria J\",\n    fuelConsumption75: 26.1,\n    dimensions: \"3590x1145x1775mm\",\n    weight: \"2198kg\",\n    engine: \"SDMO\", \n    fuelTankCapacity: 334\n  },\n  {\n    name: \"SDMO J165 C3\",\n    model: \"J165 C3\",\n    power: \"119/149 kW\",\n    description: \"Agregat prądotwórczy SDMO J165 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 26.1,\n    dimensions: \"3590x1200x2072mm\",\n    weight: \"2590kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 868\n  },\n  {\n    name: \"SDMO J165 K\",\n    model: \"J165 K\", \n    power: \"120/150 kW\",\n    description: \"Agregat prądotwórczy SDMO J165 K, wersja kompaktowa\",\n    fuelConsumption75: 25.0,\n    dimensions: \"3508x1200x1830mm\",\n    weight: \"2198kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 340\n  },\n  {\n    name: \"SDMO R220 C3\",\n    model: \"R220 C3\",\n    power: \"160/200 kW\",\n    description: \"Agregat prądotwórczy SDMO R220 C3, automatyka 3. stopnia\", \n    fuelConsumption75: 37.6,\n    dimensions: \"3520x1190x2120mm\",\n    weight: \"2786kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 860\n  },\n  {\n    name: \"SDMO R220 C5\",\n    model: \"R220 C5\",\n    power: \"120/150 kW\",\n    description: \"Agregat prądotwórczy SDMO R220 C5, automatyka 5. stopnia\",\n    fuelConsumption75: 26.7,\n    dimensions: \"2884x1191x2368mm\",\n    weight: \"3454kg\",\n    engine: \"SDMO\", \n    fuelTankCapacity: 735\n  },\n  {\n    name: \"SDMO J220\",\n    model: \"J220\",\n    power: \"160/200 kW\", \n    description: \"Agregat prądotwórczy SDMO J220, seria J\",\n    fuelConsumption75: 35.2,\n    dimensions: \"3590x1200x2072mm\",\n    weight: \"2930kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 1790\n  },\n  {\n    name: \"SDMO V350\",\n    model: \"V350\",\n    power: \"254/318 kW\",\n    description: \"Agregat prądotwórczy SDMO V350, wysoka moc\",\n    fuelConsumption75: 55.0,\n    dimensions: \"4475x1410x2430mm\",\n    weight: \"4035kg\", \n    engine: \"SDMO\",\n    fuelTankCapacity: 470\n  },\n  {\n    name: \"SDMO D440\",\n    model: \"D440\", \n    power: \"320/400 kW\",\n    description: \"Agregat prądotwórczy SDMO D440, seria przemysłowa\",\n    fuelConsumption75: 65.1,\n    dimensions: \"5030x1560x2435mm\",\n    weight: \"4125kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 500\n  },\n  {\n    name: \"SDMO D440 DW\",\n    model: \"D440 DW\",\n    power: \"320/400 kW\",\n    description: \"Agregat prądotwórczy SDMO D440 DW, wersja wyciszona\",\n    fuelConsumption75: 65.1,\n    dimensions: \"5083x1560x2700mm\", \n    weight: \"4915kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 1770\n  },\n  {\n    name: \"SDMO D550\",\n    model: \"D550\",\n    power: \"400/500 kW\",\n    description: \"Agregat prądotwórczy SDMO D550, najwyższa moc\",\n    fuelConsumption75: 83.4,\n    dimensions: \"5030x1560x2435mm\",\n    weight: \"4257kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 500\n  },\n  {\n    name: \"SDMO R550 C3\", \n    model: \"R550 C3\",\n    power: \"400/500 kW\",\n    description: \"Agregat prądotwórczy SDMO R550 C3, automatyka 3. stopnia\",\n    fuelConsumption75: 79.8,\n    dimensions: \"5000x1611x2600mm\",\n    weight: \"6082kg\",\n    engine: \"SDMO\",\n    fuelTankCapacity: 1481\n  }\n];\n\nasync function seedGenerators() {\n  console.log('Seeding generators...');\n  \n  const generatorsCategoryId = 26; // Agregaty prądotwórcze\n  \n  try {\n    for (const generator of generators) {\n      console.log(`Adding generator: ${generator.name}`);\n      \n      const [insertedGenerator] = await db\n        .insert(equipment)\n        .values({\n          ...generator,\n          categoryId: generatorsCategoryId,\n          isActive: true\n        })\n        .returning();\n      \n      console.log(`✓ Added generator: ${generator.name}`);\n      \n      // Add standard pricing tiers\n      const pricingTiers = [\n        { periodStart: 1, periodEnd: 2, pricePerDay: \"450.00\", discountPercent: \"0.00\" },\n        { periodStart: 3, periodEnd: 7, pricePerDay: \"405.00\", discountPercent: \"10.00\" },\n        { periodStart: 8, periodEnd: 18, pricePerDay: \"360.00\", discountPercent: \"20.00\" },\n        { periodStart: 19, periodEnd: 29, pricePerDay: \"315.00\", discountPercent: \"30.00\" },\n        { periodStart: 30, periodEnd: null, pricePerDay: \"270.00\", discountPercent: \"40.00\" }\n      ];\n      \n      for (const tier of pricingTiers) {\n        await db.insert(equipmentPricing).values({\n          equipmentId: insertedGenerator.id,\n          ...tier\n        });\n      }\n      \n      console.log(`Added pricing tiers for: ${generator.name}`);\n    }\n    \n    console.log('Generators seeding completed!');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error seeding generators:', error);\n    process.exit(1);\n  }\n}\n\nseedGenerators();","size_bytes":8102},"client/src/components/service-costs-manager.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trash2, Plus, Save, Edit, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { \n  EquipmentWithCategory, \n  EquipmentServiceCosts, \n  EquipmentServiceItems,\n  InsertEquipmentServiceCosts,\n  InsertEquipmentServiceItems\n} from \"@shared/schema\";\n\ninterface ServiceCostsManagerProps {\n  equipment: EquipmentWithCategory;\n  onClose: () => void;\n}\n\nexport function ServiceCostsManager({ equipment, onClose }: ServiceCostsManagerProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch service costs\n  const { data: serviceCosts, isLoading: serviceCostsLoading } = useQuery<EquipmentServiceCosts | null>({\n    queryKey: [`/api/equipment/${equipment.id}/service-costs`],\n  });\n\n  // Fetch service items\n  const { data: serviceItems = [], isLoading: serviceItemsLoading } = useQuery<EquipmentServiceItems[]>({\n    queryKey: [`/api/equipment/${equipment.id}/service-items`],\n  });\n\n  // Local state for service costs form\n  const [serviceCostsForm, setServiceCostsForm] = useState({\n    serviceIntervalMonths: 0,\n    serviceIntervalKm: 0,\n    serviceIntervalMotohours: 0,\n    workerHours: 2,\n    workerCostPerHour: 100,\n  });\n\n  // Check equipment category for different interval types\n  const isVehicle = equipment.category.name === 'Pojazdy';\n  const isEngineEquipment = equipment.category.name === 'Agregaty prądotwórcze' || equipment.category.name === 'Maszty oświetleniowe';\n\n  // Local state for service items\n  const [localServiceItems, setLocalServiceItems] = useState<EquipmentServiceItems[]>([]);\n  const [editingItemId, setEditingItemId] = useState<number | null>(null);\n  const [newItemForm, setNewItemForm] = useState({\n    itemName: \"\",\n    itemCost: \"0\",\n    sortOrder: 0,\n  });\n  const [showNewItemForm, setShowNewItemForm] = useState(false);\n\n  // Update forms when data loads\n  useEffect(() => {\n    if (serviceCosts) {\n      setServiceCostsForm({\n        serviceIntervalMonths: serviceCosts.serviceIntervalMonths || 0,\n        serviceIntervalKm: (serviceCosts as any).serviceIntervalKm || 0,\n        serviceIntervalMotohours: (serviceCosts as any).serviceIntervalMotohours || 0,\n        workerHours: parseFloat(serviceCosts.workerHours.toString()),\n        workerCostPerHour: parseFloat(serviceCosts.workerCostPerHour.toString()),\n      });\n    }\n  }, [serviceCosts]);\n\n  useEffect(() => {\n    setLocalServiceItems([...serviceItems]);\n  }, [serviceItems]);\n\n  // Mutations\n  const updateServiceCostsMutation = useMutation({\n    mutationFn: async (data: InsertEquipmentServiceCosts) => {\n      return await apiRequest(`/api/equipment/${equipment.id}/service-costs`, 'POST', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/equipment/${equipment.id}/service-costs`] });\n      toast({\n        title: \"Sukces\",\n        description: \"Koszty serwisu zostały zaktualizowane\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować kosztów serwisu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addServiceItemMutation = useMutation({\n    mutationFn: async (data: InsertEquipmentServiceItems) => {\n      return await apiRequest(`/api/equipment/${equipment.id}/service-items`, 'POST', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/equipment/${equipment.id}/service-items`] });\n      setShowNewItemForm(false);\n      setNewItemForm({ itemName: \"\", itemCost: \"0\", sortOrder: 0 });\n      toast({\n        title: \"Sukces\",\n        description: \"Element serwisu został dodany\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać elementu serwisu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceItemMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertEquipmentServiceItems> }) => {\n      return await apiRequest(`/api/equipment-service-items/${id}`, 'PATCH', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/equipment/${equipment.id}/service-items`] });\n      setEditingItemId(null);\n      toast({\n        title: \"Sukces\",\n        description: \"Element serwisu został zaktualizowany\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować elementu serwisu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceItemMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(`/api/equipment-service-items/${id}`, 'DELETE');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/equipment/${equipment.id}/service-items`] });\n      toast({\n        title: \"Sukces\",\n        description: \"Element serwisu został usunięty\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć elementu serwisu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveServiceCosts = () => {\n    const data: any = {\n      equipmentId: equipment.id,\n      workerHours: serviceCostsForm.workerHours.toString(),\n      workerCostPerHour: serviceCostsForm.workerCostPerHour.toString(),\n    };\n    \n    if (isVehicle) {\n      data.serviceIntervalKm = serviceCostsForm.serviceIntervalKm;\n    } else if (isEngineEquipment) {\n      data.serviceIntervalMotohours = serviceCostsForm.serviceIntervalMotohours;\n    } else {\n      data.serviceIntervalMonths = serviceCostsForm.serviceIntervalMonths;\n    }\n    \n    updateServiceCostsMutation.mutate(data);\n  };\n\n  const handleAddServiceItem = () => {\n    const maxOrder = Math.max(0, ...localServiceItems.map(item => item.sortOrder));\n    addServiceItemMutation.mutate({\n      equipmentId: equipment.id,\n      itemName: newItemForm.itemName,\n      itemCost: newItemForm.itemCost,\n      sortOrder: maxOrder + 1,\n    });\n  };\n\n  const handleUpdateServiceItem = (id: number, itemName: string, itemCost: string) => {\n    updateServiceItemMutation.mutate({\n      id,\n      data: { itemName, itemCost },\n    });\n  };\n\n  const handleDeleteServiceItem = (id: number) => {\n    if (confirm(\"Czy na pewno chcesz usunąć ten element serwisu?\")) {\n      deleteServiceItemMutation.mutate(id);\n    }\n  };\n\n  if (serviceCostsLoading || serviceItemsLoading) {\n    return (\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle>Ładowanie...</CardTitle>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Koszty serwisu - {equipment.name}</CardTitle>\n          <Button variant=\"outline\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Service Costs Configuration */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Konfiguracja serwisu</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"serviceInterval\">\n                {isVehicle ? \"Interwał serwisu (km)\" : \n                 isEngineEquipment ? \"Interwał serwisu (mth)\" :\n                 \"Interwał serwisu (miesiące)\"}\n              </Label>\n              <Input\n                id=\"serviceInterval\"\n                type=\"number\"\n                value={\n                  isVehicle ? serviceCostsForm.serviceIntervalKm :\n                  isEngineEquipment ? serviceCostsForm.serviceIntervalMotohours :\n                  serviceCostsForm.serviceIntervalMonths\n                }\n                onChange={(e) => setServiceCostsForm(prev => ({\n                  ...prev,\n                  ...(isVehicle \n                    ? { serviceIntervalKm: parseInt(e.target.value) || 0 }\n                    : isEngineEquipment\n                    ? { serviceIntervalMotohours: parseInt(e.target.value) || 0 }\n                    : { serviceIntervalMonths: parseInt(e.target.value) || 0 }\n                  )\n                }))}\n                min=\"0\"\n                placeholder={\n                  isVehicle ? \"np. 15000\" :\n                  isEngineEquipment ? \"np. 500\" :\n                  \"np. 12\"\n                }\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"workerHours\">Roboczogodziny</Label>\n              <Input\n                id=\"workerHours\"\n                type=\"number\"\n                value={serviceCostsForm.workerHours}\n                onChange={(e) => setServiceCostsForm(prev => ({\n                  ...prev,\n                  workerHours: parseFloat(e.target.value) || 0\n                }))}\n                min=\"0\"\n                step=\"0.5\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"workerCost\">Koszt za godzinę (zł)</Label>\n              <Input\n                id=\"workerCost\"\n                type=\"number\"\n                value={serviceCostsForm.workerCostPerHour}\n                onChange={(e) => setServiceCostsForm(prev => ({\n                  ...prev,\n                  workerCostPerHour: parseFloat(e.target.value) || 0\n                }))}\n                min=\"0\"\n                step=\"0.01\"\n              />\n            </div>\n          </div>\n          <Button \n            onClick={handleSaveServiceCosts}\n            disabled={updateServiceCostsMutation.isPending}\n          >\n            <Save className=\"h-4 w-4 mr-2\" />\n            {updateServiceCostsMutation.isPending ? \"Zapisywanie...\" : \"Zapisz konfigurację\"}\n          </Button>\n        </div>\n\n        <Separator />\n\n        {/* Service Items Management */}\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-semibold\">Elementy serwisu</h3>\n            <Button \n              onClick={() => setShowNewItemForm(true)}\n              disabled={showNewItemForm}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Dodaj element\n            </Button>\n          </div>\n\n          {/* New Item Form */}\n          {showNewItemForm && (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"newItemName\">Nazwa elementu</Label>\n                    <Input\n                      id=\"newItemName\"\n                      value={newItemForm.itemName}\n                      onChange={(e) => setNewItemForm(prev => ({\n                        ...prev,\n                        itemName: e.target.value\n                      }))}\n                      placeholder=\"np. Filtry, Oleje, itp.\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newItemCost\">Koszt (zł)</Label>\n                    <Input\n                      id=\"newItemCost\"\n                      type=\"number\"\n                      value={newItemForm.itemCost}\n                      onChange={(e) => setNewItemForm(prev => ({\n                        ...prev,\n                        itemCost: e.target.value\n                      }))}\n                      min=\"0\"\n                      step=\"0.01\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex gap-2 mt-4\">\n                  <Button \n                    onClick={handleAddServiceItem}\n                    disabled={!newItemForm.itemName || addServiceItemMutation.isPending}\n                  >\n                    {addServiceItemMutation.isPending ? \"Dodawanie...\" : \"Dodaj\"}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setShowNewItemForm(false);\n                      setNewItemForm({ itemName: \"\", itemCost: \"0\", sortOrder: 0 });\n                    }}\n                  >\n                    Anuluj\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Service Items List */}\n          <div className=\"space-y-2\">\n            {localServiceItems.length === 0 ? (\n              <p className=\"text-gray-500 text-center py-4\">\n                Brak skonfigurowanych elementów serwisu\n              </p>\n            ) : (\n              localServiceItems.map((item) => (\n                <Card key={item.id}>\n                  <CardContent className=\"pt-4\">\n                    {editingItemId === item.id ? (\n                      <EditServiceItemForm\n                        item={item}\n                        onSave={(itemName, itemCost) => handleUpdateServiceItem(item.id, itemName, itemCost)}\n                        onCancel={() => setEditingItemId(null)}\n                        isLoading={updateServiceItemMutation.isPending}\n                      />\n                    ) : (\n                      <div className=\"flex justify-between items-center\">\n                        <div>\n                          <span className=\"font-medium\">{item.itemName}</span>\n                          <span className=\"text-gray-500 ml-4\">\n                            {parseFloat(item.itemCost).toFixed(2)} zł\n                          </span>\n                          {item.itemName === \"Roboczogodziny serwisowe\" && (\n                            <span className=\"text-xs text-muted-foreground ml-2 italic\">\n                              (automatycznie kalkulowane)\n                            </span>\n                          )}\n                        </div>\n                        {item.itemName !== \"Roboczogodziny serwisowe\" ? (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => setEditingItemId(item.id)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDeleteServiceItem(item.id)}\n                              disabled={deleteServiceItemMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"text-xs text-muted-foreground\">\n                            Nie można edytować\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface EditServiceItemFormProps {\n  item: EquipmentServiceItems;\n  onSave: (itemName: string, itemCost: string) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}\n\nfunction EditServiceItemForm({ item, onSave, onCancel, isLoading }: EditServiceItemFormProps) {\n  const [itemName, setItemName] = useState(item.itemName);\n  const [itemCost, setItemCost] = useState(item.itemCost);\n\n  const handleSave = () => {\n    if (itemName.trim()) {\n      onSave(itemName.trim(), itemCost);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"editItemName\">Nazwa elementu</Label>\n          <Input\n            id=\"editItemName\"\n            value={itemName}\n            onChange={(e) => setItemName(e.target.value)}\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"editItemCost\">Koszt (zł)</Label>\n          <Input\n            id=\"editItemCost\"\n            type=\"number\"\n            value={itemCost}\n            onChange={(e) => setItemCost(e.target.value)}\n            min=\"0\"\n            step=\"0.01\"\n          />\n        </div>\n      </div>\n      <div className=\"flex gap-2\">\n        <Button \n          onClick={handleSave}\n          disabled={!itemName.trim() || isLoading}\n          size=\"sm\"\n        >\n          {isLoading ? \"Zapisywanie...\" : \"Zapisz\"}\n        </Button>\n        <Button \n          variant=\"outline\" \n          onClick={onCancel}\n          size=\"sm\"\n        >\n          Anuluj\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":17215},"client/src/components/equipment-additional-manager.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Trash2, Plus } from \"lucide-react\";\n\ninterface EquipmentAdditional {\n  id: number;\n  equipmentId: number;\n  type: \"additional\" | \"accessories\";\n  name: string;\n  price: string;\n  position: number;\n}\n\ninterface EquipmentAdditionalManagerProps {\n  equipmentId: number;\n  equipmentName: string;\n}\n\nexport default function EquipmentAdditionalManager({ equipmentId, equipmentName }: EquipmentAdditionalManagerProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showAdditional, setShowAdditional] = useState(false);\n  const [showAccessories, setShowAccessories] = useState(false);\n\n  const { data: additionalItems = [] } = useQuery<EquipmentAdditional[]>({\n    queryKey: [\"/api/equipment\", equipmentId, \"additional\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/equipment/${equipmentId}/additional`);\n      return response.json();\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: { type: string; name: string; price: string; position: number }) => {\n      const response = await apiRequest(\"/api/equipment-additional\", \"POST\", {\n        equipmentId,\n        ...data,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\", equipmentId, \"additional\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Pozycja została dodana\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Brak autoryzacji\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać pozycji\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: { id: number; name: string; price: string }) => {\n      const response = await apiRequest(`/api/equipment-additional/${data.id}`, \"PATCH\", {\n        name: data.name,\n        price: data.price,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\", equipmentId, \"additional\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Pozycja została zaktualizowana\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Brak autoryzacji\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować pozycji\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment-additional/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\", equipmentId, \"additional\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Pozycja została usunięta\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Brak autoryzacji\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć pozycji\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const additionalEquipment = additionalItems.filter(item => item.type === \"additional\");\n  const accessories = additionalItems.filter(item => item.type === \"accessories\");\n\n  const handleAddItem = (type: \"additional\" | \"accessories\") => {\n    const existingItems = type === \"additional\" ? additionalEquipment : accessories;\n    const nextPosition = existingItems.length + 1;\n    \n    if (nextPosition > 4) {\n      toast({\n        title: \"Limit osiągnięty\",\n        description: \"Możesz dodać maksymalnie 4 pozycje\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMutation.mutate({\n      type,\n      name: `Nowa pozycja ${nextPosition}`,\n      price: \"0\",\n      position: nextPosition,\n    });\n  };\n\n  const handleUpdateItem = (id: number, name: string, price: string) => {\n    updateMutation.mutate({ id, name, price });\n  };\n\n  const handleDeleteItem = (id: number) => {\n    if (confirm(\"Czy na pewno chcesz usunąć tę pozycję?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const renderItemsSection = (\n    title: string,\n    items: EquipmentAdditional[],\n    type: \"additional\" | \"accessories\",\n    show: boolean,\n    setShow: (show: boolean) => void\n  ) => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={`show-${type}`}\n          checked={show}\n          onCheckedChange={setShow}\n        />\n        <Label htmlFor={`show-${type}`} className=\"text-lg font-semibold\">\n          {title}\n        </Label>\n      </div>\n\n      {show && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n            <CardTitle className=\"text-base\">{title}</CardTitle>\n            <Button\n              size=\"sm\"\n              onClick={() => handleAddItem(type)}\n              disabled={items.length >= 4 || createMutation.isPending}\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Dodaj pozycję\n            </Button>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {items.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-4\">\n                Brak pozycji do wyświetlenia\n              </p>\n            ) : (\n              items.map((item) => (\n                <ItemRow\n                  key={item.id}\n                  item={item}\n                  onUpdate={handleUpdateItem}\n                  onDelete={handleDeleteItem}\n                  isUpdating={updateMutation.isPending}\n                  isDeleting={deleteMutation.isPending}\n                />\n              ))\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold\">\n          Wyposażenie dodatkowe - {equipmentName}\n        </h3>\n      </div>\n\n      {renderItemsSection(\n        \"Wyposażenie dodatkowe\",\n        additionalEquipment,\n        \"additional\",\n        showAdditional,\n        setShowAdditional\n      )}\n\n      {renderItemsSection(\n        \"Akcesoria\",\n        accessories,\n        \"accessories\",\n        showAccessories,\n        setShowAccessories\n      )}\n    </div>\n  );\n}\n\ninterface ItemRowProps {\n  item: EquipmentAdditional;\n  onUpdate: (id: number, name: string, price: string) => void;\n  onDelete: (id: number) => void;\n  isUpdating: boolean;\n  isDeleting: boolean;\n}\n\nfunction ItemRow({ item, onUpdate, onDelete, isUpdating, isDeleting }: ItemRowProps) {\n  const [name, setName] = useState(item.name);\n  const [price, setPrice] = useState(item.price);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const handleNameChange = (value: string) => {\n    setName(value);\n    setHasChanges(value !== item.name || price !== item.price);\n  };\n\n  const handlePriceChange = (value: string) => {\n    setPrice(value);\n    setHasChanges(name !== item.name || value !== item.price);\n  };\n\n  const handleSave = () => {\n    onUpdate(item.id, name, price);\n    setHasChanges(false);\n  };\n\n  return (\n    <div className=\"flex items-center space-x-4 p-4 border rounded-lg\">\n      <div className=\"flex-1\">\n        <Label htmlFor={`name-${item.id}`}>Nazwa</Label>\n        <Input\n          id={`name-${item.id}`}\n          value={name}\n          onChange={(e) => handleNameChange(e.target.value)}\n          placeholder=\"Nazwa pozycji\"\n        />\n      </div>\n      <div className=\"w-32\">\n        <Label htmlFor={`price-${item.id}`}>Cena (zł)</Label>\n        <Input\n          id={`price-${item.id}`}\n          type=\"number\"\n          step=\"0.01\"\n          value={price}\n          onChange={(e) => handlePriceChange(e.target.value)}\n          placeholder=\"0.00\"\n        />\n      </div>\n      <div className=\"flex space-x-2\">\n        {hasChanges && (\n          <Button\n            size=\"sm\"\n            onClick={handleSave}\n            disabled={isUpdating}\n          >\n            Zapisz\n          </Button>\n        )}\n        <Button\n          size=\"sm\"\n          variant=\"destructive\"\n          onClick={() => onDelete(item.id)}\n          disabled={isDeleting}\n        >\n          <Trash2 className=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":9735},"client/src/pages/admin-needs-assessment.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Plus, Edit, Trash2, ClipboardList, Move } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst questionSchema = z.object({\n  category: z.string().min(1, \"Kategoria jest wymagana\"),\n  question: z.string().min(1, \"Pytanie jest wymagane\"),\n  type: z.enum([\"text\", \"textarea\", \"checkbox\", \"radio\", \"select\", \"number\", \"multiple_choice\", \"equipment_option\"]),\n  position: z.number().min(1),\n  isRequired: z.boolean().default(false),\n  isActive: z.boolean().default(true),\n  categoryType: z.enum([\"general\", \"equipment\"]).default(\"general\"),\n});\n\ntype QuestionFormData = z.infer<typeof questionSchema>;\n\ninterface NeedsAssessmentQuestion {\n  id: number;\n  category: string;\n  question: string;\n  type: string;\n  position: number;\n  isRequired: boolean;\n  isActive: boolean;\n  categoryType: string;\n}\n\nconst questionTypes = [\n  { value: \"text\", label: \"Tekst\" },\n  { value: \"textarea\", label: \"Długi tekst\" },\n  { value: \"checkbox\", label: \"Checkbox\" },\n  { value: \"radio\", label: \"Radio (Tak/Nie)\" },\n  { value: \"select\", label: \"Lista wyboru\" },\n  { value: \"number\", label: \"Liczba\" },\n  { value: \"multiple_choice\", label: \"Nagłówek wyboru\" },\n  { value: \"equipment_option\", label: \"Opcja wyposażenia\" },\n];\n\n// Tę listę będziemy budować dynamicznie z rzeczywistych danych\n\nexport default function AdminNeedsAssessment() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [isDeleteCategoryDialogOpen, setIsDeleteCategoryDialogOpen] = useState(false);\n  const [editingQuestion, setEditingQuestion] = useState<NeedsAssessmentQuestion | null>(null);\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [newCategoryName, setNewCategoryName] = useState(\"\");\n  const [newCategoryType, setNewCategoryType] = useState(\"general\");\n  const [categoryToDelete, setCategoryToDelete] = useState(\"\");\n\n  const form = useForm<QuestionFormData>({\n    resolver: zodResolver(questionSchema),\n    defaultValues: {\n      category: \"\",\n      question: \"\",\n      type: \"text\",\n      position: 1,\n      isRequired: false,\n      isActive: true,\n      categoryType: \"general\",\n    },\n  });\n\n  const { data: questions = [], isLoading } = useQuery<NeedsAssessmentQuestion[]>({\n    queryKey: [\"/api/needs-assessment/questions\"],\n  });\n\n  // Budujemy listę kategorii z rzeczywistych danych z bazy\n  const allCategories = useMemo(() => {\n    if (!questions) return [];\n    const uniqueCategories = new Set(questions.map(q => q.category));\n    const categories = Array.from(uniqueCategories);\n    return categories.sort();\n  }, [questions]);\n\n  const createQuestionMutation = useMutation({\n    mutationFn: async (data: QuestionFormData) => {\n      const response = await apiRequest(\"/api/needs-assessment/questions\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sukces\", description: \"Pytanie zostało dodane\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/questions\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Błąd\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateQuestionMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<QuestionFormData> }) => {\n      const response = await apiRequest(`/api/needs-assessment/questions/${id}`, \"PATCH\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Sukces\", description: \"Pytanie zostało zaktualizowane\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/questions\"] });\n      setEditingQuestion(null);\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ title: \"Błąd\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteQuestionMutation = useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest(`/api/needs-assessment/questions/${id}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Sukces\", description: \"Pytanie zostało usunięte\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/questions\"] });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Błąd\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const toggleActiveStatusMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: number; isActive: boolean }) => {\n      const response = await apiRequest(`/api/needs-assessment/questions/${id}`, \"PATCH\", { isActive });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/questions\"] });\n    },\n  });\n\n  const onSubmit = (data: QuestionFormData) => {\n    if (editingQuestion) {\n      updateQuestionMutation.mutate({ id: editingQuestion.id, data });\n    } else {\n      createQuestionMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (question: NeedsAssessmentQuestion) => {\n    setEditingQuestion(question);\n    form.reset({\n      category: question.category,\n      question: question.question,\n      type: question.type as any,\n      position: question.position,\n      isRequired: question.isRequired,\n      isActive: question.isActive,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Czy na pewno chcesz usunąć to pytanie?\")) {\n      deleteQuestionMutation.mutate(id);\n    }\n  };\n\n  const handleAddCategory = () => {\n    if (newCategory.trim()) {\n      form.setValue(\"category\", newCategory.trim());\n      setNewCategory(\"\");\n    }\n  };\n\n  const handleCreateCategory = async () => {\n    if (!newCategoryName.trim()) return;\n    \n    try {\n      // Tworzymy pytanie typu \"multiple_choice\" jako nagłówek kategorii\n      const categoryData = {\n        category: newCategoryName.trim(),\n        question: `Wybierz opcje dla kategorii: ${newCategoryName.trim()}`,\n        type: \"multiple_choice\" as const,\n        position: 1,\n        isRequired: false,\n        isActive: true,\n        categoryType: newCategoryType as \"general\" | \"equipment\",\n      };\n      \n      await createQuestionMutation.mutateAsync(categoryData);\n      \n      // Automatycznie tworzymy też kategorię wyposażenia (tylko dla kategorii sprzętu)\n      if (newCategoryType === \"equipment\") {\n        const equipmentCategoryData = {\n          category: `${newCategoryName.trim()} - wyposażenie`,\n          question: `Dodatkowe wyposażenie i akcesoria dla: ${newCategoryName.trim()}`,\n          type: \"multiple_choice\" as const, \n          position: 1,\n          isRequired: false,\n          isActive: true,\n          categoryType: \"equipment\" as const,\n        };\n        \n        await createQuestionMutation.mutateAsync(equipmentCategoryData);\n      }\n      \n      const message = newCategoryType === \"equipment\" \n        ? `Kategoria \"${newCategoryName}\" i \"${newCategoryName} - wyposażenie\" zostały utworzone`\n        : `Kategoria \"${newCategoryName}\" została utworzona`;\n      \n      toast({ \n        title: \"Sukces\", \n        description: message\n      });\n      \n      setNewCategoryName(\"\");\n      setNewCategoryType(\"general\");\n      setIsCategoryDialogOpen(false);\n    } catch (error) {\n      toast({ \n        title: \"Błąd\", \n        description: \"Nie udało się utworzyć kategorii\",\n        variant: \"destructive\" \n      });\n    }\n  };\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (categoryName: string) => {\n      await apiRequest(`/api/needs-assessment/categories/${encodeURIComponent(categoryName)}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      toast({ title: \"Sukces\", description: \"Kategoria została usunięta\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/questions\"] });\n      setIsDeleteCategoryDialogOpen(false);\n      setCategoryToDelete(\"\");\n    },\n    onError: (error: any) => {\n      toast({ title: \"Błąd\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const handleDeleteCategory = () => {\n    if (categoryToDelete.trim()) {\n      deleteCategoryMutation.mutate(categoryToDelete);\n    }\n  };\n\n  const groupedQuestions = questions.reduce((acc, question) => {\n    if (!acc[question.category]) {\n      acc[question.category] = [];\n    }\n    acc[question.category].push(question);\n    return acc;\n  }, {} as Record<string, NeedsAssessmentQuestion[]>);\n\n  if (isLoading) {\n    return <div>Ładowanie...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-3\">\n            <ClipboardList className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold\">Zarządzanie Badaniem Potrzeb</h1>\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => { setEditingQuestion(null); form.reset(); }}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Dodaj pytanie\n                </Button>\n              </DialogTrigger>\n            </Dialog>\n            \n            <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Dodaj kategorię\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Dodaj nową kategorię sprzętu</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"newCategoryName\">Nazwa kategorii</Label>\n                    <Input\n                      id=\"newCategoryName\"\n                      value={newCategoryName}\n                      onChange={(e) => setNewCategoryName(e.target.value)}\n                      placeholder=\"np. Samochody\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"newCategoryType\">Typ kategorii</Label>\n                    <Select value={newCategoryType} onValueChange={setNewCategoryType}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Wybierz typ kategorii\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"general\">Kategoria ogólna</SelectItem>\n                        <SelectItem value=\"equipment\">Kategoria sprzętu</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsCategoryDialogOpen(false)}\n                    >\n                      Anuluj\n                    </Button>\n                    <Button\n                      onClick={handleCreateCategory}\n                      disabled={!newCategoryName.trim()}\n                    >\n                      Dodaj kategorię\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n            \n            <Dialog open={isDeleteCategoryDialogOpen} onOpenChange={setIsDeleteCategoryDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"destructive\">\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Usuń kategorię\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Usuń kategorię</DialogTitle>\n                  <DialogDescription>\n                    Wybierz kategorię do usunięcia. Wszystkie pytania w tej kategorii zostaną usunięte.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"categoryToDelete\">Kategoria do usunięcia</Label>\n                    <Select value={categoryToDelete} onValueChange={setCategoryToDelete}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Wybierz kategorię\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {allCategories.map((category) => (\n                          <SelectItem key={category} value={category}>\n                            {category}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setIsDeleteCategoryDialogOpen(false);\n                        setCategoryToDelete(\"\");\n                      }}\n                    >\n                      Anuluj\n                    </Button>\n                    <Button \n                      variant=\"destructive\"\n                      onClick={handleDeleteCategory}\n                      disabled={!categoryToDelete.trim()}\n                    >\n                      Usuń kategorię\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingQuestion ? \"Edytuj pytanie\" : \"Dodaj nowe pytanie\"}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"category\">Kategoria</Label>\n                  <div className=\"flex space-x-2\">\n                    <Select\n                      value={form.watch(\"category\")}\n                      onValueChange={(value) => form.setValue(\"category\", value)}\n                    >\n                      <SelectTrigger className=\"flex-1\">\n                        <SelectValue placeholder=\"Wybierz kategorię\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {allCategories.map((cat) => (\n                          <SelectItem key={cat} value={cat}>\n                            {cat}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex space-x-2 mt-2\">\n                    <Input\n                      placeholder=\"Lub dodaj nową kategorię\"\n                      value={newCategory}\n                      onChange={(e) => setNewCategory(e.target.value)}\n                      className=\"flex-1\"\n                    />\n                    <Button type=\"button\" onClick={handleAddCategory} variant=\"outline\">\n                      Dodaj\n                    </Button>\n                  </div>\n                  {form.formState.errors.category && (\n                    <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.category.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"question\">Pytanie</Label>\n                  <Textarea\n                    {...form.register(\"question\")}\n                    placeholder=\"Wpisz treść pytania...\"\n                    rows={3}\n                  />\n                  {form.formState.errors.question && (\n                    <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.question.message}</p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"type\">Typ pytania</Label>\n                  <Select\n                    value={form.watch(\"type\")}\n                    onValueChange={(value) => form.setValue(\"type\", value as any)}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {questionTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"categoryType\">Typ kategorii</Label>\n                  <Select\n                    value={form.watch(\"categoryType\")}\n                    onValueChange={(value) => form.setValue(\"categoryType\", value as \"general\" | \"equipment\")}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">Kategoria ogólna</SelectItem>\n                      <SelectItem value=\"equipment\">Kategoria sprzętu</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"position\">Pozycja</Label>\n                  <Input\n                    type=\"number\"\n                    {...form.register(\"position\", { valueAsNumber: true })}\n                    min=\"1\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"isRequired\"\n                      checked={form.watch(\"isRequired\")}\n                      onCheckedChange={(checked) => form.setValue(\"isRequired\", checked as boolean)}\n                    />\n                    <Label htmlFor=\"isRequired\">Wymagane</Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"isActive\"\n                      checked={form.watch(\"isActive\")}\n                      onCheckedChange={(checked) => form.setValue(\"isActive\", checked as boolean)}\n                    />\n                    <Label htmlFor=\"isActive\">Aktywne</Label>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Anuluj\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createQuestionMutation.isPending || updateQuestionMutation.isPending}\n                  >\n                    {editingQuestion ? \"Zapisz zmiany\" : \"Dodaj pytanie\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"space-y-6\">\n          {Object.entries(groupedQuestions).map(([category, categoryQuestions]) => (\n            <Card key={category}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>{category}</span>\n                  <Badge variant=\"secondary\">\n                    {categoryQuestions.length} pytań\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Pozycja</TableHead>\n                      <TableHead>Pytanie</TableHead>\n                      <TableHead>Typ</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Akcje</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {categoryQuestions\n                      .sort((a, b) => a.position - b.position)\n                      .map((question) => (\n                        <TableRow key={question.id}>\n                          <TableCell>{question.position}</TableCell>\n                          <TableCell className=\"max-w-md\">\n                            <div className=\"truncate\">{question.question}</div>\n                            {question.isRequired && (\n                              <Badge variant=\"outline\" className=\"mt-1\">\n                                Wymagane\n                              </Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            {questionTypes.find(t => t.value === question.type)?.label || question.type}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Checkbox\n                                checked={question.isActive}\n                                onCheckedChange={(checked) =>\n                                  toggleActiveStatusMutation.mutate({\n                                    id: question.id,\n                                    isActive: checked as boolean,\n                                  })\n                                }\n                              />\n                              <span className={question.isActive ? \"text-green-600\" : \"text-gray-400\"}>\n                                {question.isActive ? \"Aktywne\" : \"Nieaktywne\"}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleEdit(question)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => handleDelete(question.id)}\n                                className=\"text-red-600 hover:text-red-700\"\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24424},"client/src/pages/needs-assessment.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ClipboardList, Save, FileText, User, Building } from \"lucide-react\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst clientSchema = z.object({\n  companyName: z.string().optional(),\n  contactPerson: z.string().optional(),\n  phone: z.string().optional(),\n  email: z.string().optional(),\n  address: z.string().optional(),\n}).refine(\n  (data) => {\n    return data.companyName || data.contactPerson || data.phone || data.email;\n  },\n  {\n    message: \"Wypełnij przynajmniej jedno pole: nazwę firmy, osobę kontaktową, telefon lub email\",\n    path: [\"companyName\"],\n  }\n);\n\ninterface NeedsAssessmentQuestion {\n  id: number;\n  category: string;\n  question: string;\n  type: string;\n  options?: any;\n  isRequired: boolean;\n  position: number;\n  isActive: boolean;\n  categoryType?: string;\n}\n\n// Te listy będą budowane dynamicznie z rzeczywistych danych z bazy\n\nconst mandatoryCategories = [\n  \"Informacje ogólne\",\n  \"Warunki otoczenia\",\n  \"Logistyka i dodatkowe usługi\",\n  \"Dodatkowe informacje\"\n];\n\nexport default function NeedsAssessment() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n  const [responses, setResponses] = useState<Record<string, string>>({});\n  const [currentStep, setCurrentStep] = useState(0);\n  const [selectedCategories, setSelectedCategories] = useState<Record<string, boolean>>({});\n\n  const clientForm = useForm({\n    resolver: zodResolver(clientSchema),\n    defaultValues: {\n      companyName: \"\",\n      contactPerson: \"\",\n      phone: \"\",\n      email: \"\",\n      address: \"\",\n    },\n  });\n\n  // Query for getting questions\n  const { data: questions = [], isLoading } = useQuery<NeedsAssessmentQuestion[]>({\n    queryKey: [\"/api/needs-assessment/questions\"],\n  });\n\n  // Separate questions by category type  \n  const generalQuestions = questions.filter(q => q.categoryType === 'general' || !q.categoryType);\n  const equipmentQuestions = questions.filter(q => q.categoryType === 'equipment');\n\n  // Build dynamic list of all categories with proper ordering\n  const allCategories = useMemo(() => {\n    // First get general categories\n    const generalCats = Array.from(new Set(generalQuestions.map(q => q.category)));\n    // Then get equipment categories\n    const equipmentCats = Array.from(new Set(equipmentQuestions.map(q => q.category)));\n    \n    // Sort general categories to ensure mandatory categories appear first\n    const sortedGeneralCats = generalCats.sort((a, b) => {\n      const aIsMandatory = mandatoryCategories.includes(a);\n      const bIsMandatory = mandatoryCategories.includes(b);\n      \n      if (aIsMandatory && !bIsMandatory) return -1;\n      if (!aIsMandatory && bIsMandatory) return 1;\n      \n      if (aIsMandatory && bIsMandatory) {\n        return mandatoryCategories.indexOf(a) - mandatoryCategories.indexOf(b);\n      }\n      \n      return a.localeCompare(b);\n    });\n    \n    // Sort equipment categories alphabetically\n    const sortedEquipmentCats = equipmentCats.sort((a, b) => a.localeCompare(b));\n    \n    // Return general categories first, then equipment categories\n    return [...sortedGeneralCats, ...sortedEquipmentCats];\n  }, [generalQuestions, equipmentQuestions]);\n\n  // Group questions by category with conditional equipment sections (use useMemo for reactivity)\n  const questionsByCategory = useMemo(() => {\n    const result = allCategories.map(category => {\n      // Check if this is an equipment accessory category\n      const isEquipmentAccessory = category.includes(' - wyposażenie');\n      \n      if (isEquipmentAccessory) {\n        // Extract the base equipment category and handle name variations\n        let baseCategory = category.replace(' - wyposażenie', '');\n        \n        // Handle the name mapping differences between database categories\n        if (baseCategory === 'Maszty oświetleniowe') {\n          baseCategory = 'Maszt oświetleniowy';\n        } else if (baseCategory === 'Nagrzewnice') {\n          baseCategory = 'Nagrzewnica';\n        }\n        \n        // Only include this accessory category if the base equipment category is selected\n        if (!selectedCategories[baseCategory]) {\n          return null; // Don't show equipment accessories if base equipment not selected\n        }\n      }\n      \n      return {\n        category,\n        questions: questions.filter(q => q.category === category && q.isActive)\n          .sort((a, b) => a.position - b.position)\n      };\n    }).filter(group => group !== null && group.questions.length > 0);\n    \n    return result;\n  }, [questions, selectedCategories, allCategories]); // Re-calculate when questions or selectedCategories change\n\n  const currentCategory = questionsByCategory[currentStep];\n\n  // Effect to handle currentStep adjustment when categories change due to equipment selection\n  useEffect(() => {\n    // If current step is beyond available categories, adjust it\n    if (currentStep >= questionsByCategory.length && questionsByCategory.length > 0) {\n      setCurrentStep(questionsByCategory.length - 1);\n    }\n  }, [questionsByCategory.length, currentStep]);\n\n  const handleResponseChange = (questionId: number, value: string) => {\n    setResponses(prev => ({\n      ...prev,\n      [questionId]: value\n    }));\n  };\n\n  const handleCategoryToggle = (category: string, checked: boolean) => {\n    setSelectedCategories(prev => ({\n      ...prev,\n      [category]: checked\n    }));\n    \n    // If unchecking a category, clear all responses for that category AND its equipment accessories\n    if (!checked) {\n      const categoryQuestions = questions.filter(q => q.category === category);\n      const equipmentAccessoryQuestions = questions.filter(q => q.category === `${category} - wyposażenie`);\n      \n      setResponses(prev => {\n        const newResponses = { ...prev };\n        // Clear main category questions\n        categoryQuestions.forEach(q => {\n          delete newResponses[q.id];\n        });\n        // Clear equipment accessory questions\n        equipmentAccessoryQuestions.forEach(q => {\n          delete newResponses[q.id];\n        });\n        return newResponses;\n      });\n    }\n  };\n\n  const isCategorySelected = (category: string) => {\n    // Mandatory categories are always \"selected\"\n    if (mandatoryCategories.includes(category)) {\n      return true;\n    }\n    return selectedCategories[category] === true;\n  };\n\n  const isCategoryMandatory = (category: string) => {\n    return mandatoryCategories.includes(category);\n  };\n\n  const saveResponsesMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"/api/needs-assessment/responses\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Sukces\",\n        description: `Badanie potrzeb zostało zapisane z numerem ${data.responseNumber}`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/responses\"] });\n      \n      // Przekieruj do wydruku badania\n      setLocation(`/needs-assessment/${data.id}/print`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Błąd\",\n        description: error.message || \"Nie udało się zapisać badania potrzeb\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    const clientData = clientForm.getValues();\n    \n    // Validate that at least one client field is filled\n    if (!clientData.companyName && !clientData.contactPerson && !clientData.phone && !clientData.email) {\n      toast({\n        title: \"Błąd\",\n        description: \"Wypełnij przynajmniej jedno pole klienta\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const assessmentData = {\n      clientCompanyName: clientData.companyName,\n      clientContactPerson: clientData.contactPerson,\n      clientPhone: clientData.phone,\n      clientEmail: clientData.email,\n      clientAddress: clientData.address,\n      responses: responses,\n    };\n\n    saveResponsesMutation.mutate(assessmentData);\n  };\n\n  const canGoNext = () => {\n    if (!currentCategory) return false;\n    \n    // If category is not selected, we can skip it\n    if (!isCategorySelected(currentCategory.category)) {\n      return true;\n    }\n    \n    // If category is selected, check required questions are answered\n    const requiredQuestions = currentCategory.questions.filter(q => q.isRequired);\n    return requiredQuestions.every(q => responses[q.id]?.trim());\n  };\n\n  const canGoPrevious = () => currentStep > 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-20 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <ClipboardList className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold text-foreground\">Badanie Potrzeb</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Przeprowadź szczegółową analizę potrzeb klienta aby przygotować najlepszą ofertę\n          </p>\n        </div>\n\n        {/* Client Information */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Building className=\"w-5 h-5 mr-2\" />\n              Informacje o kliencie\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"companyName\">Nazwa firmy</Label>\n                <Input\n                  id=\"companyName\"\n                  {...clientForm.register(\"companyName\")}\n                  placeholder=\"np. ABC Sp. z o.o.\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"contactPerson\">Osoba kontaktowa</Label>\n                <Input\n                  id=\"contactPerson\"\n                  {...clientForm.register(\"contactPerson\")}\n                  placeholder=\"np. Jan Kowalski\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Telefon</Label>\n                <Input\n                  id=\"phone\"\n                  {...clientForm.register(\"phone\")}\n                  placeholder=\"np. +48 123 456 789\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...clientForm.register(\"email\")}\n                  placeholder=\"np. kontakt@abc.pl\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"address\">Adres</Label>\n              <Textarea\n                id=\"address\"\n                {...clientForm.register(\"address\")}\n                placeholder=\"Pełny adres lokalizacji...\"\n                rows={2}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Progress indicator */}\n        {questionsByCategory.length > 0 && (\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">\n                Krok {currentStep + 1} z {questionsByCategory.length}\n              </span>\n              <span className=\"text-sm text-muted-foreground\">\n                {Math.round(((currentStep + 1) / questionsByCategory.length) * 100)}%\n              </span>\n            </div>\n            <div className=\"w-full bg-secondary h-2 rounded-full\">\n              <div \n                className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${((currentStep + 1) / questionsByCategory.length) * 100}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Current Category Questions */}\n        {currentCategory && (\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  {!isCategoryMandatory(currentCategory.category) && (\n                    <Checkbox\n                      id={`category-${currentStep}`}\n                      checked={isCategorySelected(currentCategory.category)}\n                      onCheckedChange={(checked) => \n                        handleCategoryToggle(currentCategory.category, checked as boolean)\n                      }\n                    />\n                  )}\n                  <span>{currentCategory.category}</span>\n                  {isCategoryMandatory(currentCategory.category) && (\n                    <Badge variant=\"default\" className=\"ml-2\">Wymagane</Badge>\n                  )}\n                </div>\n                <Badge variant=\"secondary\">\n                  {currentCategory.questions.length} pytań\n                </Badge>\n              </CardTitle>\n              {!isCategoryMandatory(currentCategory.category) && (\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Zaznacz checkbox powyżej jeśli klient potrzebuje tego typu urządzenia\n                </p>\n              )}\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {currentCategory.questions.map((question) => (\n                <div key={question.id} className={`space-y-2 ${question.type === 'equipment_option' ? 'ml-6' : ''}`}>\n                  {/* Equipment option - render as inline checkbox */}\n                  {question.type === 'equipment_option' ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`q-${question.id}`}\n                        checked={responses[question.id] === 'true'}\n                        onCheckedChange={(checked) => \n                          handleResponseChange(question.id, checked ? 'true' : 'false')\n                        }\n                        disabled={!isCategorySelected(currentCategory.category)}\n                      />\n                      <Label htmlFor={`q-${question.id}`} className=\"text-sm font-normal\">\n                        {question.question}\n                      </Label>\n                    </div>\n                  ) : question.type === 'multiple_choice' ? (\n                    /* Multiple choice header - just display as heading */\n                    <div className=\"font-medium text-base text-gray-800 mb-2\">\n                      {question.question}\n                    </div>\n                  ) : question.type === 'radio' ? (\n                    /* Radio buttons */\n                    <div>\n                      <Label className=\"text-base font-medium\">\n                        {question.question}\n                        {question.isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n                      </Label>\n                      <RadioGroup\n                        value={responses[question.id] || ''}\n                        onValueChange={(value) => handleResponseChange(question.id, value)}\n                        disabled={!isCategorySelected(currentCategory.category)}\n                        className=\"mt-2\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"tak\" id={`${question.id}-tak`} />\n                          <Label htmlFor={`${question.id}-tak`}>Tak</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"nie\" id={`${question.id}-nie`} />\n                          <Label htmlFor={`${question.id}-nie`}>Nie</Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n                  ) : question.type === 'select' ? (\n                    /* Select dropdown */\n                    <div>\n                      <Label className=\"text-base font-medium\">\n                        {question.question}\n                        {question.isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n                      </Label>\n                      <Select\n                        value={responses[question.id] || ''}\n                        onValueChange={(value) => handleResponseChange(question.id, value)}\n                        disabled={!isCategorySelected(currentCategory.category)}\n                      >\n                        <SelectTrigger className=\"mt-2\">\n                          <SelectValue placeholder=\"Wybierz opcję\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"umiarkowana\">Strefa umiarkowana</SelectItem>\n                          <SelectItem value=\"kontynentalna\">Strefa kontynentalna</SelectItem>\n                          <SelectItem value=\"nadmorska\">Strefa nadmorska</SelectItem>\n                          <SelectItem value=\"górska\">Strefa górska</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  ) : question.type === 'number' ? (\n                    /* Number input */\n                    <div>\n                      <Label className=\"text-base font-medium\">\n                        {question.question}\n                        {question.isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n                      </Label>\n                      <Input\n                        type=\"number\"\n                        value={responses[question.id] || \"\"}\n                        onChange={(e) => handleResponseChange(question.id, e.target.value)}\n                        placeholder=\"Wprowadź liczbę\"\n                        disabled={!isCategorySelected(currentCategory.category)}\n                        className={!isCategorySelected(currentCategory.category) ? 'bg-gray-100 text-gray-400' : ''}\n                      />\n                    </div>\n                  ) : question.type === 'checkbox' ? (\n                    /* Single checkbox */\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={`q-${question.id}`}\n                        checked={responses[question.id] === 'true'}\n                        onCheckedChange={(checked) => \n                          handleResponseChange(question.id, checked ? 'true' : 'false')\n                        }\n                        disabled={!isCategorySelected(currentCategory.category)}\n                      />\n                      <Label htmlFor={`q-${question.id}`} className=\"text-base font-medium\">\n                        {question.question}\n                        {question.isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n                      </Label>\n                    </div>\n                  ) : (\n                    /* Default text inputs */\n                    <div>\n                      <Label className=\"text-base font-medium\">\n                        {question.question}\n                        {question.isRequired && <span className=\"text-red-500 ml-1\">*</span>}\n                      </Label>\n                      \n                      {question.type === \"textarea\" ? (\n                        <Textarea\n                          value={responses[question.id] || \"\"}\n                          onChange={(e) => handleResponseChange(question.id, e.target.value)}\n                          placeholder=\"Wpisz swoją odpowiedź...\"\n                          rows={3}\n                          disabled={!isCategorySelected(currentCategory.category)}\n                          className={!isCategorySelected(currentCategory.category) ? 'bg-gray-100 text-gray-400' : ''}\n                        />\n                      ) : (\n                        <Input\n                          value={responses[question.id] || \"\"}\n                          onChange={(e) => handleResponseChange(question.id, e.target.value)}\n                          placeholder=\"Wpisz swoją odpowiedź...\"\n                          disabled={!isCategorySelected(currentCategory.category)}\n                          className={!isCategorySelected(currentCategory.category) ? 'bg-gray-100 text-gray-400' : ''}\n                        />\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Navigation and Save */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentStep(prev => prev - 1)}\n              disabled={!canGoPrevious()}\n            >\n              Poprzedni\n            </Button>\n            \n            {currentStep < questionsByCategory.length - 1 ? (\n              <Button\n                onClick={() => setCurrentStep(prev => prev + 1)}\n                disabled={!canGoNext()}\n              >\n                Następny\n              </Button>\n            ) : (\n              <Button\n                onClick={handleSave}\n                disabled={saveResponsesMutation.isPending || !canGoNext()}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveResponsesMutation.isPending ? \"Zapisywanie...\" : \"Zapisz badanie\"}\n              </Button>\n            )}\n          </div>\n\n          <div className=\"text-sm text-muted-foreground\">\n            Odpowiedzi: {Object.keys(responses).length} / {questions.length}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23231},"client/src/pages/needs-assessment-print.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ClipboardList, \n  Calendar, \n  User, \n  Building2, \n  Phone, \n  Mail,\n  MapPin,\n  Printer,\n  ArrowLeft\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\ninterface NeedsAssessmentResponse {\n  id: number;\n  responseNumber: string;\n  clientCompanyName?: string;\n  clientContactPerson?: string;\n  clientPhone?: string;\n  clientEmail?: string;\n  clientAddress?: string;\n  responses: Record<string, string>;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface NeedsAssessmentQuestion {\n  id: number;\n  category: string;\n  question: string;\n  type: string;\n  position: number;\n  categoryType?: string;\n}\n\ninterface NeedsAssessmentPrintProps {\n  id: string;\n}\n\nexport default function NeedsAssessmentPrint({ id }: NeedsAssessmentPrintProps) {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Query for getting the specific response\n  const { data: response, isLoading } = useQuery<NeedsAssessmentResponse>({\n    queryKey: [`/api/needs-assessment/responses/${id}`],\n    enabled: !!id && !!user,\n  });\n\n  // Query for getting questions to display question text\n  const { data: questions = [] } = useQuery<NeedsAssessmentQuestion[]>({\n    queryKey: [\"/api/needs-assessment/questions\"],\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getQuestionText = (questionId: string) => {\n    const question = questions.find(q => q.id.toString() === questionId);\n    return question ? question.question : `Pytanie ${questionId}`;\n  };\n\n  const getQuestionCategory = (questionId: string) => {\n    const question = questions.find(q => q.id.toString() === questionId);\n    return question ? question.category : 'Nieznana kategoria';\n  };\n\n  const groupResponsesByCategory = (responses: Record<string, string>) => {\n    const grouped: Record<string, Array<{questionId: string, question: string, answer: string}>> = {};\n    \n    Object.entries(responses).forEach(([questionId, answer]) => {\n      if (answer && answer.trim()) {\n        const category = getQuestionCategory(questionId);\n        if (!grouped[category]) {\n          grouped[category] = [];\n        }\n        grouped[category].push({\n          questionId,\n          question: getQuestionText(questionId),\n          answer\n        });\n      }\n    });\n\n    return grouped;\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleBackToList = () => {\n    setLocation(\"/needs-assessment-list\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Ładowanie badania potrzeb...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!response) {\n    return (\n      <div className=\"min-h-screen p-4 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <ClipboardList className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-foreground mb-2\">Nie znaleziono badania</h2>\n          <p className=\"text-muted-foreground mb-4\">Badanie potrzeb o podanym ID nie istnieje.</p>\n          <Button onClick={handleBackToList}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Powrót do listy\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const groupedResponses = groupResponsesByCategory(response.responses);\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header - hidden when printing */}\n        <div className=\"mb-6 print:hidden\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <ClipboardList className=\"w-8 h-8 text-primary\" />\n              <div>\n                <h1 className=\"text-3xl font-bold text-foreground\">\n                  Badanie Potrzeb #{response.responseNumber}\n                </h1>\n                <p className=\"text-muted-foreground\">\n                  Utworzone: {formatDate(response.createdAt)}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={handleBackToList}>\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Powrót do listy\n              </Button>\n              <Button onClick={handlePrint}>\n                <Printer className=\"w-4 h-4 mr-2\" />\n                Drukuj\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Print Header - visible only when printing */}\n        <div className=\"hidden print:block mb-8 text-center\">\n          <h1 className=\"text-2xl font-bold mb-2\">BADANIE POTRZEB KLIENTA</h1>\n          <p className=\"text-lg\">Numer: {response.responseNumber}</p>\n          <p className=\"text-sm text-gray-600\">\n            Data utworzenia: {formatDate(response.createdAt)}\n          </p>\n          <Separator className=\"my-4\" />\n        </div>\n\n        {/* Company Header for Print */}\n        <div className=\"hidden print:block mb-8 text-center\">\n          <h2 className=\"text-xl font-bold\">PPP :: Program</h2>\n          <p className=\"text-sm text-gray-600\">Wynajem sprzętu</p>\n          <Separator className=\"my-4\" />\n        </div>\n\n        {/* Client Information */}\n        <Card className=\"mb-6 print:shadow-none print:border-2 print:border-black\">\n          <CardHeader className=\"print:pb-2\">\n            <CardTitle className=\"flex items-center print:text-lg\">\n              <Building2 className=\"w-5 h-5 mr-2 print:hidden\" />\n              Informacje o kliencie\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"print:pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 print:gap-2\">\n              {response.clientCompanyName && (\n                <div className=\"flex items-center space-x-2 print:text-sm\">\n                  <Building2 className=\"w-4 h-4 text-muted-foreground print:hidden\" />\n                  <span className=\"font-medium\">Firma:</span>\n                  <span>{response.clientCompanyName}</span>\n                </div>\n              )}\n              {response.clientContactPerson && (\n                <div className=\"flex items-center space-x-2 print:text-sm\">\n                  <User className=\"w-4 h-4 text-muted-foreground print:hidden\" />\n                  <span className=\"font-medium\">Kontakt:</span>\n                  <span>{response.clientContactPerson}</span>\n                </div>\n              )}\n              {response.clientPhone && (\n                <div className=\"flex items-center space-x-2 print:text-sm\">\n                  <Phone className=\"w-4 h-4 text-muted-foreground print:hidden\" />\n                  <span className=\"font-medium\">Telefon:</span>\n                  <span>{response.clientPhone}</span>\n                </div>\n              )}\n              {response.clientEmail && (\n                <div className=\"flex items-center space-x-2 print:text-sm\">\n                  <Mail className=\"w-4 h-4 text-muted-foreground print:hidden\" />\n                  <span className=\"font-medium\">Email:</span>\n                  <span>{response.clientEmail}</span>\n                </div>\n              )}\n            </div>\n            {response.clientAddress && (\n              <div className=\"mt-4 flex items-start space-x-2 print:mt-2 print:text-sm\">\n                <MapPin className=\"w-4 h-4 text-muted-foreground mt-1 print:hidden\" />\n                <div>\n                  <span className=\"font-medium\">Adres:</span>\n                  <p className=\"text-sm text-muted-foreground mt-1 print:text-black print:mt-0 print:inline print:ml-2\">\n                    {response.clientAddress}\n                  </p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Responses by Category */}\n        <div className=\"space-y-6 print:space-y-4\">\n          {Object.entries(groupedResponses).map(([category, categoryResponses]) => (\n            <Card key={category} className=\"print:shadow-none print:border print:border-gray-400 print:break-inside-avoid\">\n              <CardHeader className=\"print:pb-2\">\n                <CardTitle className=\"print:text-base\">{category}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"print:pt-0\">\n                <div className=\"space-y-4 print:space-y-2\">\n                  {categoryResponses.map(({ questionId, question, answer }) => (\n                    <div key={questionId} className=\"border-l-2 border-gray-200 pl-4 print:border-l print:border-gray-400 print:pl-2 print:break-inside-avoid\">\n                      <p className=\"font-medium text-sm mb-1 print:text-xs print:mb-0\">{question}</p>\n                      <p className=\"text-muted-foreground print:text-black print:text-xs\">{answer}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Footer for Print */}\n        <div className=\"hidden print:block mt-8 pt-4 border-t text-center text-xs text-gray-600\">\n          <p>PPP :: Program - Wynajem sprzętu</p>\n          <p>Data wydruku: {new Date().toLocaleDateString('pl-PL')}</p>\n        </div>\n      </div>\n\n      {/* Print Styles */}\n      <style>{`\n        @media print {\n          @page {\n            margin: 1cm;\n            size: A4;\n          }\n          \n          body {\n            font-size: 12pt;\n            line-height: 1.4;\n          }\n          \n          .print\\\\:hidden {\n            display: none !important;\n          }\n          \n          .print\\\\:block {\n            display: block !important;\n          }\n          \n          .print\\\\:inline {\n            display: inline !important;\n          }\n          \n          .print\\\\:text-xs {\n            font-size: 10pt;\n          }\n          \n          .print\\\\:text-sm {\n            font-size: 11pt;\n          }\n          \n          .print\\\\:text-base {\n            font-size: 12pt;\n          }\n          \n          .print\\\\:text-lg {\n            font-size: 14pt;\n          }\n          \n          .print\\\\:text-black {\n            color: black !important;\n          }\n          \n          .print\\\\:border {\n            border: 1px solid #000 !important;\n          }\n          \n          .print\\\\:border-2 {\n            border-width: 2px !important;\n          }\n          \n          .print\\\\:border-black {\n            border-color: black !important;\n          }\n          \n          .print\\\\:border-gray-400 {\n            border-color: #9ca3af !important;\n          }\n          \n          .print\\\\:shadow-none {\n            box-shadow: none !important;\n          }\n          \n          .print\\\\:break-inside-avoid {\n            break-inside: avoid;\n          }\n          \n          .print\\\\:space-y-2 > * + * {\n            margin-top: 0.5rem;\n          }\n          \n          .print\\\\:space-y-4 > * + * {\n            margin-top: 1rem;\n          }\n          \n          .print\\\\:mt-0 {\n            margin-top: 0 !important;\n          }\n          \n          .print\\\\:mt-2 {\n            margin-top: 0.5rem !important;\n          }\n          \n          .print\\\\:mb-0 {\n            margin-bottom: 0 !important;\n          }\n          \n          .print\\\\:pb-2 {\n            padding-bottom: 0.5rem !important;\n          }\n          \n          .print\\\\:pt-0 {\n            padding-top: 0 !important;\n          }\n          \n          .print\\\\:pl-2 {\n            padding-left: 0.5rem !important;\n          }\n          \n          .print\\\\:ml-2 {\n            margin-left: 0.5rem !important;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":12308},"client/src/pages/needs-assessment-list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ClipboardList, \n  Eye, \n  Calendar, \n  User, \n  Building2, \n  Phone, \n  Mail,\n  MapPin,\n  Printer,\n  Trash2\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface NeedsAssessmentResponse {\n  id: number;\n  responseNumber: string;\n  clientCompanyName?: string;\n  clientContactPerson?: string;\n  clientPhone?: string;\n  clientEmail?: string;\n  clientAddress?: string;\n  responses: Record<string, string>;\n  userId: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface NeedsAssessmentQuestion {\n  id: number;\n  category: string;\n  question: string;\n  type: string;\n  position: number;\n}\n\nexport default function NeedsAssessmentList() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedResponse, setSelectedResponse] = useState<NeedsAssessmentResponse | null>(null);\n\n  // Query for getting all responses (for all authenticated users)\n  const { data: responses = [], isLoading } = useQuery<NeedsAssessmentResponse[]>({\n    queryKey: [\"/api/needs-assessment/responses\"],\n    enabled: !!user,\n  });\n\n  // Query for getting questions to display question text\n  const { data: questions = [] } = useQuery<NeedsAssessmentQuestion[]>({\n    queryKey: [\"/api/needs-assessment/questions\"],\n  });\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const getQuestionText = (questionId: string) => {\n    const question = questions.find(q => q.id.toString() === questionId);\n    return question ? question.question : `Pytanie ${questionId}`;\n  };\n\n  const getQuestionCategory = (questionId: string) => {\n    const question = questions.find(q => q.id.toString() === questionId);\n    return question ? question.category : 'Nieznana kategoria';\n  };\n\n  // Delete mutation for admin users\n  const deleteResponseMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/needs-assessment/responses/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sukces\",\n        description: \"Badanie potrzeb zostało usunięte\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/needs-assessment/responses\"] });\n      setSelectedResponse(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Błąd\",\n        description: error.message || \"Nie udało się usunąć badania potrzeb\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const groupResponsesByCategory = (responses: Record<string, string>) => {\n    const grouped: Record<string, Array<{questionId: string, answer: string, question: string}>> = {};\n    \n    Object.entries(responses).forEach(([questionId, answer]) => {\n      if (answer && answer.trim()) {\n        const category = getQuestionCategory(questionId);\n        if (!grouped[category]) {\n          grouped[category] = [];\n        }\n        grouped[category].push({\n          questionId,\n          answer,\n          question: getQuestionText(questionId)\n        });\n      }\n    });\n    \n    return grouped;\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-xl font-semibold mb-2\">Brak dostępu</h2>\n              <p className=\"text-muted-foreground\">\n                Musisz być zalogowany aby przeglądać zapisane badania potrzeb.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (selectedResponse) {\n    const groupedResponses = groupResponsesByCategory(selectedResponse.responses);\n\n    return (\n      <div className=\"min-h-screen p-4\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <ClipboardList className=\"w-8 h-8 text-primary\" />\n                <div>\n                  <h1 className=\"text-3xl font-bold text-foreground\">\n                    Badanie Potrzeb #{selectedResponse.responseNumber}\n                  </h1>\n                  <p className=\"text-muted-foreground\">\n                    Utworzone: {formatDate(selectedResponse.createdAt)}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setSelectedResponse(null)}\n                >\n                  Powrót do listy\n                </Button>\n                {(user as any)?.role === 'admin' && (\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\" size=\"sm\">\n                        <Trash2 className=\"w-4 h-4 mr-2\" />\n                        Usuń badanie\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Potwierdź usunięcie</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Czy na pewno chcesz usunąć badanie potrzeb #{selectedResponse.responseNumber}? \n                          Ta akcja jest nieodwracalna.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Anuluj</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteResponseMutation.mutate(selectedResponse.id)}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                        >\n                          Usuń\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Client Information */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Building2 className=\"w-5 h-5 mr-2\" />\n                Informacje o kliencie\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {selectedResponse.clientCompanyName && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Building2 className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">Firma:</span>\n                    <span>{selectedResponse.clientCompanyName}</span>\n                  </div>\n                )}\n                {selectedResponse.clientContactPerson && (\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">Kontakt:</span>\n                    <span>{selectedResponse.clientContactPerson}</span>\n                  </div>\n                )}\n                {selectedResponse.clientPhone && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">Telefon:</span>\n                    <span>{selectedResponse.clientPhone}</span>\n                  </div>\n                )}\n                {selectedResponse.clientEmail && (\n                  <div className=\"flex items-center space-x-2\">\n                    <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"font-medium\">Email:</span>\n                    <span>{selectedResponse.clientEmail}</span>\n                  </div>\n                )}\n              </div>\n              {selectedResponse.clientAddress && (\n                <div className=\"mt-4 flex items-start space-x-2\">\n                  <MapPin className=\"w-4 h-4 text-muted-foreground mt-1\" />\n                  <div>\n                    <span className=\"font-medium\">Adres:</span>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {selectedResponse.clientAddress}\n                    </p>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Responses by Category */}\n          <div className=\"space-y-6\">\n            {Object.entries(groupedResponses).map(([category, categoryResponses]) => (\n              <Card key={category}>\n                <CardHeader>\n                  <CardTitle>{category}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {categoryResponses.map(({ questionId, question, answer }) => (\n                      <div key={questionId} className=\"border-l-2 border-gray-200 pl-4\">\n                        <p className=\"font-medium text-sm mb-1\">{question}</p>\n                        <p className=\"text-muted-foreground\">{answer}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <ClipboardList className=\"w-8 h-8 text-primary\" />\n            <h1 className=\"text-3xl font-bold text-foreground\">Zapisane Badania Potrzeb</h1>\n          </div>\n          <p className=\"text-muted-foreground\">\n            Przeglądaj wszystkie przeprowadzone badania potrzeb klientów\n          </p>\n        </div>\n\n        {/* Responses List */}\n        {responses.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <ClipboardList className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Brak zapisanych badań</h3>\n              <p className=\"text-muted-foreground\">\n                Nie ma jeszcze żadnych przeprowadzonych badań potrzeb.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {responses.map((response) => {\n              const answeredQuestions = Object.values(response.responses).filter(answer => answer && answer.trim()).length;\n              \n              return (\n                <Card key={response.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"text-lg font-semibold\">\n                            #{response.responseNumber}\n                          </h3>\n                          <Badge variant=\"secondary\">\n                            {answeredQuestions} odpowiedzi\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm text-muted-foreground\">\n                          {response.clientCompanyName && (\n                            <div className=\"flex items-center space-x-2\">\n                              <Building2 className=\"w-4 h-4\" />\n                              <span>{response.clientCompanyName}</span>\n                            </div>\n                          )}\n                          {response.clientContactPerson && (\n                            <div className=\"flex items-center space-x-2\">\n                              <User className=\"w-4 h-4\" />\n                              <span>{response.clientContactPerson}</span>\n                            </div>\n                          )}\n                          {response.clientPhone && (\n                            <div className=\"flex items-center space-x-2\">\n                              <Phone className=\"w-4 h-4\" />\n                              <span>{response.clientPhone}</span>\n                            </div>\n                          )}\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span>{formatDate(response.createdAt)}</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex space-x-2 ml-4\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedResponse(response)}\n                        >\n                          <Eye className=\"w-4 h-4 mr-2\" />\n                          Podgląd\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          title=\"Drukuj badanie potrzeb\"\n                          className=\"bg-green-50 hover:bg-green-100 border-green-200\"\n                          onClick={() => window.open(`/api/needs-assessment/responses/${response.id}/print`, '_blank')}\n                        >\n                          <Printer className=\"w-4 h-4 text-green-600\" />\n                        </Button>\n                        {(user as any)?.role === 'admin' && (\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"outline\" size=\"sm\" className=\"text-red-600 hover:text-red-700 hover:bg-red-50\">\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Potwierdź usunięcie</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Czy na pewno chcesz usunąć badanie potrzeb #{response.responseNumber}? \n                                  Ta akcja jest nieodwracalna.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Anuluj</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteResponseMutation.mutate(response.id)}\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                >\n                                  Usuń\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16989},"client/src/pages/admin-api-keys.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Plus,\n  Key,\n  Trash2,\n  Copy,\n  Eye,\n  EyeOff,\n  ArrowLeft\n} from \"lucide-react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Link } from \"wouter\";\n\ninterface ApiKey {\n  id: number;\n  name: string;\n  keyValue: string;\n  isActive: boolean;\n  permissions: string[];\n  createdAt: string;\n  lastUsedAt?: string;\n}\n\nconst apiKeySchema = z.object({\n  name: z.string().min(1, \"Nazwa jest wymagana\"),\n  permissions: z.array(z.string()).min(1, \"Wybierz przynajmniej jedno uprawnienie\"),\n});\n\nconst availablePermissions = [\n  { id: \"quotes:create\", label: \"Tworzenie wycen\", description: \"Pozwala na tworzenie wycen poprzez API\" },\n  { id: \"assessments:create\", label: \"Tworzenie badań potrzeb\", description: \"Pozwala na tworzenie badań potrzeb poprzez API\" },\n  { id: \"*\", label: \"Wszystkie uprawnienia\", description: \"Pełen dostęp do wszystkich funkcji API\" }\n];\n\nexport default function AdminApiKeys() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [visibleKeys, setVisibleKeys] = useState<Set<number>>(new Set());\n\n  const { data: apiKeys = [], isLoading } = useQuery<ApiKey[]>({\n    queryKey: [\"/api/admin/api-keys\"],\n  });\n\n  const form = useForm<z.infer<typeof apiKeySchema>>({\n    resolver: zodResolver(apiKeySchema),\n    defaultValues: {\n      name: \"\",\n      permissions: [],\n    },\n  });\n\n  const createApiKeyMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof apiKeySchema>) => {\n      const response = await apiRequest(\"/api/admin/api-keys\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/api-keys\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Klucz API został utworzony pomyślnie. Kliknij ikonę oka aby go podejrzeć lub ikonę kopiowania aby skopiować.\",\n      });\n      setCreateDialogOpen(false);\n      form.reset();\n      \n      // Show the full key temporarily\n      setVisibleKeys(prev => new Set([...Array.from(prev), data.id]));\n      setTimeout(() => {\n        setVisibleKeys(prev => {\n          const newSet = new Set(Array.from(prev));\n          newSet.delete(data.id);\n          return newSet;\n        });\n      }, 30000); // Hide after 30 seconds\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się utworzyć klucza API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteApiKeyMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/admin/api-keys/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/api-keys\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Klucz API został usunięty pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć klucza API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleApiKeyStatus = useMutation({\n    mutationFn: async ({ id, isActive }: { id: number; isActive: boolean }) => {\n      const response = await apiRequest(`/api/admin/api-keys/${id}`, \"PATCH\", { isActive });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/api-keys\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Status klucza API został zaktualizowany\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Sesja wygasła. Przekierowywanie do logowania...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować statusu klucza API\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Skopiowano\",\n        description: `Klucz API został skopiowany: ${text.substring(0, 12)}...`,\n      });\n    } catch (err) {\n      // Fallback for browsers that don't support clipboard API\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      document.body.appendChild(textArea);\n      textArea.select();\n      try {\n        document.execCommand('copy');\n        toast({\n          title: \"Skopiowano\",\n          description: `Klucz API został skopiowany: ${text.substring(0, 12)}...`,\n        });\n      } catch (fallbackErr) {\n        toast({\n          title: \"Błąd\",\n          description: \"Nie udało się skopiować klucza API\",\n          variant: \"destructive\",\n        });\n      }\n      document.body.removeChild(textArea);\n    }\n  };\n\n  const toggleKeyVisibility = (keyId: number) => {\n    setVisibleKeys(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(keyId)) {\n        newSet.delete(keyId);\n      } else {\n        newSet.add(keyId);\n      }\n      return newSet;\n    });\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('pl-PL', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center mb-4\">\n            <Link href=\"/admin\">\n              <Button variant=\"outline\" size=\"sm\" className=\"mr-4\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Powrót do panelu\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">Zarządzanie Kluczami API</h1>\n              <p className=\"text-muted-foreground mt-2\">Twórz i zarządzaj kluczami API dla zewnętrznych integracji</p>\n            </div>\n          </div>\n        </div>\n\n        {/* API Documentation Card */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle>Dokumentacja API</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-muted-foreground\">\n                Publiczne API umożliwia zewnętrznym stronom tworzenie wycen i badań potrzeb. \n                Dokumentacja jest dostępna pod adresem:\n              </p>\n              <div className=\"bg-muted p-3 rounded-md font-mono text-sm\">\n                GET /api/public/docs\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                <strong>Dostępne endpointy:</strong>\n                <ul className=\"list-disc list-inside mt-2 space-y-1\">\n                  <li>GET /api/public/equipment - Lista dostępnego sprzętu z cenami</li>\n                  <li>POST /api/public/quotes - Tworzenie wycen</li>\n                  <li>GET /api/public/needs-assessment/questions - Pytania do badania potrzeb</li>\n                  <li>POST /api/public/needs-assessment - Tworzenie badań potrzeb</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* API Keys List */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"flex items-center\">\n                <Key className=\"w-5 h-5 mr-2\" />\n                Klucze API\n              </CardTitle>\n              <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button>\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Dodaj klucz API\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Dodaj nowy klucz API</DialogTitle>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit((data) => createApiKeyMutation.mutate(data))} className=\"space-y-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nazwa</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"np. Integracja strony głównej\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"permissions\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Uprawnienia</FormLabel>\n                            <FormControl>\n                              <div className=\"space-y-2\">\n                                {availablePermissions.map((permission) => (\n                                  <div key={permission.id} className=\"flex items-start space-x-2\">\n                                    <Checkbox\n                                      id={permission.id}\n                                      checked={field.value.includes(permission.id)}\n                                      onCheckedChange={(checked) => {\n                                        if (checked) {\n                                          field.onChange([...field.value, permission.id]);\n                                        } else {\n                                          field.onChange(field.value.filter(p => p !== permission.id));\n                                        }\n                                      }}\n                                    />\n                                    <div className=\"grid gap-1.5 leading-none\">\n                                      <label\n                                        htmlFor={permission.id}\n                                        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                                      >\n                                        {permission.label}\n                                      </label>\n                                      <p className=\"text-xs text-muted-foreground\">\n                                        {permission.description}\n                                      </p>\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setCreateDialogOpen(false)}>\n                          Anuluj\n                        </Button>\n                        <Button type=\"submit\" disabled={createApiKeyMutation.isPending}>\n                          {createApiKeyMutation.isPending ? \"Tworzenie...\" : \"Utwórz klucz\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                <p className=\"text-muted-foreground mt-2\">Ładowanie kluczy API...</p>\n              </div>\n            ) : apiKeys.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Key className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">Brak kluczy API</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Utwórz pierwszy klucz API, aby umożliwić zewnętrznym aplikacjom dostęp do systemu\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Nazwa</TableHead>\n                    <TableHead>Klucz API</TableHead>\n                    <TableHead>Uprawnienia</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Ostatnie użycie</TableHead>\n                    <TableHead>Utworzony</TableHead>\n                    <TableHead>Akcje</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {apiKeys.map((apiKey: ApiKey) => (\n                    <TableRow key={apiKey.id}>\n                      <TableCell className=\"font-medium\">{apiKey.name}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <code className=\"bg-muted px-2 py-1 rounded text-sm font-mono\">\n                            {visibleKeys.has(apiKey.id) ? apiKey.keyValue : `${apiKey.keyValue.substring(0, 8)}...${apiKey.keyValue.substring(apiKey.keyValue.length - 4)}`}\n                          </code>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => toggleKeyVisibility(apiKey.id)}\n                          >\n                            {visibleKeys.has(apiKey.id) ? <EyeOff className=\"w-3 h-3\" /> : <Eye className=\"w-3 h-3\" />}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => copyToClipboard(apiKey.keyValue)}\n                          >\n                            <Copy className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {apiKey.permissions.map((permission) => (\n                            <Badge key={permission} variant=\"secondary\" className=\"text-xs\">\n                              {permission === \"*\" ? \"Wszystkie\" : permission.replace(\":\", \": \")}\n                            </Badge>\n                          ))}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => toggleApiKeyStatus.mutate({ id: apiKey.id, isActive: !apiKey.isActive })}\n                          disabled={toggleApiKeyStatus.isPending}\n                        >\n                          <Badge variant={apiKey.isActive ? \"default\" : \"secondary\"}>\n                            {apiKey.isActive ? \"Aktywny\" : \"Nieaktywny\"}\n                          </Badge>\n                        </Button>\n                      </TableCell>\n                      <TableCell>\n                        {apiKey.lastUsedAt ? formatDate(apiKey.lastUsedAt) : \"Nigdy\"}\n                      </TableCell>\n                      <TableCell>{formatDate(apiKey.createdAt)}</TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => deleteApiKeyMutation.mutate(apiKey.id)}\n                          disabled={deleteApiKeyMutation.isPending}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18230},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"openpyxl>=3.1.5\",\n    \"pandas>=2.3.1\",\n]\n","size_bytes":188},"server/seed-air-conditioners.js":{"content":"import { db } from './db.ts';\nimport { equipment, equipmentPricing } from '../shared/schema.ts';\n\nexport async function seedAirConditioners() {\n  console.log('Seeding air conditioners...');\n\n  // Get the Klimatyzacje category ID\n  const klimatyzacjeCategory = await db.query.equipmentCategories.findFirst({\n    where: (categories, { eq }) => eq(categories.name, 'Klimatyzacje')\n  });\n\n  if (!klimatyzacjeCategory) {\n    console.error('Klimatyzacje category not found');\n    return;\n  }\n\n  const airConditioners = [\n    {\n      name: 'Dantherm AC M18',\n      model: 'AC M18',\n      description: 'Klimatyzator mobilny 17,5 kW',\n      power: '17,5 kW chłodzenia / 16 kW grzania',\n      dimensions: '780 x 1450 x 1140 mm',\n      weight: '206-260 kg',\n      engine: 'Natężenie prądu: Nominalne 16A, Startowe 26A',\n      alternator: '1x rękaw DANTHERM Ø400 (zaciąg i nawiew)',\n      fuelTankCapacity: null,\n      quantity: 2,\n      availableQuantity: 2,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CSH 070 DNM4M',\n      model: 'CSH 070 DNM4M',\n      description: 'Klimatyzator stojący 69,5 kW',\n      power: '69,5 kW chłodzenia / 69,5 kW grzania',\n      dimensions: '2538 x 1183 x 2450 mm',\n      weight: '665 kg',\n      engine: 'Natężenie prądu: Nominalne 60,80A, Startowe 169,5A',\n      alternator: '2x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CAMH 060 DM1M',\n      model: 'CAMH 060 DM1M',\n      description: 'Klimatyzator stojący 53,9 kW',\n      power: '53,9 kW chłodzenia / 45,8 kW grzania',\n      dimensions: '2985 x 1183 x 2450 mm',\n      weight: '1025 kg',\n      engine: 'Natężenie prądu: Nominalne 47,5A, Startowe 62,5A',\n      alternator: '2x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CSH 055 DNM4M',\n      model: 'CSH 055 DNM4M',\n      description: 'Klimatyzator stojący 56 kW',\n      power: '56 kW chłodzenia / 59 kW grzania',\n      dimensions: '2538 x 1183 x 2450 mm',\n      weight: '640 kg',\n      engine: 'Natężenie prądu: Nominalne 58,4A, Startowe 136,70A',\n      alternator: '2x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CMH 045 DNM3M',\n      model: 'CMH 045 DNM3M',\n      description: 'Klimatyzator stojący 46 kW',\n      power: '46 kW chłodzenia / 49,5 kW grzania',\n      dimensions: '2538 x 1183 x 2450 mm',\n      weight: '770 kg',\n      engine: 'Natężenie prądu: Nominalne 85,7A, Startowe 159A',\n      alternator: '1x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CMH 030 SNM3M',\n      model: 'CMH 030 SNM3M',\n      description: 'Klimatyzator stojący 27 kW',\n      power: '27 kW chłodzenia / 29,5 kW grzania',\n      dimensions: '2538 x 1183 x 2450 mm',\n      weight: '535 kg',\n      engine: 'Natężenie prądu: Nominalne 29,39A, Startowe 107,7A',\n      alternator: '1x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox CMH 025 SNM1M',\n      model: 'CMH 025 SNM1M',\n      description: 'Klimatyzator stojący 24 kW',\n      power: '24 kW chłodzenia / 25 kW grzania',\n      dimensions: '2538 x 1183 x 2450 mm',\n      weight: '520 kg',\n      engine: 'Natężenie prądu: Nominalne 48,7A, Startowe 122,1A',\n      alternator: '1x rękaw VENT COMBO Ø500 (ciemnoniebieski)',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox BAH 085 M5M',\n      model: 'BAH 085 M5M',\n      description: 'Klimatyzator przemysłowy 85 kW',\n      power: '85 kW / 154,2 kW chłodzenia, 78,3 kW / 240,9 kW grzania',\n      dimensions: '3670 x 2220 x 1270 mm',\n      weight: '1150 kg',\n      engine: 'Natężenie prądu: Nominalne 80A, Startowe 166,7A',\n      alternator: '2x rękaw VENT CLIP przezroczyste Ø500 + 3x rękaw VENT COMBO Ø500',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox BAC 075 M5M',\n      model: 'BAC 075 M5M',\n      description: 'Klimatyzator przemysłowy 73,5 kW',\n      power: '73,5 kW chłodzenia',\n      dimensions: '3670 x 2220 x 1270 mm',\n      weight: '1138 kg',\n      engine: 'Natężenie prądu: Nominalne 70,6A, Startowe 133,5A',\n      alternator: '2x rękaw VENT CLIP przezroczyste Ø500 + 3x rękaw VENT COMBO Ø500',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox BAC 057 M5M',\n      model: 'BAC 057 M5M',\n      description: 'Klimatyzator przemysłowy 55,2 kW',\n      power: '55,2 kW chłodzenia',\n      dimensions: '3670 x 2220 x 1270 mm',\n      weight: '941 kg',\n      engine: 'Natężenie prądu: Nominalne 54,4A, Startowe 97,3A',\n      alternator: '2x rękaw VENT CLIP przezroczyste Ø500 + 3x rękaw VENT COMBO Ø500',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox BAH 057 M5M',\n      model: 'BAH 057 M5M',\n      description: 'Klimatyzator przemysłowy 55,2 kW',\n      power: '55,2 kW chłodzenia / 53,7 kW grzania',\n      dimensions: '3670 x 2220 x 1270 mm',\n      weight: '920 kg',\n      engine: 'Natężenie prądu: Nominalne 46,1A, Startowe 89A',\n      alternator: '2x rękaw VENT CLIP przezroczyste Ø500 + 3x rękaw VENT COMBO Ø500',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    },\n    {\n      name: 'Lennox BAH 055 M5M',\n      model: 'BAH 055 M5M',\n      description: 'Klimatyzator przemysłowy 49,9 kW',\n      power: '49,9 kW chłodzenia / 45 kW grzania',\n      dimensions: '3670 x 2220 x 1270 mm',\n      weight: '909 kg / w koszu 1407 kg',\n      engine: 'Natężenie prądu: Nominalne 49,2A, Startowe 135,9A',\n      alternator: '2x rękaw VENT CLIP przezroczyste Ø500 + 3x rękaw VENT COMBO Ø500',\n      fuelTankCapacity: null,\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: klimatyzacjeCategory.id,\n      fuelConsumption75: null\n    }\n  ];\n\n  // Insert air conditioners\n  for (const ac of airConditioners) {\n    try {\n      const [insertedAC] = await db.insert(equipment).values(ac).returning();\n      console.log(`Inserted air conditioner: ${insertedAC.name}`);\n\n      // Add standard pricing tiers for each air conditioner\n      const pricingTiers = [\n        { periodStart: 1, periodEnd: 2, pricePerDay: \"220\", discountPercent: \"0\" },\n        { periodStart: 3, periodEnd: 7, pricePerDay: \"190\", discountPercent: \"13.64\" },\n        { periodStart: 8, periodEnd: 18, pricePerDay: \"160\", discountPercent: \"27.27\" },\n        { periodStart: 19, periodEnd: 29, pricePerDay: \"130\", discountPercent: \"40.91\" },\n        { periodStart: 30, periodEnd: null, pricePerDay: \"100\", discountPercent: \"54.55\" }\n      ];\n\n      for (const pricing of pricingTiers) {\n        await db.insert(equipmentPricing).values({\n          equipmentId: insertedAC.id,\n          ...pricing\n        });\n      }\n      console.log(`Added pricing tiers for: ${insertedAC.name}`);\n\n    } catch (error) {\n      console.error(`Error inserting air conditioner ${ac.name}:`, error);\n    }\n  }\n\n  console.log('Air conditioners seeding completed!');\n}\n\n// If running directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedAirConditioners().catch(console.error);\n}","size_bytes":8348},"server/seed-categories.js":{"content":"import { db } from './db.ts';\nimport { equipmentCategories } from '../shared/schema.ts';\nimport { eq } from 'drizzle-orm';\n\nconst categories = [\n  {\n    name: \"Klimatyzacje\",\n    description: \"Urządzenia klimatyzacyjne i chłodnicze\"\n  },\n  {\n    name: \"Nagrzewnice\", \n    description: \"Nagrzewnice olejowe i gazowe\"\n  },\n  {\n    name: \"Maszty oświetleniowe\",\n    description: \"Maszty i wieże oświetleniowe\"\n  },\n  {\n    name: \"Agregaty prądotwórcze\",\n    description: \"Generatory prądu różnych mocy\"\n  },\n  {\n    name: \"Kurtyny powietrzne\",\n    description: \"Kurtyny powietrzne i zasłony termiczne\"\n  },\n  {\n    name: \"Wyciągi spalin\",\n    description: \"Systemy wentylacji i wyciągu spalin\"\n  }\n];\n\nasync function seedCategories() {\n  console.log('Seeding equipment categories...');\n  \n  try {\n    for (const category of categories) {\n      console.log(`Adding category: ${category.name}`);\n      \n      // Check if category already exists\n      const existing = await db\n        .select()\n        .from(equipmentCategories)\n        .where(eq(equipmentCategories.name, category.name));\n        \n      if (existing.length === 0) {\n        await db\n          .insert(equipmentCategories)\n          .values(category);\n        console.log(`✓ Added category: ${category.name}`);\n      } else {\n        console.log(`- Category already exists: ${category.name}`);\n      }\n    }\n    \n    console.log('Categories seeding completed!');\n    process.exit(0);\n  } catch (error) {\n    console.error('Error seeding categories:', error);\n    process.exit(1);\n  }\n}\n\nseedCategories();","size_bytes":1582},"client/src/pages/admin-room.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Redirect, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, Users, ClipboardList, Key, AlertTriangle, UserCheck, UserX, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useState } from \"react\";\n\ninterface User {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  role: string;\n  isActive?: boolean;\n  createdAt?: string;\n}\n\ninterface EquipmentCategory {\n  id: number;\n  name: string;\n  description: string | null;\n}\n\nconst categorySchema = z.object({\n  name: z.string().min(1, \"Nazwa kategorii jest wymagana\"),\n  description: z.string().optional(),\n});\n\nexport default function AdminRoom() {\n  const { user, isAuthenticated } = useAuth();\n\n  // Redirect if not authenticated or not an admin\n  if (!isAuthenticated || (user as any)?.role !== 'admin') {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <Shield className=\"w-8 h-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold text-foreground\">ADMIN ROOM</h1>\n        </div>\n        <p className=\"text-muted-foreground text-lg\">\n          Zaawansowane narzędzia administracyjne i zarządzanie systemem\n        </p>\n      </div>\n\n\n\n      {/* Pending Users Section - Skopiowane z Admin - PRZENIESIONE NA GÓRĘ */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"flex items-center\">\n                <AlertTriangle className=\"w-5 h-5 mr-2 text-orange-500\" />\n                Użytkownicy oczekujący na akceptację\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                Nowi użytkownicy wymagają zatwierdzenia przez administratora\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <PendingUsersSection />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Management Section - Skopiowane z Admin */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle className=\"flex items-center\">\n                <Users className=\"w-5 h-5 mr-2\" />\n                Zarządzanie użytkownikami\n              </CardTitle>\n              <div className=\"text-sm text-muted-foreground\">\n                Użytkownicy są automatycznie dodawani podczas pierwszego logowania\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <UserManagementSection />\n          </CardContent>\n        </Card>\n      </div>\n\n\n\n      {/* Needs Assessment Management - Skopiowane z Admin */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <ClipboardList className=\"w-5 h-5 mr-2\" />\n              Zarządzanie Badaniem Potrzeb\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8\">\n              <ClipboardList className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">Zarządzaj pytaniami badania potrzeb</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Dodawaj, edytuj i usuwaj pytania dla różnych kategorii sprzętu. \n                Twórz nowe kategorie sprzętu dla badania potrzeb.\n              </p>\n              <Link href=\"/admin/needs-assessment\">\n                <Button className=\"mt-4\">\n                  <ClipboardList className=\"w-4 h-4 mr-2\" />\n                  Przejdź do zarządzania\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* API Keys Management - Skopiowane z Admin */}\n      <div className=\"mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Key className=\"w-5 h-5 mr-2\" />\n              Zarządzanie Kluczami API\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center py-8\">\n              <Key className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">Zarządzaj kluczami API</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Twórz i zarządzaj kluczami API dla zewnętrznych integracji. \n                Inne strony mogą używać API do tworzenia wycen i badań potrzeb.\n              </p>\n              <Link href=\"/admin/api-keys\">\n                <Button className=\"mt-4\">\n                  <Key className=\"w-4 h-4 mr-2\" />\n                  Przejdź do zarządzania\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n\n    </div>\n  );\n}\n\n\n\n///////////////////// User Management Component - Skopiowane z Admin /////////////////////\nfunction UserManagementSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for users\n  const { data: users = [], isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Update user role mutation\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ id, role }: { id: string; role: string }) => {\n      const response = await apiRequest(`/api/users/${id}/role`, \"PUT\", { role });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Rola użytkownika została zaktualizowana\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować roli użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle user active mutation\n  const toggleUserActiveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}/toggle-active`, \"PUT\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Status aktywności użytkownika został zmieniony\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zmienić statusu aktywności użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Użytkownik został usunięty\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteUser = (id: string, userName: string) => {\n    if (confirm(`Czy na pewno chcesz usunąć użytkownika ${userName}?`)) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  if (usersLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Użytkownik</TableHead>\n            <TableHead>Email</TableHead>\n            <TableHead>Rola</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead>Akcje</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {users.map((user) => (\n            <TableRow key={user.id}>\n              <TableCell>\n                <div className=\"flex items-center space-x-2\">\n                  <div>\n                    <div className=\"font-medium\">\n                      {user.firstName && user.lastName \n                        ? `${user.firstName} ${user.lastName}`\n                        : user.email?.split('@')[0] || 'Nieznany użytkownik'}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      ID: {user.id}\n                    </div>\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell>{user.email}</TableCell>\n              <TableCell>\n                <div className=\"flex items-center space-x-2\">\n                  <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                    {user.role === 'admin' ? (\n                      <Shield className=\"w-3 h-3 mr-1\" />\n                    ) : null}\n                    {user.role === 'admin' ? 'Admin' : 'Pracownik'}\n                  </Badge>\n                </div>\n              </TableCell>\n              <TableCell>\n                <Badge variant={user.isActive ? 'default' : 'destructive'}>\n                  {user.isActive ? (\n                    <UserCheck className=\"w-3 h-3 mr-1\" />\n                  ) : (\n                    <UserX className=\"w-3 h-3 mr-1\" />\n                  )}\n                  {user.isActive ? 'Aktywny' : 'Nieaktywny'}\n                </Badge>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center space-x-2\">\n                  <Select \n                    value={user.role} \n                    onValueChange={(role) => updateUserRoleMutation.mutate({ id: user.id, role })}\n                    disabled={updateUserRoleMutation.isPending}\n                  >\n                    <SelectTrigger className=\"w-32\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"employee\">Pracownik</SelectItem>\n                      <SelectItem value=\"admin\">Admin</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => toggleUserActiveMutation.mutate(user.id)}\n                    disabled={toggleUserActiveMutation.isPending}\n                    title={user.isActive ? \"Deaktywuj użytkownika\" : \"Aktywuj użytkownika\"}\n                  >\n                    {user.isActive ? (\n                      <UserX className=\"w-4 h-4\" />\n                    ) : (\n                      <UserCheck className=\"w-4 h-4\" />\n                    )}\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleDeleteUser(user.id, user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email?.split('@')[0] || 'Nieznany użytkownik')}\n                    disabled={deleteUserMutation.isPending}\n                    title=\"Usuń użytkownika\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\n///////////////////// Pending Users Component - Skopiowane z Admin /////////////////////\nfunction PendingUsersSection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Query for pending users\n  const { data: pendingUsers = [], isLoading: pendingLoading } = useQuery({\n    queryKey: [\"/api/users/pending\"],\n  });\n\n  // Approve user mutation\n  const approveUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}/approve`, \"POST\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Użytkownik został zaakceptowany\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaakceptować użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject user mutation\n  const rejectUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(`/api/users/${id}/reject`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Użytkownik został odrzucony i usunięty\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się odrzucić użytkownika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRejectUser = (id: string, name: string) => {\n    if (confirm(`Czy na pewno chcesz odrzucić i usunąć użytkownika \"${name}\"? Tej operacji nie można cofnąć.`)) {\n      rejectUserMutation.mutate(id);\n    }\n  };\n\n  if (pendingLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (pendingUsers.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Shield className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n        <p className=\"text-muted-foreground\">Brak użytkowników oczekujących na akceptację</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Użytkownik</TableHead>\n            <TableHead>Email</TableHead>\n            <TableHead>Data rejestracji</TableHead>\n            <TableHead>Akcje</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {pendingUsers.map((user: any) => (\n            <TableRow key={user.id}>\n              <TableCell>\n                <div className=\"flex items-center space-x-2\">\n                  <div>\n                    <p className=\"font-medium\">\n                      {user.firstName && user.lastName \n                        ? `${user.firstName} ${user.lastName}`\n                        : user.email?.split('@')[0] || 'Nieznany użytkownik'\n                      }\n                    </p>\n                    {user.profileImageUrl && (\n                      <img \n                        src={user.profileImageUrl} \n                        alt=\"Avatar\" \n                        className=\"w-6 h-6 rounded-full inline-block ml-2\"\n                      />\n                    )}\n                  </div>\n                </div>\n              </TableCell>\n              <TableCell>\n                <span className=\"text-sm text-muted-foreground\">{user.email}</span>\n              </TableCell>\n              <TableCell>\n                <span className=\"text-sm text-muted-foreground\">\n                  {user.createdAt ? new Date(user.createdAt).toLocaleDateString('pl-PL') : 'Nieznana'}\n                </span>\n              </TableCell>\n              <TableCell>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    onClick={() => approveUserMutation.mutate(user.id)}\n                    disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                    title=\"Zaakceptuj użytkownika\"\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    <UserCheck className=\"w-4 h-4 mr-1\" />\n                    Akceptuj\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => handleRejectUser(\n                      user.id, \n                      user.firstName && user.lastName \n                        ? `${user.firstName} ${user.lastName}`\n                        : user.email?.split('@')[0] || 'Nieznany użytkownik'\n                    )}\n                    disabled={approveUserMutation.isPending || rejectUserMutation.isPending}\n                    title=\"Odrzuć użytkownika\"\n                  >\n                    <UserX className=\"w-4 h-4 mr-1\" />\n                    Odrzuć\n                  </Button>\n                </div>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}","size_bytes":19677},"client/src/pages/pending-approval.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Mail, Shield, RefreshCw } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function PendingApproval() {\n  const { user } = useAuth();\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Clock className=\"w-16 h-16 text-orange-500\" />\n          </div>\n          <CardTitle className=\"text-xl text-foreground\">\n            Konto oczekuje na akceptację\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <div className=\"space-y-2\">\n            <p className=\"text-muted-foreground\">\n              Twoje konto zostało utworzone, ale wymaga zatwierdzenia przez administratora.\n            </p>\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm text-muted-foreground\">\n                {(user as any)?.email}\n              </span>\n            </div>\n          </div>\n\n          <div className=\"bg-muted p-4 rounded-lg\">\n            <div className=\"flex items-center justify-center space-x-2 mb-2\">\n              <Shield className=\"w-5 h-5 text-blue-500\" />\n              <span className=\"font-medium text-foreground\">Status konta</span>\n            </div>\n            <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-200\">\n              Oczekuje na akceptację\n            </Badge>\n          </div>\n\n          <div className=\"space-y-4 pt-4\">\n            <div className=\"bg-muted/50 p-3 rounded-md\">\n              <p className=\"text-sm text-muted-foreground text-center\">\n                <strong>Co się dzieje teraz?</strong>\n              </p>\n              <ul className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <li>• Administrator został powiadomiony o Twojej rejestracji</li>\n                <li>• Twoje konto jest bezpiecznie zapisane w systemie</li>\n                <li>• Po zatwierdzeniu otrzymasz pełen dostęp do systemu wycen</li>\n              </ul>\n            </div>\n            \n            <p className=\"text-sm text-muted-foreground text-center\">\n              Proces akceptacji może potrwać kilka godzin. \n              Sprawdź ponownie później lub skontaktuj się z administratorem.\n            </p>\n            \n            <div className=\"flex flex-col space-y-2\">\n              <Button \n                onClick={handleRefresh}\n                variant=\"outline\"\n                className=\"w-full\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Sprawdź ponownie\n              </Button>\n              \n              <Button \n                onClick={handleLogout}\n                variant=\"ghost\"\n                className=\"w-full text-muted-foreground\"\n              >\n                Wyloguj się\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3512},"client/src/pages/admin-equipment-management.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Redirect, Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Wrench, \n  Plus, \n  Edit, \n  Copy, \n  DollarSign, \n  Trash2, \n  ArrowLeft, \n  AlertTriangle,\n  Settings,\n  Fuel,\n  CheckCircle2\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useState } from \"react\";\nimport { EquipmentAdditionalManager } from \"@/components/equipment-additional-manager\";\nimport { ServiceCostsManager } from \"@/components/service-costs-manager\";\n\n// Interfaces\ninterface EquipmentCategory {\n  id: number;\n  name: string;\n  description: string | null;\n}\n\ninterface Equipment {\n  id: number;\n  name: string;\n  description?: string;\n  model: string;\n  power?: string;\n  quantity: number;\n  availableQuantity: number;\n  category: EquipmentCategory;\n  categoryId: number;\n  fuelConsumption75?: number;\n  dimensions?: string;\n  weight?: string;\n  engine?: string;\n  alternator?: string;\n  fuelTankCapacity?: number;\n  pricing: EquipmentPricing[];\n  isActive: boolean;\n}\n\ninterface EquipmentPricing {\n  id: number;\n  equipmentId: number;\n  periodStart: number;\n  periodEnd?: number;\n  pricePerDay: string;\n  discountPercent: string;\n}\n\n// Schemas\nconst equipmentSchema = z.object({\n  name: z.string().min(1, \"Nazwa jest wymagana\"),\n  description: z.string().optional(),\n  model: z.string().min(1, \"Model jest wymagany\"),\n  power: z.string().optional(),\n  quantity: z.number().min(1, \"Ilość musi być większa od 0\"),\n  availableQuantity: z.number().min(0, \"Dostępna ilość nie może być ujemna\"),\n  categoryId: z.number().min(1, \"Kategoria jest wymagana\"),\n  fuelConsumption75: z.string().optional(),\n  dimensions: z.string().optional(),\n  weight: z.string().optional(),\n  engine: z.string().optional(),\n  alternator: z.string().optional(),\n  fuelTankCapacity: z.string().optional(),\n});\n\nconst pricingSchema = z.object({\n  equipmentId: z.number(),\n  periodStart: z.number().min(1, \"Początek okresu musi być większy od 0\"),\n  periodEnd: z.number().optional(),\n  pricePerDay: z.string().min(1, \"Cena jest wymagana\"),\n  discountPercent: z.string(),\n});\n\nexport default function AdminEquipmentManagement() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // State\n  const [selectedEquipment, setSelectedEquipment] = useState<Equipment | null>(null);\n  const [isEquipmentDialogOpen, setIsEquipmentDialogOpen] = useState(false);\n  const [isPricingDialogOpen, setIsPricingDialogOpen] = useState(false);\n  const [selectedEquipmentForPricing, setSelectedEquipmentForPricing] = useState<Equipment | null>(null);\n  const [localPrices, setLocalPrices] = useState<Record<number, number>>({});\n  const [localDiscounts, setLocalDiscounts] = useState<Record<number, number>>({});\n  const [editingPricing, setEditingPricing] = useState<any>(null);\n  const [selectedEquipmentCategory, setSelectedEquipmentCategory] = useState<string>(\"all\");\n  const [isEquipmentAdditionalDialogOpen, setIsEquipmentAdditionalDialogOpen] = useState(false);\n  const [selectedEquipmentForAdditional, setSelectedEquipmentForAdditional] = useState<Equipment | null>(null);\n  const [selectedEquipmentForServiceCosts, setSelectedEquipmentForServiceCosts] = useState<Equipment | null>(null);\n\n  // Redirect if not authenticated or not admin\n  if (!isAuthenticated || (user as any)?.role !== 'admin') {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  // Queries\n  const { data: equipment = [], isLoading: equipmentLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment\"],\n  });\n\n  const { data: inactiveEquipment = [], isLoading: inactiveEquipmentLoading } = useQuery<Equipment[]>({\n    queryKey: [\"/api/equipment/inactive\"],\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<EquipmentCategory[]>({\n    queryKey: [\"/api/equipment-categories\"],\n  });\n\n  // Forms\n  const equipmentForm = useForm<z.infer<typeof equipmentSchema>>({\n    resolver: zodResolver(equipmentSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      model: \"\",\n      power: \"\",\n      quantity: 1,\n      availableQuantity: 1,\n      categoryId: 0,\n      fuelConsumption75: \"\",\n      dimensions: \"\",\n      weight: \"\",\n      engine: \"\",\n      alternator: \"\",\n      fuelTankCapacity: \"\",\n    },\n  });\n\n  const pricingForm = useForm<z.infer<typeof pricingSchema>>({\n    resolver: zodResolver(pricingSchema),\n    defaultValues: {\n      equipmentId: 0,\n      periodStart: 1,\n      periodEnd: undefined,\n      pricePerDay: \"\",\n      discountPercent: \"0\",\n    },\n  });\n\n  // Get selected category details\n  const selectedCategory = categories.find(cat => cat.id.toString() === selectedEquipmentCategory);\n  const selectedCategoryName = selectedCategory?.name?.toLowerCase() || \"\";\n\n  // Mutations\n  const createEquipmentMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof equipmentSchema>) => {\n      const response = await apiRequest(\"/api/equipment\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Sprzęt został dodany pomyślnie\",\n      });\n      setIsEquipmentDialogOpen(false);\n      setSelectedEquipment(null);\n      equipmentForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateEquipmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: z.infer<typeof equipmentSchema> }) => {\n      const response = await apiRequest(`/api/equipment/${id}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Sprzęt został zaktualizowany pomyślnie\",\n      });\n      setIsEquipmentDialogOpen(false);\n      setSelectedEquipment(null);\n      equipmentForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEquipmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment/inactive\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Sprzęt został oznaczony jako nieaktywny\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const permanentDeleteEquipmentMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment/${id}/permanent`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment/inactive\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Nieaktywny sprzęt został całkowicie usunięty wraz ze wszystkimi powiązanymi danymi\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się całkowicie usunąć nieaktywnego sprzętu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPricingMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof pricingSchema>) => {\n      const response = await apiRequest(\"/api/equipment/pricing\", \"POST\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Cennik został dodany pomyślnie\",\n      });\n      setIsPricingDialogOpen(false);\n      pricingForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się dodać cennika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePricingMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: { pricePerDay: string; discountPercent: string } }) => {\n      const response = await apiRequest(`/api/equipment/pricing/${id}`, \"PUT\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Cennik został zaktualizowany pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się zaktualizować cennika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePricingMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await apiRequest(`/api/equipment/pricing/${id}`, \"DELETE\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/equipment\"] });\n      toast({\n        title: \"Sukces\",\n        description: \"Cennik został usunięty pomyślnie\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się usunąć cennika\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Event handlers\n  const handleEditEquipment = (equipment: Equipment) => {\n    setSelectedEquipment(equipment);\n    const formData = {\n      name: equipment.name || \"\",\n      description: equipment.description || \"\",\n      model: equipment.model || \"\",\n      power: equipment.power || \"\",\n      quantity: equipment.quantity || 1,\n      availableQuantity: equipment.availableQuantity || 1,\n      categoryId: equipment.category?.id || 23,\n      fuelConsumption75: equipment.fuelConsumption75?.toString() || \"\",\n      dimensions: equipment.dimensions || \"\",\n      weight: equipment.weight || \"\",\n      engine: equipment.engine || \"\",\n      alternator: equipment.alternator || \"\",\n      fuelTankCapacity: equipment.fuelTankCapacity?.toString() || \"\",\n    };\n    equipmentForm.reset(formData);\n    setIsEquipmentDialogOpen(true);\n  };\n\n  const handleCopyEquipment = (equipment: Equipment) => {\n    try {\n      setSelectedEquipment(null);\n      \n      const formData = {\n        name: `${equipment.name} (kopia)`,\n        description: equipment.description || \"\",\n        model: equipment.model || \"\",\n        power: equipment.power || \"\",\n        quantity: equipment.quantity,\n        availableQuantity: equipment.quantity,\n        categoryId: equipment.category.id,\n        fuelConsumption75: equipment.fuelConsumption75 ? equipment.fuelConsumption75.toString() : \"\",\n        dimensions: equipment.dimensions || \"\",\n        weight: equipment.weight || \"\",\n        engine: equipment.engine || \"\",\n        alternator: equipment.alternator || \"\",\n        fuelTankCapacity: equipment.fuelTankCapacity ? equipment.fuelTankCapacity.toString() : \"\",\n      };\n      \n      equipmentForm.reset(formData);\n      setIsEquipmentDialogOpen(true);\n    } catch (error) {\n      console.error(\"Błąd podczas kopiowania sprzętu:\", error);\n      toast({\n        title: \"Błąd\",\n        description: \"Nie udało się skopiować sprzętu\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteEquipment = (id: number) => {\n    if (confirm(\"Czy na pewno chcesz usunąć ten sprzęt?\")) {\n      deleteEquipmentMutation.mutate(id);\n    }\n  };\n\n  const onSubmitEquipment = (data: z.infer<typeof equipmentSchema>) => {\n    const processedData = {\n      ...data,\n      fuelConsumption75: data.fuelConsumption75 ? parseFloat(data.fuelConsumption75) : undefined,\n      fuelTankCapacity: data.fuelTankCapacity ? parseFloat(data.fuelTankCapacity) : undefined,\n    };\n    \n    if (selectedEquipment) {\n      updateEquipmentMutation.mutate({ id: selectedEquipment.id, data: processedData });\n    } else {\n      createEquipmentMutation.mutate(processedData);\n    }\n  };\n\n  const onSubmitPricing = (data: z.infer<typeof pricingSchema>) => {\n    createPricingMutation.mutate(data);\n  };\n\n  const handleUpdatePrice = (pricingId: number, equipmentId: number) => {\n    const newPrice = localPrices[pricingId];\n    const newDiscount = localDiscounts[pricingId];\n    \n    if (newPrice !== undefined || newDiscount !== undefined) {\n      const equipment = equipmentLoading ? [] : [...equipment];\n      const currentPricing = equipment\n        .find(eq => eq.id === equipmentId)\n        ?.pricing.find(p => p.id === pricingId);\n      \n      if (currentPricing) {\n        updatePricingMutation.mutate({\n          id: pricingId,\n          data: {\n            pricePerDay: newPrice !== undefined ? newPrice.toString() : currentPricing.pricePerDay,\n            discountPercent: newDiscount !== undefined ? newDiscount.toString() : currentPricing.discountPercent,\n          }\n        });\n      }\n    }\n  };\n\n  const filteredEquipment = equipment.filter((item) => \n    selectedEquipmentCategory === \"all\" || item.category.id.toString() === selectedEquipmentCategory\n  );\n\n  if (equipmentLoading || categoriesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      {/* Header with back button */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center space-x-4 mb-4\">\n          <Link href=\"/admin-room\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Powrót do ADMIN ROOM\n            </Button>\n          </Link>\n        </div>\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <Wrench className=\"w-8 h-8 text-green-500\" />\n          <h1 className=\"text-3xl font-bold text-foreground\">Zarządzanie sprzętem</h1>\n        </div>\n        <p className=\"text-muted-foreground text-lg\">\n          Dodawaj, edytuj i zarządzaj sprzętem oraz cennikami\n        </p>\n      </div>\n\n      {/* Equipment Management Section */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle className=\"flex items-center\">\n              <Wrench className=\"w-5 h-5 mr-2\" />\n              Zarządzanie sprzętem\n            </CardTitle>\n            <div className=\"flex items-center space-x-4\">\n              <Select value={selectedEquipmentCategory} onValueChange={setSelectedEquipmentCategory}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filtruj po kategorii\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Wszystkie kategorie</SelectItem>\n                  {categories.map((category) => (\n                    <SelectItem key={category.id} value={category.id.toString()}>\n                      {category.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Dialog open={isEquipmentDialogOpen} onOpenChange={(open) => {\n                setIsEquipmentDialogOpen(open);\n                if (!open) {\n                  setSelectedEquipment(null);\n                  equipmentForm.reset();\n                }\n              }}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Sprzęt\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>\n                      {selectedEquipment ? \"Edytuj sprzęt\" : \"Dodaj sprzęt\"}\n                    </DialogTitle>\n                  </DialogHeader>\n                  <div className=\"max-h-[calc(90vh-120px)] overflow-y-auto pr-2\">\n                    <Form {...equipmentForm}>\n                      <form onSubmit={equipmentForm.handleSubmit(onSubmitEquipment)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={equipmentForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Nazwa</FormLabel>\n                              <FormControl>\n                                <Input {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={equipmentForm.control}\n                          name=\"categoryId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Kategoria</FormLabel>\n                              <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value ? field.value.toString() : \"\"}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Wybierz kategorię\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {categories.map((category) => (\n                                    <SelectItem key={category.id} value={category.id.toString()}>\n                                      {category.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={equipmentForm.control}\n                        name=\"model\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Model</FormLabel>\n                            <FormControl>\n                              <Input {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={equipmentForm.control}\n                          name=\"quantity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Ilość</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={equipmentForm.control}\n                          name=\"availableQuantity\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Dostępna ilość</FormLabel>\n                              <FormControl>\n                                <Input \n                                  type=\"number\" \n                                  {...field}\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <FormField\n                        control={equipmentForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Opis</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      {/* Technical specifications based on category */}\n                      {selectedCategoryName && (\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-medium text-foreground\">\n                            Parametry techniczne ({selectedCategory?.name})\n                          </h3>\n                          \n                          <div className=\"grid grid-cols-2 gap-4\">\n                            {/* Power field for generators, heaters, AC units */}\n                            {(selectedCategoryName.includes(\"agregat\") || \n                              selectedCategoryName.includes(\"nagrzewnic\") || \n                              selectedCategoryName.includes(\"klimat\")) && (\n                              <FormField\n                                control={equipmentForm.control}\n                                name=\"power\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Moc</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} placeholder=\"np. 90.18 kW\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            )}\n\n                            {/* Fuel consumption for equipment with engines */}\n                            {(selectedCategoryName.includes(\"agregat\") || \n                              selectedCategoryName.includes(\"nagrzewnic\") || \n                              selectedCategoryName.includes(\"oświetlen\") || \n                              selectedCategoryName.includes(\"pojazd\")) && (\n                              <>\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"fuelConsumption75\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>\n                                        {selectedCategoryName.includes(\"oświetlen\") ? \"Spalanie paliwa (l/h)\" : \n                                         selectedCategoryName.includes(\"pojazd\") ? \"Spalanie paliwa (l/100km)\" :\n                                         \"Spalanie przy 75% obciążenia (l/h)\"}\n                                      </FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          step=\"0.1\"\n                                          placeholder={selectedCategoryName.includes(\"oświetlen\") ? \"np. 4.2\" : \n                                                     selectedCategoryName.includes(\"pojazd\") ? \"np. 8.5\" :\n                                                     \"np. 35.3\"}\n                                          {...field}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"fuelTankCapacity\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Pojemność zbiornika paliwa (l)</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          placeholder={selectedCategoryName.includes(\"oświetlen\") ? \"np. 60\" : \n                                                     selectedCategoryName.includes(\"pojazd\") ? \"np. 80\" :\n                                                     \"np. 350\"}\n                                          {...field}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"engine\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Silnik</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} placeholder=\"np. VOLVO TAD734GE\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={equipmentForm.control}\n                                  name=\"alternator\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Alternator</FormLabel>\n                                      <FormControl>\n                                        <Input {...field} placeholder=\"np. LEROY SOMER\" />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </>\n                            )}\n\n                            {/* Common fields for all equipment */}\n                            <FormField\n                              control={equipmentForm.control}\n                              name=\"dimensions\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Wymiary (DxSxW mm)</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} placeholder=\"np. 3600x1100x1800\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={equipmentForm.control}\n                              name=\"weight\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Waga (kg)</FormLabel>\n                                  <FormControl>\n                                    <Input {...field} placeholder=\"np. 1850\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </div>\n                      )}\n\n                        <Button type=\"submit\" disabled={createEquipmentMutation.isPending || updateEquipmentMutation.isPending}>\n                          {createEquipmentMutation.isPending || updateEquipmentMutation.isPending \n                            ? \"Zapisywanie...\" \n                            : selectedEquipment ? \"Zaktualizuj sprzęt\" : \"Dodaj sprzęt\"}\n                        </Button>\n                      </form>\n                    </Form>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nazwa</TableHead>\n                  <TableHead>Kategoria</TableHead>\n                  <TableHead>Model</TableHead>\n                  <TableHead>Ilość</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Akcje</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredEquipment.map((item) => (\n                  <TableRow key={item.id}>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <div>\n                          <div className=\"font-medium\">{item.name}</div>\n                          {item.description && (\n                            <div className=\"text-sm text-muted-foreground\">{item.description}</div>\n                          )}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"secondary\">{item.category.name}</Badge>\n                    </TableCell>\n                    <TableCell>{item.model}</TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-1\">\n                        <span>{item.availableQuantity}/{item.quantity}</span>\n                        {item.availableQuantity === item.quantity ? (\n                          <CheckCircle2 className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                          <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={item.isActive ? \"default\" : \"destructive\"}>\n                        {item.isActive ? \"Aktywny\" : \"Nieaktywny\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => handleEditEquipment(item)}\n                          title=\"Edytuj sprzęt\"\n                          className=\"h-7 w-7 p-0\"\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => handleCopyEquipment(item)}\n                          title=\"Kopiuj sprzęt\"\n                          className=\"text-blue-600 hover:text-blue-700 h-7 w-7 p-0\"\n                        >\n                          <Copy className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => {\n                            setSelectedEquipmentForPricing(item);\n                            setTimeout(() => {\n                              const pricingSection = document.querySelector('[data-pricing-section]');\n                              if (pricingSection) {\n                                pricingSection.scrollIntoView({ behavior: 'smooth' });\n                              }\n                            }, 100);\n                          }}\n                          title=\"Edytuj cennik\"\n                          className=\"text-yellow-600 hover:text-yellow-700 h-7 w-7 p-0\"\n                        >\n                          <DollarSign className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => {\n                            setSelectedEquipmentForAdditional(item);\n                            setIsEquipmentAdditionalDialogOpen(true);\n                          }}\n                          title=\"Wyposażenie dodatkowe i akcesoria\"\n                          className=\"text-indigo-600 hover:text-indigo-700 h-7 w-7 p-0\"\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => {\n                            setSelectedEquipmentForServiceCosts(item);\n                            setTimeout(() => {\n                              const serviceCostsSection = document.querySelector('[data-service-costs-section]');\n                              if (serviceCostsSection) {\n                                serviceCostsSection.scrollIntoView({ behavior: 'smooth' });\n                              }\n                            }, 100);\n                          }}\n                          title=\"Koszty serwisu\"\n                          className=\"text-purple-600 hover:text-purple-700 h-7 w-7 p-0\"\n                        >\n                          <Wrench className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"xs\"\n                          onClick={() => handleDeleteEquipment(item.id)}\n                          title=\"Usuń sprzęt\"\n                          className=\"text-red-600 hover:text-red-700 h-7 w-7 p-0\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pricing Management Section */}\n      <div className=\"mb-8\" data-pricing-section>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <DollarSign className=\"w-5 h-5\" />\n              <span>Edycja cenników</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div className=\"flex flex-wrap gap-2\">\n                {equipment\n                  .filter((item) => selectedEquipmentCategory === \"all\" || item.category.id.toString() === selectedEquipmentCategory)\n                  .map((item) => (\n                  <Button\n                    key={item.id}\n                    variant={selectedEquipmentForPricing?.id === item.id ? \"default\" : \"outline\"}\n                    onClick={() => {\n                      setSelectedEquipmentForPricing(item);\n                      setLocalPrices({});\n                    }}\n                    className=\"mb-2\"\n                  >\n                    {item.name}\n                  </Button>\n                ))}\n              </div>\n\n              {selectedEquipmentForPricing && (\n                <div className=\"border rounded-lg p-4\">\n                  <h3 className=\"text-lg font-semibold mb-4\">\n                    {selectedEquipmentForPricing.name} - zasilane paliwem:\n                  </h3>\n                  \n                  {/* Warning for default pricing */}\n                  {selectedEquipmentForPricing.pricing.some(p => p.pricePerDay === \"100.00\" && p.discountPercent === \"0.00\") && (\n                    <div className=\"mb-4 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md\">\n                      <div className=\"flex items-start\">\n                        <AlertTriangle className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5 mr-2 flex-shrink-0\" />\n                        <div>\n                          <h4 className=\"font-medium text-yellow-800 dark:text-yellow-200\">\n                            Urządzenie wymaga konfiguracji cennika\n                          </h4>\n                          <p className=\"text-sm text-yellow-700 dark:text-yellow-300 mt-1\">\n                            To urządzenie ma domyślne ceny (100 zł/doba, 0% rabat). Zaktualizuj ceny i rabaty zgodnie z rzeczywistymi wartościami przed użyciem w ofertach.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <h4 className=\"font-medium\">Cennik według okresów wynajmu</h4>\n                      <Dialog open={isPricingDialogOpen} onOpenChange={setIsPricingDialogOpen}>\n                        <DialogTrigger asChild>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => {\n                              pricingForm.reset({\n                                equipmentId: selectedEquipmentForPricing.id,\n                                periodStart: 1,\n                                periodEnd: undefined,\n                                pricePerDay: \"\",\n                                discountPercent: \"0\",\n                              });\n                            }}\n                          >\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Dodaj okres\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Dodaj cennik</DialogTitle>\n                          </DialogHeader>\n                          <Form {...pricingForm}>\n                            <form onSubmit={pricingForm.handleSubmit(onSubmitPricing)} className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <FormField\n                                  control={pricingForm.control}\n                                  name=\"periodStart\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Początek okresu (dni)</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          {...field} \n                                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                                <FormField\n                                  control={pricingForm.control}\n                                  name=\"periodEnd\"\n                                  render={({ field }) => (\n                                    <FormItem>\n                                      <FormLabel>Koniec okresu (dni)</FormLabel>\n                                      <FormControl>\n                                        <Input \n                                          type=\"number\" \n                                          {...field} \n                                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                          placeholder=\"Puste dla 30+\"\n                                        />\n                                      </FormControl>\n                                      <FormMessage />\n                                    </FormItem>\n                                  )}\n                                />\n                              </div>\n                              <FormField\n                                control={pricingForm.control}\n                                name=\"pricePerDay\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Cena za dobę (PLN)</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} placeholder=\"350.00\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={pricingForm.control}\n                                name=\"discountPercent\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Rabat (%)</FormLabel>\n                                    <FormControl>\n                                      <Input {...field} placeholder=\"0\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <Button type=\"submit\" disabled={createPricingMutation.isPending}>\n                                {createPricingMutation.isPending ? \"Dodawanie...\" : \"Dodaj cennik\"}\n                              </Button>\n                            </form>\n                          </Form>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Okres (dni)</TableHead>\n                          <TableHead>Cena za dobę (PLN)</TableHead>\n                          <TableHead>Rabat (%)</TableHead>\n                          <TableHead>Akcje</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {selectedEquipmentForPricing.pricing\n                          .sort((a, b) => a.periodStart - b.periodStart)\n                          .map((pricing) => (\n                          <TableRow key={pricing.id}>\n                            <TableCell>\n                              {pricing.periodStart} - {pricing.periodEnd || \"30+\"}\n                            </TableCell>\n                            <TableCell>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                defaultValue={pricing.pricePerDay}\n                                onChange={(e) => {\n                                  setLocalPrices(prev => ({\n                                    ...prev,\n                                    [pricing.id]: parseFloat(e.target.value) || 0\n                                  }));\n                                }}\n                                className=\"w-24\"\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <Input\n                                type=\"number\"\n                                step=\"0.01\"\n                                defaultValue={pricing.discountPercent}\n                                onChange={(e) => {\n                                  setLocalDiscounts(prev => ({\n                                    ...prev,\n                                    [pricing.id]: parseFloat(e.target.value) || 0\n                                  }));\n                                }}\n                                className=\"w-20\"\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => handleUpdatePrice(pricing.id, selectedEquipmentForPricing.id)}\n                                  disabled={updatePricingMutation.isPending}\n                                >\n                                  Aktualizuj\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    if (confirm(\"Czy na pewno chcesz usunąć ten cennik?\")) {\n                                      deletePricingMutation.mutate(pricing.id);\n                                    }\n                                  }}\n                                  disabled={deletePricingMutation.isPending}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Service Costs Section */}\n      <div className=\"mb-8\" data-service-costs-section>\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Wrench className=\"w-5 h-5\" />\n              <span>Koszty serwisu</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedEquipmentForServiceCosts ? (\n              <ServiceCostsManager\n                key={selectedEquipmentForServiceCosts.id}\n                equipmentId={selectedEquipmentForServiceCosts.id}\n                equipmentName={selectedEquipmentForServiceCosts.name}\n              />\n            ) : (\n              <p className=\"text-muted-foreground\">\n                Wybierz sprzęt z listy powyżej, aby zarządzać kosztami serwisu\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Inactive Equipment Section */}\n      {inactiveEquipment.length > 0 && (\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <AlertTriangle className=\"w-5 h-5 mr-2 text-orange-500\" />\n              Nieaktywny sprzęt\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Sprzęt oznaczony jako nieaktywny. Możesz go bezpiecznie usunąć jeśli nie jest używany w wycenach.\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {inactiveEquipment.map((item) => (\n                <div key={item.id} className=\"flex items-center justify-between p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-foreground\">{item.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {item.category?.name} • {item.model}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => {\n                        if (confirm(`Czy na pewno chcesz całkowicie usunąć \"${item.name}\"? Ta operacja jest nieodwracalna i usunie wszystkie powiązane dane.`)) {\n                          permanentDeleteEquipmentMutation.mutate(item.id);\n                        }\n                      }}\n                      disabled={permanentDeleteEquipmentMutation.isPending}\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Usuń całkowicie\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Equipment Additional and Accessories Management Dialog */}\n      <Dialog open={isEquipmentAdditionalDialogOpen} onOpenChange={setIsEquipmentAdditionalDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Wyposażenie dodatkowe i akcesoria - {selectedEquipmentForAdditional?.name}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {selectedEquipmentForAdditional && (\n              <EquipmentAdditionalManager\n                key={selectedEquipmentForAdditional.id}\n                equipmentId={selectedEquipmentForAdditional.id}\n                equipmentName={selectedEquipmentForAdditional.name}\n              />\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":53946}}}